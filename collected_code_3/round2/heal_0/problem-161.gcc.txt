collected_code_3/problem-161-2.c: In function 'createNode':
collected_code_3/problem-161-2.c:11:19: warning: dereference of possibly-NULL 'newNode' [CWE-690] [-Wanalyzer-possible-null-dereference]
   11 |     newNode->data = data;
      |     ~~~~~~~~~~~~~~^~~~~~
  'createNode': events 1-2
    |
    |   10 |     Node* newNode = (Node*)malloc(sizeof(Node));
    |      |                            ^~~~~~~~~~~~~~~~~~~~
    |      |                            |
    |      |                            (1) this call could return NULL
    |   11 |     newNode->data = data;
    |      |     ~~~~~~~~~~~~~~~~~~~~    
    |      |                   |
    |      |                   (2) 'newNode' could be NULL: unchecked value from (1)
    |
collected_code_3/problem-161-2.c: In function 'removeElements':
collected_code_3/problem-161-2.c:46:21: warning: dereference of NULL 'prev' [CWE-476] [-Wanalyzer-null-dereference]
   46 |             current = prev->next;
      |             ~~~~~~~~^~~~~~~~~~~~
  'removeElements': events 1-3
    |
    |   32 |     while (temp != NULL) {
    |      |                 ^
    |      |                 |
    |      |                 (1) following 'true' branch (when 'temp' is non-NULL)...
    |   33 |         Node* prev = NULL;
    |      |               ~~~~
    |      |               |
    |      |               (2) ...to here
    |      |               (3) 'prev' is NULL
    |
  'removeElements': events 4-10
    |
    |   35 |         while (current != NULL) {
    |      |                        ^
    |      |                        |
    |      |                        (4) following 'true' branch (when 'current' is non-NULL)...
    |   36 |             if (current->data == temp->data) {
    |      |                ~~~~~~~~~~~~~~
    |      |                |       |
    |      |                |       (5) ...to here
    |      |                (6) following 'true' branch...
    |   37 |                 if (prev == NULL) {
    |      |                    ~    
    |      |                    |
    |      |                    (7) ...to here
    |      |                    (8) following 'true' branch (when 'prev' is NULL)...
    |   38 |                     *firstList = current->next;
    |      |                                  ~~~~~~~~~~~~~
    |      |                                         |
    |      |                                         (9) ...to here
    |......
    |   46 |             current = prev->next;
    |      |             ~~~~~~~~~~~~~~~~~~~~
    |      |                     |
    |      |                     (10) dereference of NULL 'prev'
    |
