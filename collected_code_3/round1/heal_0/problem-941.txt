In C, there's no built-in support for lists or tuples like in Python or some other high-level languages. However, you can achieve similar functionality using arrays and structures. Here's an example:

```c
#include <stdio.h>

typedef struct {
    int isTuple;
    int value;
} Element;

int countUntilTuple(Element* list, int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (list[i].isTuple) {
            break;
        }
        count++;
    }
    return count;
}

int main() {
    Element list[5] = {
        {0, 1},
        {0, 2},
        {1, 3},
        {0, 4},
        {0, 5}
    };
    int count = countUntilTuple(list, 5);
    printf("Count until tuple: %d\n", count);
    return 0;
}
```

In this code, `Element` is a structure that represents an element in the list. It has a `isTuple` field that is 1 if the element is a tuple and 0 otherwise. The `value` field represents the value of the element.

The `countUntilTuple` function iterates over the elements in the list until it finds an element that is a tuple (i.e., its `isTuple` field is 1). It returns the number of elements before the tuple.

The `main` function creates a list of `Element`s and calls `countUntilTuple` to count the elements until a tuple. It then prints the count.