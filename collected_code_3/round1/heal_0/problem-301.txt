Here is a simple C program that calculates the depth of a dictionary, assuming that the dictionary is represented as a tree structure.

```c
#include <stdio.h>

struct Node {
    struct Node* children[26];
};

int maxDepth(struct Node* node) {
    if (node == NULL)
        return 0;
    else {
        int max_depth = 0;
        for (int i = 0; i < 26; i++) {
            int child_depth = maxDepth(node->children[i]);
            if (child_depth > max_depth)
                max_depth = child_depth;
        }
        return max_depth + 1;
    }
}

int main() {
    struct Node* root = NULL;
    printf("Depth of tree is %d", maxDepth(root));
    return 0;
}
```

This program defines a `Node` struct, which represents a node in the tree. Each node has an array of pointers to its children. The `maxDepth` function calculates the maximum depth of the tree. It first checks if the node is `NULL`. If it is, it returns 0, because a `NULL` node doesn't contribute to the depth of the tree. Otherwise, it iterates over the children of the node, recursively calling `maxDepth` on each child and keeping track of the maximum depth found. It then returns this maximum depth plus 1, to account for the current node.

The `main` function creates a `root` node and then prints the depth of the tree rooted at this node. Note that in this example, the `root` node is `NULL`, so the depth of the tree is 0. In a real application, you would probably want to build up a more interesting tree.