I'm sorry for the confusion, but C does not support lambda functions or tuples natively like Python or some other high-level languages. However, you can achieve similar functionality using structures and function pointers in C. Here is an example of how you might sort an array of structures in C:

```c
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int first;
    int second;
} Tuple;

int compare(const void* a, const void* b) {
    Tuple* tupleA = (Tuple*) a;
    Tuple* tupleB = (Tuple*) b;
    return tupleA->first - tupleB->first;
}

void sortTuples(Tuple* tuples, size_t size) {
    qsort(tuples, size, sizeof(Tuple), compare);
}

int main() {
    Tuple tuples[] = {{3, 4}, {1, 2}, {5, 6}, {2, 3}};
    size_t size = sizeof(tuples) / sizeof(tuples[0]);

    sortTuples(tuples, size);

    for(size_t i = 0; i < size; i++) {
        printf("(%d, %d)\n", tuples[i].first, tuples[i].second);
    }

    return 0;
}
```

In this code, we define a `Tuple` structure to hold two integers. We then define a `compare` function that can be used by the `qsort` function to sort an array of `Tuple` structures. The `sortTuples` function wraps the `qsort` call to provide a cleaner interface. Finally, in the `main` function, we create an array of `Tuple` structures, sort them, and print the sorted array.