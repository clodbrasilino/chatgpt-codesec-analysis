collected_code/problem-282-0.c: In function 'subtractLists':
collected_code/problem-282-0.c:25:47: warning: implicit declaration of function 'malloc' [-Wimplicit-function-declaration]
   25 |             struct Node* node = (struct Node*)malloc(sizeof(struct Node));
      |                                               ^~~~~~
collected_code/problem-282-0.c:2:1: note: include '<stdlib.h>' or provide a declaration of 'malloc'
    1 | #include <stdio.h>
  +++ |+#include <stdlib.h>
    2 | 
collected_code/problem-282-0.c:25:47: warning: incompatible implicit declaration of built-in function 'malloc' [-Wbuiltin-declaration-mismatch]
   25 |             struct Node* node = (struct Node*)malloc(sizeof(struct Node));
      |                                               ^~~~~~
collected_code/problem-282-0.c:25:47: note: include '<stdlib.h>' or provide a declaration of 'malloc'
collected_code/problem-282-0.c: In function 'main':
collected_code/problem-282-0.c:54:27: warning: incompatible implicit declaration of built-in function 'malloc' [-Wbuiltin-declaration-mismatch]
   54 |     list1 = (struct Node*)malloc(sizeof(struct Node));
      |                           ^~~~~~
collected_code/problem-282-0.c:54:27: note: include '<stdlib.h>' or provide a declaration of 'malloc'
collected_code/problem-282-0.c: In function 'subtractLists':
collected_code/problem-282-0.c:26:24: warning: dereference of possibly-NULL 'node' [CWE-690] [-Wanalyzer-possible-null-dereference]
   26 |             node->data = list1->data;
      |             ~~~~~~~~~~~^~~~~~~~~~~~~
  'subtractLists': events 1-6
    |
    |   13 |     while (list1 != NULL) {
    |      |                  ^
    |      |                  |
    |      |                  (1) following 'true' branch (when 'list1' is non-NULL)...
    |   14 |         int exist = 0;
    |      |             ~~~~~ 
    |      |             |
    |      |             (2) ...to here
    |......
    |   23 |         if (exist == 0) {
    |      |            ~      
    |      |            |
    |      |            (3) following 'true' branch (when 'exist == 0')...
    |   24 |             // Add the current node to the result list
    |   25 |             struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    |      |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                                               |
    |      |                                               (4) ...to here
    |      |                                               (5) this call could return NULL
    |   26 |             node->data = list1->data;
    |      |             ~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                        |
    |      |                        (6) 'node' could be NULL: unchecked value from (5)
    |
collected_code/problem-282-0.c:47:1: warning: leak of 'result' [CWE-401] [-Wanalyzer-malloc-leak]
   47 | }
      | ^
  'main': events 1-2
    |
    |   49 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |......
    |   71 |     subtractLists(list1, list2);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (2) calling 'subtractLists' from 'main'
    |
    +--> 'subtractLists': event 3
           |
           |    8 | void subtractLists(struct Node* list1, struct Node* list2) {
           |      |      ^~~~~~~~~~~~~
           |      |      |
           |      |      (3) entry to 'subtractLists'
           |
         'subtractLists': events 4-5
           |
           |   13 |     while (list1 != NULL) {
           |      |                  ^
           |      |                  |
           |      |                  (4) following 'true' branch (when 'list1' is non-NULL)...
           |   14 |         int exist = 0;
           |      |             ~~~~~ 
           |      |             |
           |      |             (5) ...to here
           |
         'subtractLists': events 6-9
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (6) following 'true' branch (when 'temp' is non-NULL)...
           |   17 |             if (list1->data == temp->data) {
           |      |                ~~~~~~~~~~~~
           |      |                |     |
           |      |                |     (7) ...to here
           |      |                (8) following 'false' branch...
           |......
           |   21 |             temp = temp->next;
           |      |             ~~~~~~~~~~~~~~~~~
           |      |                  |
           |      |                  (9) ...to here
           |
         'subtractLists': events 10-13
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (10) following 'true' branch (when 'temp' is non-NULL)...
           |   17 |             if (list1->data == temp->data) {
           |      |                ~~~~~~~~~~~~
           |      |                |     |
           |      |                |     (11) ...to here
           |      |                (12) following 'false' branch...
           |......
           |   21 |             temp = temp->next;
           |      |             ~~~~~~~~~~~~~~~~~
           |      |                  |
           |      |                  (13) ...to here
           |
         'subtractLists': events 14-17
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (14) following 'true' branch (when 'temp' is non-NULL)...
           |   17 |             if (list1->data == temp->data) {
           |      |                ~~~~~~~~~~~~
           |      |                |     |
           |      |                |     (15) ...to here
           |      |                (16) following 'false' branch...
           |......
           |   21 |             temp = temp->next;
           |      |             ~~~~~~~~~~~~~~~~~
           |      |                  |
           |      |                  (17) ...to here
           |
         'subtractLists': events 18-25
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (18) following 'false' branch (when 'temp' is NULL)...
           |......
           |   23 |         if (exist == 0) {
           |      |            ~         
           |      |            |
           |      |            (19) ...to here
           |      |            (20) following 'true' branch (when 'exist == 0')...
           |   24 |             // Add the current node to the result list
           |   25 |             struct Node* node = (struct Node*)malloc(sizeof(struct Node));
           |      |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                                               |
           |      |                                               (21) ...to here
           |      |                                               (22) allocated here
           |   26 |             node->data = list1->data;
           |      |             ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                        |
           |      |                        (23) assuming 'node' is non-NULL
           |   27 |             node->next = NULL;
           |   28 |             if (result == NULL) {
           |      |                ~     
           |      |                |
           |      |                (24) following 'true' branch (when 'result' is NULL)...
           |   29 |                 result = node;
           |      |                 ~~~~~~~~~~~~~
           |      |                        |
           |      |                        (25) ...to here
           |
         'subtractLists': events 26-27
           |
           |   13 |     while (list1 != NULL) {
           |      |                  ^
           |      |                  |
           |      |                  (26) following 'true' branch (when 'list1' is non-NULL)...
           |   14 |         int exist = 0;
           |      |             ~~~~~ 
           |      |             |
           |      |             (27) ...to here
           |
         'subtractLists': events 28-33
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (28) following 'true' branch (when 'temp' is non-NULL)...
           |   17 |             if (list1->data == temp->data) {
           |      |                ~~~~~~~~~~~~
           |      |                |     |
           |      |                |     (29) ...to here
           |      |                (30) following 'true' branch...
           |   18 |                 exist = 1;
           |      |                 ~~~~~~~~~
           |      |                       |
           |      |                       (31) ...to here
           |......
           |   23 |         if (exist == 0) {
           |      |            ~         
           |      |            |
           |      |            (32) following 'false' branch (when 'exist != 0')...
           |......
           |   38 |         list1 = list1->next;
           |      |         ~~~~~~~~~~~~~~~~~~~
           |      |               |
           |      |               (33) ...to here
           |
         'subtractLists': events 34-35
           |
           |   13 |     while (list1 != NULL) {
           |      |                  ^
           |      |                  |
           |      |                  (34) following 'true' branch (when 'list1' is non-NULL)...
           |   14 |         int exist = 0;
           |      |             ~~~~~ 
           |      |             |
           |      |             (35) ...to here
           |
         'subtractLists': events 36-39
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (36) following 'true' branch (when 'temp' is non-NULL)...
           |   17 |             if (list1->data == temp->data) {
           |      |                ~~~~~~~~~~~~
           |      |                |     |
           |      |                |     (37) ...to here
           |      |                (38) following 'false' branch...
           |......
           |   21 |             temp = temp->next;
           |      |             ~~~~~~~~~~~~~~~~~
           |      |                  |
           |      |                  (39) ...to here
           |
         'subtractLists': events 40-45
           |
           |   16 |         while (temp != NULL) {
           |      |                     ^
           |      |                     |
           |      |                     (40) following 'true' branch (when 'temp' is non-NULL)...
           |   17 |             if (list1->data == temp->data) {
           |      |                ~~~~~~~~~~~~
           |      |                |     |
           |      |                |     (41) ...to here
           |      |                (42) following 'true' branch...
           |   18 |                 exist = 1;
           |      |                 ~~~~~~~~~
           |      |                       |
           |      |                       (43) ...to here
           |......
           |   23 |         if (exist == 0) {
           |      |            ~         
           |      |            |
           |      |            (44) following 'false' branch (when 'exist != 0')...
           |......
           |   38 |         list1 = list1->next;
           |      |         ~~~~~~~~~~~~~~~~~~~
           |      |               |
           |      |               (45) ...to here
           |
         'subtractLists': events 46-47
           |
           |   13 |     while (list1 != NULL) {
           |      |                  ^
           |      |                  |
           |      |                  (46) following 'false' branch (when 'list1' is NULL)...
           |......
           |   42 |     temp = result;
           |      |     ~~~~~~~~~~~~~ 
           |      |          |
           |      |          (47) ...to here
           |
         'subtractLists': events 48-49
           |
           |   43 |     while (temp != NULL) {
           |      |                 ^
           |      |                 |
           |      |                 (48) following 'true' branch (when 'temp' is non-NULL)...
           |   44 |         printf("%d ", temp->data);
           |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |         |
           |      |         (49) ...to here
           |
         'subtractLists': events 50-52
           |
           |   43 |     while (temp != NULL) {
           |      |                 ^
           |      |                 |
           |      |                 (50) following 'false' branch (when 'temp' is NULL)...
           |......
           |   47 | }
           |      | ~                
           |      | |
           |      | (51) ...to here
           |      | (52) 'result' leaks here; was allocated at (22)
           |
collected_code/problem-282-0.c: In function 'main':
collected_code/problem-282-0.c:55:17: warning: dereference of possibly-NULL 'list1' [CWE-690] [-Wanalyzer-possible-null-dereference]
   55 |     list1->data = 1;
      |     ~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   54 |     list1 = (struct Node*)malloc(sizeof(struct Node));
    |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                           |
    |      |                           (1) this call could return NULL
    |   55 |     list1->data = 1;
    |      |     ~~~~~~~~~~~~~~~        
    |      |                 |
    |      |                 (2) 'list1' could be NULL: unchecked value from (1)
    |
collected_code/problem-282-0.c:57:23: warning: dereference of possibly-NULL '*list1.next' [CWE-690] [-Wanalyzer-possible-null-dereference]
   57 |     list1->next->data = 2;
      |     ~~~~~~~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   56 |     list1->next = (struct Node*)malloc(sizeof(struct Node));
    |      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                                 |
    |      |                                 (1) this call could return NULL
    |   57 |     list1->next->data = 2;
    |      |     ~~~~~~~~~~~~~~~~~~~~~        
    |      |                       |
    |      |                       (2) '*list1.next' could be NULL: unchecked value from (1)
    |
collected_code/problem-282-0.c:59:29: warning: dereference of possibly-NULL '*list1_21->next.next' [CWE-690] [-Wanalyzer-possible-null-dereference]
   59 |     list1->next->next->data = 3;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   58 |     list1->next->next = (struct Node*)malloc(sizeof(struct Node));
    |      |                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                                       |
    |      |                                       (1) this call could return NULL
    |   59 |     list1->next->next->data = 3;
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~        
    |      |                             |
    |      |                             (2) '*list1_21->next.next' could be NULL: unchecked value from (1)
    |
collected_code/problem-282-0.c:64:17: warning: dereference of possibly-NULL 'list2' [CWE-690] [-Wanalyzer-possible-null-dereference]
   64 |     list2->data = 2;
      |     ~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   63 |     list2 = (struct Node*)malloc(sizeof(struct Node));
    |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                           |
    |      |                           (1) this call could return NULL
    |   64 |     list2->data = 2;
    |      |     ~~~~~~~~~~~~~~~        
    |      |                 |
    |      |                 (2) 'list2' could be NULL: unchecked value from (1)
    |
collected_code/problem-282-0.c:66:23: warning: dereference of possibly-NULL '*list2.next' [CWE-690] [-Wanalyzer-possible-null-dereference]
   66 |     list2->next->data = 3;
      |     ~~~~~~~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   65 |     list2->next = (struct Node*)malloc(sizeof(struct Node));
    |      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                                 |
    |      |                                 (1) this call could return NULL
    |   66 |     list2->next->data = 3;
    |      |     ~~~~~~~~~~~~~~~~~~~~~        
    |      |                       |
    |      |                       (2) '*list2.next' could be NULL: unchecked value from (1)
    |
collected_code/problem-282-0.c:68:29: warning: dereference of possibly-NULL '*list2_31->next.next' [CWE-690] [-Wanalyzer-possible-null-dereference]
   68 |     list2->next->next->data = 4;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   67 |     list2->next->next = (struct Node*)malloc(sizeof(struct Node));
    |      |                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                                       |
    |      |                                       (1) this call could return NULL
    |   68 |     list2->next->next->data = 4;
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~        
    |      |                             |
    |      |                             (2) '*list2_31->next.next' could be NULL: unchecked value from (1)
    |
