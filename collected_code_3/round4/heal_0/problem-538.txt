C language does not support tuples or lists like Python or some other high-level languages. However, we can use structures and arrays to mimic this functionality. Here is an example:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char **items;
    int size;
} Tuple;

Tuple stringListToTuple(char **list, int size) {
    Tuple tuple;
    tuple.items = malloc(sizeof(char*) * size);
    tuple.size = size;
    for(int i = 0; i < size; i++) {
        tuple.items[i] = malloc(sizeof(char) * (strlen(list[i]) + 1));
        strcpy(tuple.items[i], list[i]);
    }
    return tuple;
}

void freeTuple(Tuple tuple) {
    for(int i = 0; i < tuple.size; i++) {
        free(tuple.items[i]);
    }
    free(tuple.items);
}

int main() {
    char *list[] = {"Hello", "World", "This", "Is", "C"};
    int size = sizeof(list) / sizeof(list[0]);

    Tuple tuple = stringListToTuple(list, size);

    for(int i = 0; i < tuple.size; i++) {
        printf("%s ", tuple.items[i]);
    }

    freeTuple(tuple);

    return 0;
}
```

This code creates a `Tuple` structure that contains an array of strings (`char**`) and the size of the array. The `stringListToTuple` function takes a list of strings and its size, allocates memory for the `Tuple` structure, and copies the strings from the list to the `Tuple`. The `freeTuple` function is used to free the memory allocated for the `Tuple`. In the `main` function, a list of strings is converted to a `Tuple`, printed, and then the memory is freed.