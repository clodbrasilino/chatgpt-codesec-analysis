word,frequency
,321857
collected_code_3/problem-771-1.c:,3
In,213
function,291
'createStack':,13
collected_code_3/problem-771-1.c:12:21:,1
warning:,378
dereference,236
of,498
possibly-NULL,197
'stack',10
[CWE-690],197
[-Wanalyzer-possible-null-dereference],192
12,105
|,28119
stack->capacity,6
=,1796
capacity;,6
~~~~~~~~~~~~~~~~^~~~~~~~~~,9
'areParenthesisBalanced':,28
events,799
1-2,169
55,35
int,373
areParenthesisBalanced(char,11
exp[]),11
{,1061
^~~~~~~~~~~~~~~~~~~~~~,20
(1),417
entry,425
to,617
'areParenthesisBalanced',52
56,36
i,432
0;,320
57,29
struct,68
Stack*,40
stack,44
createStack(100);,7
~~~~~~~~~~~~~~~~,24
(2),301
calling,284
'createStack',31
from,654
+-->,284
3-5,37
10,213
createStack(int,4
capacity),21
^~~~~~~~~~~,31
(3),259
11,233
(struct,54
Stack*)malloc(sizeof(struct,2
Stack));,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~,16
(4),278
this,205
call,197
could,400
return,316
NULL,363
~~~~~~~~~~~~~~~~~~~~~~~~~~,37
(5),202
be,209
NULL:,192
unchecked,192
value,254
'push':,48
collected_code_3/problem-771-1.c:29:31:,1
'*stack.data,3
+,304
(sizetype)*stack.top',7
29,59
stack->data[++stack->top],6
item;,10
~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~,1
3-4,24
|......,422
14,56
stack->data,2
(char*)malloc(stack->capacity,2
*,362
sizeof(char));,41
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,24
<------+,158
5-8,2
^~~~~~~~~~~~~~~~,14
returning,156
58,16
while,58
(exp[i]),11
~~~,53
(6),196
following,939
'true',669
branch...,327
59,16
if,194
(exp[i],13
==,172
'{',5
||,30
exp[i],14
'(',5
'['),5
~,411
(7),153
...to,939
here,1041
60,25
"push(stack,",12
exp[i]);,12
~~~~~~~~~~~~~~~~~~~,22
(8),136
'push',36
9-12,2
26,80
void,76
push(struct,9
"stack,",8
char,142
item),8
^~~~,192
(9),119
27,70
(isFull(stack)),6
(10),110
'false',274
28,51
return;,6
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
(11),98
(12),97
collected_code_3/problem-771-1.c:73:16:,2
leak,31
[CWE-401],31
[-Wanalyzer-malloc-leak],31
73,13
^,121
'main':,363
76,3
main(),129
'main',470
77,2
exp[100],2
"""{()}[]"";",2
78,2
(areParenthesisBalanced(exp)),7
~~~~~~~~~~~~~~~~~~~~~~~~~~~,29
5-7,11
allocated,62
assuming,22
is,308
non-NULL,22
8-13,2
(13),87
14-16,1
(14),82
(15),73
~~~~~~~~~~~,45
(16),71
17-26,2
(20),52
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,15
(23),44
(24),39
(21),49
(22),46
^~~~~~~~~~~~~~~~~~~,10
(25),42
(17),59
(26),35
61,16
'}',2
')',3
']'),2
(18),58
68,8
i++;,4
(19),57
27-29,5
(27),30
(28),29
(29),28
30-33,2
(30),27
70,4
(isEmpty(stack)),4
(31),27
(32),22
(33),21
leaks,31
here;,31
was,31
at,39
'<unknown>',37
5-6,13
7-12,3
13-16,5
collected_code_3/problem-367-1.c:,1
'newNode':,37
collected_code_3/problem-367-1.c:12:16:,1
'node',28
node->data,20
data;,104
~~~~~~~~~~~^~~~~~,17
44,37
45,33
Node,22
*root,3
newNode(1);,5
~~~~~~~~~~,21
'newNode',146
Node*,332
newNode(int,8
data),102
^~~~~~~,19
node,16
Node*)malloc(sizeof(struct,31
Node));,50
~~~~~~~~~~~~~~~~~,56
collected_code_3/problem-415-1.c:,1
'maxProductPair':,1
collected_code_3/problem-415-1.c:20:27:,1
implicit,73
declaration,137
'abs',5
[-Wimplicit-function-declaration],41
20,64
(arr[i],5
<,539
0,13
&&,35
abs(arr[i]),1
>,30
abs(nega)),1
^~~,19
collected_code_3/problem-415-1.c:3:1:,1
note:,96
include,63
'<stdlib.h>',43
or,70
provide,69
a,78
2,32
#include,27
<limits.h>,3
+++,28
|+#include,28
<stdlib.h>,23
3,20
collected_code_3/problem-553-1.c:,1
collected_code_3/problem-553-1.c:18:11:,3
'strlen',9
18,51
tuple[strlen(tuple),2
-,42
2],2
'\0';,24
^~~~~~,73
collected_code_3/problem-553-1.c:3:1:,1
'<string.h>',10
<string.h>,10
incompatible,31
built-in,31
[-Wbuiltin-declaration-mismatch],31
collected_code_3/problem-553-1.c:16:25:,4
stack-based,2
buffer,20
over-read,5
[CWE-126],5
[-Wanalyzer-out-of-bounds],7
16,80
tuple[i],4
tuple[i,4
1];,16
~~~~~^~~~~~~,3
1-16,3
tuple[],2
"""(3.14)"";",2
^~~~~,7
capacity:,20
7,44
bytes,20
15,134
for(int,82
tuple[i];,8
i++){,2
~~~~~,64
~~~~~~~~~~~~,30
out-of-bounds,7
read,10
byte,27
but,10
'tuple',9
ends,7
1,52
after,5
the,28
end,11
valid,2
subscripts,2
for,150
are,12
'[0]',2
'[6]',1
use,76
uninitialized,62
'tuple[<unknown>]',2
[CWE-457],31
[-Wanalyzer-use-of-uninitialized-value],31
region,41
created,31
on,31
collected_code_3/problem-328-1.c:,1
collected_code_3/problem-328-1.c:39:20:,1
'new_node',37
39,20
new_node->data,33
new_data;,33
~~~~~~~~~~~~~~~^~~~~~~~~~,9
37,34
new_node,24
Node*),19
malloc(sizeof(struct,21
^~~~~~~~~~~~~~~~~~~~~~~~~~~,28
38,32
~~~~~~~~~~~~~~~~~~~~~~~~~,48
collected_code_3/problem-572-1.c:,1
collected_code_3/problem-572-1.c:57:16:,1
'head',51
[CWE-476],23
[-Wanalyzer-null-dereference],22
head->next,45
createNode(2);,78
~~~~~~~~~~~^~~~~~~~~~~~~~~,3
head,50
createNode(1);,57
~~~~~~~~~~~~~,103
'createNode',302
'createNode':,151
9,195
createNode(int,94
^~~~~~~~~~,117
newNode,110
(Node*)malloc(sizeof(Node));,116
(!newNode),42
branch,612
(when,612
NULL)...,51
"printf(""Memory",37
"error\n"");",37
~~~~~~~~~~~~~~~~~~~~~~~~,60
event,112
6,39
13,91
NULL;,79
'0',70
7-8,5
^~~~~~~~~~~~~,86
9-11,3
~~~~~~~~~~~~~^~~~~~~~~~~~~,4
head->next->next,38
collected_code_3/problem-572-1.c:58:22:,1
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,4
non-NULL)...,133
newNode->data,79
~~~~~~~~~~~~~~~~~~~~,105
6-7,21
8-10,16
12-14,3
15-17,5
19-21,3
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,4
'*head.next',3
collected_code_3/problem-572-1.c:59:28:,1
head->next->next->next,29
createNode(3);,33
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,3
11-12,14
13-15,12
17-19,3
20-22,4
23,80
24-26,5
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,3
'*head_18->next.next',2
collected_code_3/problem-572-1.c:60:34:,1
head->next->next->next->next,23
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,3
16-17,14
18-20,9
21,48
22-24,4
~~~~~~~~~~~~~~~~~~~~~~,30
25-27,5
29-31,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,3
'*_7->next.next',3
collected_code_3/problem-572-1.c:61:40:,1
head->next->next->next->next->next,14
createNode(4);,10
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,2
21-22,5
23-25,4
30-32,5
33,55
34-36,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,2
(34),19
(35),16
(36),16
'*_12->next.next',2
collected_code_3/problem-869-1.c:,1
collected_code_3/problem-869-1.c:11:16:,1
'temp',16
temp->data,11
temp,9
^~~~~~~~~~~~~~~~~~~~,23
collected_code_3/problem-750-1.c:,1
'addTupleToList':,2
collected_code_3/problem-750-1.c:16:19:,1
tuple;,4
~~~~~~~~~~~~~~^~~~~~~,1
~~~~~~~~~~~~~~~~~~~~~,17
collected_code_3/problem-493-1.c:,1
'calculate_hexagon_grid':,1
collected_code_3/problem-493-1.c:22:32:,2
error:,17
'M_PI',1
undeclared,15
(first,8
in,31
function),8
22,36
double,1
angle_rad,1
M_PI,1
/,11
180,1
angle_deg;,1
each,14
identifier,7
reported,7
only,7
once,7
it,10
appears,7
collected_code_3/problem-493-1.c:23:66:,3
'cos',4
grid[i].points[j].x,2
col_width,2
hexagon_size,3
cos(angle_rad);,2
collected_code_3/problem-493-1.c:3:1:,1
'<math.h>',6
<math.h>,2
collected_code_3/problem-493-1.c:24:67:,4
'sin',4
24,69
grid[i].points[j].y,1
row_height,1
sin(angle_rad);,1
collected_code_3/problem-310-1.c:,1
'string_to_tuple':,9
collected_code_3/problem-310-1.c:16:18:,1
tuple->first,2
malloc(strlen(token),2
1);,16
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~,1
Tuple*,19
tuple,6
malloc(sizeof(Tuple));,5
^~~~~~~~~~~~~~~~~~~~~,9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
collected_code_3/problem-898-1.c:,1
'extractElements':,2
collected_code_3/problem-898-1.c:7:19:,1
'result',45
result[i],10
arr[start,2
i];,2
~~~~~~~~~~^~~~~~~~~~~~~~~~,1
1-4,45
5,69
int*,11
result,37
(int*)malloc(sizeof(int),12
count);,4
count;,28
i++),234
~~~~~~~~~,37
'i,387
count')...,92
'result,17
(long,91
unsigned,96
int)i,48
4',38
collected_code_3/problem-712-1.c:,1
collected_code_3/problem-712-1.c:11:16:,1
collected_code_3/problem-418-1.c:,1
collected_code_3/problem-418-1.c:11:20:,1
collected_code_3/problem-958-1.c:,1
'intToRoman':,4
collected_code_3/problem-958-1.c:12:13:,4
'strcat',5
"strcat(roman,",4
symbol[i]);,4
collected_code_3/problem-958-1.c:3:1:,1
'roman',1
where,12
non-null,18
expected,14
[-Wanalyzer-possible-null-argument],5
^~~~~~~~~~~~~~~~~~~~~~~~,13
char*,61
roman,1
(char*)malloc(sizeof(char),24
16);,1
^~~~~~~~~~~~~~~~~~~~~~~~~,3
while(num,2
!=,153
0),30
~~~~~~~~,71
'num,1
0')...,13
|cc1:,7
(3):,1
4-6,2
>=,63
value[i]),1
~~~~^~~~~~~~~~~,1
num,7
-=,1
value[i];,1
argument,12
('roman'),1
<built-in>:,5
must,6
collected_code_3/problem-936-1.c:,1
'rearrange':,2
collected_code_3/problem-936-1.c:13:17:,1
temp[i],2
tuples[order[i]];,2
~~~~~~~~^~~~~~~~~~~~~~~~~~,1
(Tuple*)malloc(size,3
sizeof(Tuple));,15
^~~~~~~~~~~~~~~~~~~~~~~~~~~~,14
size;,61
size')...,86
'temp,1
8',40
collected_code_3/problem-277-1.c:,1
'filter_dict':,2
collected_code_3/problem-277-1.c:14:30:,1
'filtered_dict',1
filtered_dict[j],2
input_dict[i];,2
1-6,25
dict,1
*filtered_dict,1
malloc(length,1
sizeof(dict));,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
j,68
(int,172
length;,1
length')...,1
(input_dict[i].value,1
filter_value),1
'filtered_dict,1
int)j,21
16',20
collected_code_3/problem-661-1.c:,1
'maxSumWithoutThreeConsec':,1
collected_code_3/problem-661-1.c:20:12:,2
'i',1
dp[i],5
((dp[i]),1
(dp[i-3],2
arr[i-1],2
arr[i])),1
?,6
(dp[i]),1
:,6
arr[i]);,2
collected_code_3/problem-457-1.c:,1
collected_code_3/problem-457-1.c:11:20:,1
collected_code_3/problem-604-1.c:,2
'reverseWords':,1
collected_code_3/problem-604-1.c:11:13:,2
'reverse',2
"reverse(word_begin,",2
temp-1);,2
At,1
top,1
level:,1
collected_code_3/problem-604-1.c:21:6:,1
conflicting,2
types,2
'reverse';,1
have,2
'void(char,2
"*,",4
*)',2
reverse(char,1
"*begin,",1
*end),1
previous,2
with,3
type,5
collected_code_3/problem-118-1.c:,1
'stringToList':,4
collected_code_3/problem-118-1.c:16:23:,1
*str++;,4
~~~~~~~~~~~~~~^~~~~~~~,2
(*str),2
collected_code_3/problem-206-1.c:,2
'concatenateAdjacent':,2
collected_code_3/problem-206-1.c:8:19:,1
8,66
(strlen(tuples[i]),2
strlen(tuples[i+1]),2
1));,16
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
char**,7
(char**)malloc(sizeof(char*),4
(size,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
size,8
1;,76
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-206-1.c:19:19:,1
'tuples',6
19,81
tuples[i],4
10);,7
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
17,67
tuples,3
size);,40
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,10
'tuples,6
collected_code_3/problem-610-1.c:,1
collected_code_3/problem-610-1.c:27:21:,1
collected_code_3/problem-361-1.c:,2
collected_code_3/problem-361-1.c:16:19:,1
~~~~~~~~~~~~~~^~~~~~,9
'createList':,5
collected_code_3/problem-361-1.c:23:19:,1
'newList',4
newList->head,5
node;,2
List*,5
newList,3
(List*)malloc(sizeof(List));,3
collected_code_3/problem-157-1.c:,1
'runLengthEncoding':,3
collected_code_3/problem-157-1.c:14:25:,1
result[j++],6
str[i,5
~~~~~~~~~~~~^~~~~~~~~~~~,2
(2,2
len,8
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
(i,18
<=,49
len;,28
len')...,62
(str[i],12
1],7
len),1
(sizetype)j',16
collected_code_3/problem-157-1.c:20:15:,1
result[j],4
~~~~~~~~~~^~~~~~,3
25,45
str[],12
"""aaabbbccc"";",1
encodedStr,1
runLengthEncoding(str);,1
'runLengthEncoding',2
runLengthEncoding(char*,1
str),24
^~~~~~~~~~~~~~~~~,18
strlen(str);,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
collected_code_3/problem-966-1.c:,2
'removeEmptyTuples':,2
collected_code_3/problem-966-1.c:19:33:,1
'*_6,2
_9',2
list->tuples[j],2
list->tuples[j,2
~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~,1
1-25,1
30,46
list.tuples,2
(Tuple*)malloc(list.size,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
heap,25
31,51
32,58
list.size;,3
%,6
34,50
list.tuples[i].size,6
43,23
removeEmptyTuples(&list);,1
'removeEmptyTuples',2
26-37,1
removeEmptyTuples(TupleList,1
*list),1
"i,",8
j;,14
list->size;,1
~~~~~~~~~~~~~~,39
(list->tuples[i].size,1
(j,6
i;,7
list->size,1
j++),25
~~~~~~~~~~~~~~~~~~,12
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,14
(37),12
collected_code_3/problem-966-1.c:34:33:,1
'list.tuples',1
~~~~~~~~~~~~~~~~~~~~^~~,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
~~~~~~~~~~~~~~~~~~~~~~~,19
'list.tuples,1
collected_code_3/problem-966-1.c:39:36:,1
'*_24,2
_26.data',2
list.tuples[i].data[0],2
~~~~~~~~~~~~~~~~~~~~~~~^~~,1
1-10,7
~~^~~~~~~~~~~,2
list.tuples[i].data,1
(int*)malloc(sizeof(int));,2
collected_code_3/problem-893-1.c:,1
collected_code_3/problem-893-1.c:9:44:,3
'malloc',52
collected_code_3/problem-893-1.c:2:1:,1
<stdio.h>,14
collected_code_3/problem-893-1.c:10:21:,1
collected_code_3/problem-36-1.c:,1
'findNthDigit':,3
collected_code_3/problem-36-1.c:9:12:,2
'digit',4
digit;,6
1-5,9
4,32
n;,35
n')...,30
"printf(""The",2
%dth,2
digit,1
proper,1
fraction,1
%d/%d,1
is:,1
"%d\n"",",7
"n,",12
"numerator,",2
"denominator,",3
"findNthDigit(numerator,",1
n));,6
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'findNthDigit',2
3-8,7
findNthDigit(int,1
n),16
^~~~~~~~~~~~,7
collected_code_3/problem-469-1.c:,1
'maxProfit':,7
collected_code_3/problem-469-1.c:21:15:,1
'dp',3
*)malloc((n,4
1),41
sizeof(int));,40
~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
1-8,7
(k,14
n,21
2),9
**dp,6
**)malloc((k,6
sizeof(int,17
*));,40
k;,16
~~~~~~,51
k')...,22
'dp,1
collected_code_3/problem-469-1.c:25:18:,1
'*dp_104,4
_32',2
dp[i][0],3
~~~~~~~~~^~~,2
1-12,13
~~~~~~~,37
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
collected_code_3/problem-469-1.c:29:11:,2
'*dp',2
dp[0][j],5
~~^~~,4
'j,19
collected_code_3/problem-469-1.c:40:14:,1
_77',2
40,25
dp[k][n,4
1-14,2
collected_code_3/problem-469-1.c:40:17:,1
'*_79,2
_82',2
47,16
"printf(""Maximum",1
profit,1
"%d"",",1
"maxProfit(k,",1
prices));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
'maxProfit',2
3-31,1
maxProfit(int,1
"k,",1
prices[]),1
^~~~~~~~~,17
maxDiff,1
-prices[0];,1
35,46
dp[i][j],3
dp[i][j,3
(prices[j],2
maxDiff),1
maxDiff);,1
collected_code_3/problem-696-1.c:,2
collected_code_3/problem-696-1.c:11:16:,1
'zipLists':,7
collected_code_3/problem-696-1.c:31:16:,1
head->next;,2
~~~~^~~~~~,1
42,13
51,16
"zipLists(list1,",1
list2);,1
'zipLists',4
zipLists(Node*,1
"list1,",1
list2),1
^~~~~~~~,18
newNode(0);,2
9-14,4
(list1,7
list2,4
NULL),112
'list1',6
current->next,9
list1;,3
(list2,3
'list2',3
list2;,3
15-20,4
21-26,1
collected_code_3/problem-115-1.c:,1
collected_code_3/problem-115-1.c:25:17:,1
'dict1',2
dict1->keys,2
Dictionary,26
*dict1,2
Dictionary));,2
collected_code_3/problem-115-1.c:30:17:,1
'dict2',2
dict2->keys,2
*dict2,1
collected_code_3/problem-265-1.c:,1
collected_code_3/problem-265-1.c:11:16:,1
collected_code_3/problem-390-1.c:,1
'insertAtBeginning':,2
collected_code_3/problem-390-1.c:15:39:,1
'oldStr',1
newStrLen,2
strlen(str),4
strlen(oldStr),2
^~~~~~~~~~~~~~,16
1-3,7
list.items[0],1
"strdup(""item1"");",1
~~~~~~~~~~~~~~~,17
"insertAtBeginning(&list,",1
"""prefix_"");",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
'insertAtBeginning',2
4-7,1
insertAtBeginning(List*,1
"list,",3
const,3
list->count;,1
oldStr,1
list->items[i];,1
('oldStr'),1
file,3
included,3
collected_code_3/problem-390-1.c:3:,1
/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/string.h:82:10:,1
82,3
size_t,1
strlen(const,1
*__s);,1
collected_code_3/problem-721-1.c:,1
'findMaxAverage':,1
collected_code_3/problem-721-1.c:18:24:,1
'max',5
max(dp[i,1
"1][j],",1
1]),5
matrix[i][j];,1
ld:,3
Undefined,3
symbols:,3
"_max,",1
referenced,3
from:,3
_findMaxAverage,1
ccJZyQ7e.o,1
collect2:,3
ld,3
returned,3
exit,3
status,3
collected_code_3/problem-536-1.c:,1
collected_code_3/problem-536-1.c:25:26:,3
collected_code_3/problem-536-1.c:2:1:,1
collected_code_3/problem-536-1.c:44:5:,4
'free',22
free(head);,1
collected_code_3/problem-536-1.c:29:16:,1
head->data,2
~~~~~~~~~~~^~~,4
collected_code_3/problem-536-1.c:32:18:,1
'second',2
second->data,2
2;,23
~~~~~~~~~~~~~^~~,4
second,1
collected_code_3/problem-536-1.c:35:17:,1
'third',2
third->data,2
3;,14
~~~~~~~~~~~~^~~,2
third,1
collected_code_3/problem-700-1.c:,1
collected_code_3/problem-700-1.c:20:39:,3
collected_code_3/problem-700-1.c:2:1:,1
collected_code_3/problem-700-1.c:21:16:,1
collected_code_3/problem-585-1.c:,2
'createHeap':,9
collected_code_3/problem-585-1.c:12:14:,1
'h',4
h->count,2
Heap,6
*h,4
createHeap(k);,3
'createHeap',15
*createHeap(int,2
(Heap,1
*),7
malloc(sizeof(Heap));,3
'insert':,11
collected_code_3/problem-585-1.c:43:28:,1
'*h.arr,2
int)*h.count,2
h->arr[h->count++],2
value;,8
~~~~~~~~~~~~~~~~~~~^~~~~~~,1
h->arr,1
malloc(sizeof(int),13
h->capacity);,1
62,8
63,12
64,15
"insert(h,",1
prices[i]);,1
'insert',4
41,15
insert(Heap,1
"*h,",1
value),11
(h->count,1
h->capacity),1
collected_code_3/problem-120-1.c:,1
'maxProduct':,1
collected_code_3/problem-120-1.c:13:19:,1
max_val,1
"max(max(arr[i],",1
"end_max),",2
end_min);,2
collected_code_3/problem-120-1.c:14:19:,1
'min',2
min_val,1
"min(min(arr[i],",1
collected_code_3/problem-843-1.c:,1
'nthSuperUglyNumber':,4
collected_code_3/problem-843-1.c:37:17:,1
'heap',5
heap[i],4
(HeapNode*)malloc(sizeof(HeapNode));,4
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
"printf(""%d\n"",",7
"nthSuperUglyNumber(n,",3
"primes,",6
primesSize));,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
'nthSuperUglyNumber',6
3-7,7
nthSuperUglyNumber(int,3
primesSize),3
^~~~~~~~~~~~~~~~~~,8
ugly,2
n);,15
HeapNode**,2
(HeapNode**)malloc(sizeof(HeapNode*),2
primesSize);,2
36,22
primesSize;,3
primesSize')...,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
'heap,1
collected_code_3/problem-843-1.c:38:22:,1
'*heap_67,2
_13',2
heap[i]->val,2
primes[i];,2
~~~~~~~~~~~~~^~~~~~~~~~~,1
collected_code_3/problem-843-1.c:43:13:,1
'ugly',2
ugly[0],2
~~~~~~~~^~~,12
3-15,8
collected_code_3/problem-591-1.c:,1
collected_code_3/problem-591-1.c:27:43:,3
collected_code_3/problem-591-1.c:2:1:,1
collected_code_3/problem-591-1.c:28:20:,1
collected_code_3/problem-522-1.c:,1
'longestBitonic':,3
collected_code_3/problem-522-1.c:9:12:,1
'inc',4
inc[0],8
~~~~~~~^~~,4
inc,2
^~~~~~~~~~~~~~~~~~~~~~~,15
collected_code_3/problem-522-1.c:20:23:,1
'dec',4
max,6
dec[0],4
~~~^~~,2
"printf(""Length",2
length,2
Bitonic,2
Subsequence,1
"longestBitonic(arr,",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'longestBitonic',2
3-13,3
longestBitonic(int,1
"arr[],",4
dec,1
inc[i],2
arr[i,4
inc[i,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
i--),4
dec[i],2
dec[i,2
collected_code_3/problem-464-1.c:,1
collected_code_3/problem-464-1.c:12:15:,1
node->key,2
key;,10
~~~~~~~~~~^~~~~,3
collected_code_3/problem-691-1.c:,1
'groupBySecond':,3
collected_code_3/problem-691-1.c:29:36:,1
'groups',1
groups[*groupSize].key,3
tuples[i].second;,3
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~,1
Group*,1
groups,1
(Group*)malloc(size,1
sizeof(Group));,1
found,2
*groupSize;,2
(!found),2
'found,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
'groups,1
int)*groupSize,1
24',1
collected_code_3/problem-691-1.c:31:42:,1
'*groups_68,2
_49.values',2
groups[*groupSize].values[0],2
tuples[i].first;,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~,1
~~^~~~~~,12
groups[*groupSize].values,1
(int*)malloc(size,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
collected_code_3/problem-833-1.c:,2
'getKeys':,2
collected_code_3/problem-833-1.c:17:17:,1
'keys',1
keys[i],2
dict->pairs[i].key;,2
~~~~~~~~^~~~~~~~~~~~~~~~~~~~,1
keys,1
malloc(sizeof(char*),4
dict->size);,1
dict->size;,1
'keys,1
collected_code_3/problem-833-1.c:26:23:,1
'dict.pairs',6
dict.pairs[0].key,6
"""key1"";",6
~~~~~~~~~~~~~~~~~~^~~~~~~~,3
dict.pairs,3
malloc(sizeof(KeyValuePair),3
dict.size);,3
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
collected_code_3/problem-528-1.c:,2
'findMinLengthLists':,2
collected_code_3/problem-528-1.c:21:43:,1
'minLengthLists',1
minLengthLists[*minListCount],2
lists[i];,4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
List,4
**minLengthLists,1
malloc(sizeof(List*),4
numLists);,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
*minListCount,1
numLists;,4
numLists')...,4
if(lists[i]->length,2
minLength),1
'minLengthLists,1
int)*minListCount,1
collected_code_3/problem-528-1.c:34:18:,1
'lists',2
lists[i],8
malloc(sizeof(List));,8
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~,2
**lists,2
'lists,2
collected_code_3/problem-528-1.c:35:26:,1
'*lists_75,2
_8',6
lists[i]->length,6
~~~~~~~~~~~~~~~~~^~~~~~~,3
~~^~~~~~~~~~,3
collected_code_3/problem-528-1.c:38:35:,1
'**_26.elements,2
lists[i]->elements[j],4
~~~~~~~~~~~~~~~~~~~~~~^~~,3
lists[i]->elements,2
lists[i]->length);,1
lists[i]->length;,1
collected_code_3/problem-31-1.c:,2
'createMinHeap':,6
collected_code_3/problem-31-1.c:17:19:,1
'minHeap',2
minHeap->size,2
~~~~~~~~~~~~~~^~~,3
81,2
85,2
"topKFrequent(nums,",2
"numsSize,",6
k);,5
'topKFrequent',8
'topKFrequent':,3
69,9
topKFrequent(int*,2
"nums,",2
k),6
71,3
MinHeap*,13
minHeap,4
createMinHeap(k);,3
'createMinHeap',10
createMinHeap(int,4
(MinHeap*),3
malloc(sizeof(MinHeap));,3
collected_code_3/problem-31-1.c:55:41:,1
'*minHeap.arr,2
int)*minHeap.size,2
minHeap->arr[minHeap->size].key,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~,1
minHeap->arr,1
(heapNode*),1
malloc(minHeap->capacity,1
sizeof(heapNode));,1
7-14,1
72,3
numsSize;,3
j),2
numsSize')...,3
++j),1
74,2
(nums[j],1
nums[i]),1
75,1
break;,1
"insert(minHeap,",1
"nums[i],",1
i);,1
15-18,1
insert(MinHeap*,1
"minHeap,",1
"key,",8
freq),1
48,25
(minHeap->size,1
minHeap->capacity),1
collected_code_3/problem-400-1.c:,1
'extractFrequency':,5
collected_code_3/problem-400-1.c:29:42:,1
'tupleArray',1
tupleArray[tupleCount].count,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~,2
extractFrequency(char,1
"tuples[][MAX_SIZE],",1
size),28
'extractFrequency',3
Tuple,17
*tupleArray,1
(Tuple,2
*)malloc(sizeof(Tuple),1
index,4
"findTuple(tupleArray,",2
"tupleCount,",3
tuples[i]);,3
'findTuple',3
'findTuple':,1
6-8,2
findTuple(Tuple,1
"*tuples,",1
*tuple),1
tupleCount;,4
tupleCount')...,4
-1;,2
9-10,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(index,2
-1),2
'index,2
-1')...,3
"strcpy(tupleArray[tupleCount].tuple,",1
'tupleArray,1
int)tupleCount,1
104',1
collected_code_3/problem-827-1.c:,1
collected_code_3/problem-827-1.c:14:28:,3
**matrix,4
**)malloc(rows,7
collected_code_3/problem-827-1.c:2:1:,1
collected_code_3/problem-827-1.c:28:9:,4
free(matrix[i]);,1
collected_code_3/problem-827-1.c:30:5:,2
free(matrix);,1
collected_code_3/problem-827-1.c:16:19:,1
'matrix',2
matrix[i],8
*)malloc(cols,16
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
rows;,11
rows')...,40
'matrix,2
collected_code_3/problem-827-1.c:19:18:,1
'*matrix',2
matrix[0][0],4
matrix[0][1],4
matrix[0][2],4
collected_code_3/problem-827-1.c:20:18:,1
'*matrix_42,4
matrix[1][0],3
4;,6
matrix[1][1],3
5;,15
matrix[1][2],3
6;,6
collected_code_3/problem-827-1.c:21:18:,1
matrix[2][0],2
7;,4
matrix[2][1],2
8;,4
matrix[2][2],2
9;,4
collected_code_3/problem-353-1.c:,1
collected_code_3/problem-353-1.c:16:18:,1
'array',2
array[i],6
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
**array,4
'array,2
collected_code_3/problem-353-1.c:22:25:,1
'*array_47,2
_10,4
array[i][j],4
++count;,2
~~~~~~~~~~~~^~~~~~~~~,1
count,21
cols;,1
cols')...,2
collected_code_3/problem-679-1.c:,1
collected_code_3/problem-679-1.c:26:23:,1
collected_code_3/problem-215-1.c:,1
'decode':,4
collected_code_3/problem-215-1.c:13:29:,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
str[i],3
'9'),2
'0';,1
(count--),1
collected_code_3/problem-215-1.c:17:25:,1
str[i];,25
~~~~~~~~~~~~^~~~~~~~,1
collected_code_3/problem-215-1.c:20:15:,1
"""2a3b4c"";",1
decoded_str,1
decode(str);,1
'decode',2
decode(char*,1
collected_code_3/problem-902-1.c:,2
'create_table':,5
collected_code_3/problem-902-1.c:19:20:,1
'table',2
table->entries,3
malloc(sizeof(Entry*),3
HASH_SIZE);,3
~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
HashTable,1
*table,1
malloc(sizeof(HashTable));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-902-1.c:21:27:,1
'*table.entries,2
table->entries[i],3
2-3,2
i=0;,4
i<HASH_SIZE;,1
99')...,1
collected_code_3/problem-902-1.c:37:20:,1
'entry',6
entry->key,4
strdup(key);,15
~~~~~~~~~~~^~~~~~~~~~~~~,2
(entry,2
malloc(sizeof(Entry));,2
collected_code_3/problem-902-1.c:50:20:,1
50,19
(2):,1
3-6,12
"(strcmp(entry->key,",1
key),8
strings,10
non-equal)...,7
entry->next;,1
},14
49,16
collected_code_3/problem-769-1.c:,1
collected_code_3/problem-769-1.c:11:21:,1
collected_code_3/problem-582-1.c:,1
collected_code_3/problem-582-1.c:21:17:,1
'dict',3
dict->items,2
malloc(10,2
sizeof(Item));,2
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*dict,18
malloc(sizeof(Dictionary));,1
^~~~~~~~~~~~~~~~~~~~~~~~~~,13
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
collected_code_3/problem-127-1.c:,1
'multiply':,1
collected_code_3/problem-127-1.c:5:24:,1
abs(b);,1
collected_code_3/problem-127-1.c:2:1:,1
collected_code_3/problem-795-1.c:,2
collected_code_3/problem-795-1.c:12:16:,1
h->heapArr,3
(int*),11
capacity);,3
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
84,2
88,2
"findNCheapItems(arr,",2
'findNCheapItems',8
'findNCheapItems':,3
findNCheapItems(int*,2
"arr,",3
^~~~~~~~~~~~~~~,16
Heap*,18
h,5
createHeap(n);,3
createHeap(int,4
(Heap*),2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
'insertHeap':,4
collected_code_3/problem-795-1.c:22:27:,1
'*h.heapArr,2
int)*h.last,2
h->heapArr[++h->last],2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,10
7-10,7
65,17
66,6
"insertHeap(h,",1
'insertHeap',4
11-14,7
insertHeap(Heap*,2
"h,",1
if(h->last,1
h->capacity,1
collected_code_3/problem-937-1.c:,1
'getMaxOccuringChar':,6
collected_code_3/problem-937-1.c:20:12:,2
result;,26
"""sample",3
"string"";",3
"printf(""Max",2
occurring,2
character,3
"'%c'."",",2
getMaxOccuringChar(str));,2
'getMaxOccuringChar',4
getMaxOccuringChar(char*,2
collected_code_3/problem-510-1.c:,1
'countSubsequences':,1
collected_code_3/problem-510-1.c:5:5:,3
'memset',8
"memset(dp,",2
"0,",7
sizeof(dp));,2
collected_code_3/problem-510-1.c:2:1:,1
collected_code_3/problem-73-1.c:,1
'split_string_by_regex':,5
collected_code_3/problem-73-1.c:23:12:,1
(result,4
"(regcomp(&regex_comp,",4
"regex_pattern,",4
REG_EXTENDED)),4
*cursor,4
str;,4
"(!regexec(&regex_comp,",4
"cursor,",4
"2,",4
"group_array,",4
0)),4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
start,3
group_array[0].rm_so;,3
group_array[0].rm_eo;,2
*token,2
strndup(cursor,2
"start,",2
start);,2
"realloc(result,",9
sizeof(char*),6
when,24
'realloc',24
"succeeds,",13
moving,13
without,7
result[count-1],3
token;,3
collected_code_3/problem-73-1.c:30:11:,1
result[count],17
tokens,3
"split_string_by_regex(str,",3
regex_pattern);,3
'split_string_by_regex',6
3-19,2
**split_string_by_regex(char,3
"*str,",3
*regex_pattern),3
regfree(&regex_comp);,3
(count,5
collected_code_3/problem-73-1.c:30:19:,1
3-12,2
**result,12
fails,11
collected_code_3/problem-73-1.c:31:12:,1
collected_code_3/problem-674-1.c:,1
'removeDuplicateWords':,9
collected_code_3/problem-674-1.c:39:1:,1
'words[0]',5
"""Hello",2
world,4
"Hello"";",2
removeDuplicateWords(str);,2
'removeDuplicateWords',6
removeDuplicateWords(char*,2
while(word,2
'word',4
"if(!isWordExist(word,",2
"words,",2
count)),2
'isWordExist',3
'isWordExist':,1
7-9,2
isWordExist(char*,1
"word,",1
"words[],",1
count),1
10-13,1
words[count],1
malloc(strlen(word),1
"strcpy(words[count++],",1
word);,1
~~^~~~~~~,2
"/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/string.h:194,",1
collected_code_3/problem-674-1.c:2:,1
collected_code_3/problem-674-1.c:31:25:,1
"strcpy(result,",2
words[0]);,2
~~~~~^~~,2
words[MAX_WORDS];,1
malloc(strlen(str),1
collected_code_3/problem-262-1.c:,1
collected_code_3/problem-262-1.c:33:19:,1
collected_code_3/problem-946-1.c:,1
'findMostCommonElements':,3
collected_code_3/problem-946-1.c:19:5:,2
"printf(""Most",4
common,4
element:,4
"%c,",4
count:,4
"result,",4
max);,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
"text"";",1
findMostCommonElements(str);,1
'findMostCommonElements',2
findMostCommonElements(char*,1
collected_code_3/problem-207-1.c:,1
'longestRepeatedSubSeq':,1
collected_code_3/problem-207-1.c:20:28:,1
"max(dp[i][j-1],",1
dp[i-1][j]);,1
collected_code_3/problem-757-1.c:,1
'strrev':,1
collected_code_3/problem-757-1.c:5:13:,3
"1,",2
collected_code_3/problem-757-1.c:1:1:,1
strrev(char*,1
"_main,",1
<initial-undefines>,1
collected_code_3/problem-743-1.c:,1
collected_code_3/problem-743-1.c:39:20:,1
collected_code_3/problem-480-1.c:,1
collected_code_3/problem-480-1.c:19:12:,2
collected_code_3/problem-412-1.c:,1
'removeOdd':,2
collected_code_3/problem-412-1.c:9:29:,1
result[count++],4
nums[i];,2
~~~~~~~~~~~~~~~~^~~~~~~~~,1
(int*)malloc(numsSize,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,20
if(nums[i],1
int)count,5
collected_code_3/problem-718-1.c:,2
'createAlternateList':,4
collected_code_3/problem-718-1.c:29:36:,1
'alternateCurrent',5
alternateCurrent->next,3
createNode(head->data);,5
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~,1
46,19
createNode(5);,5
27-28,3
52,27
printList(head);,12
'printList',18
'printList':,34
29-39,1
printList(Node*,5
head),14
(head),2
~~~~,18
(38),11
"printf(""%d",24
""",",26
head->data);,21
"printf(""\n"");",5
(39),11
40-41,4
(40),9
53,30
54,24
alternateList,1
createAlternateList(head);,1
(41),11
'createAlternateList',6
42-45,1
createAlternateList(Node*,1
(42),9
(head,2
(43),9
alternateHead,2
(44),8
(45),8
46-48,1
(46),8
(47),8
(48),8
(49),8
50-56,1
(50),7
alternateCurrent,2
alternateHead;,1
(51),6
'alternateHead',1
head->next),1
(52),6
head->next->next;,1
(53),6
(54),6
(55),6
(56),6
57-59,1
(57),6
(58),6
(59),6
(60),6
61-64,1
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~,1
(61),5
(62),5
(64),5
alternateCurrent->next;,1
(63),5
collected_code_3/problem-718-1.c:46:16:,1
collected_code_3/problem-718-1.c:47:22:,1
collected_code_3/problem-718-1.c:48:28:,1
'*head_13->next.next',1
collected_code_3/problem-718-1.c:49:34:,1
collected_code_3/problem-468-1.c:,1
'maxProductIS':,2
collected_code_3/problem-468-1.c:9:24:,1
'max_product',1
max_product[i],2
arr[i];,5
~~~~~~~~~~~~~~~^~~~~~~~,2
*max_product,1
malloc,2
(n,5
'max_product,1
collected_code_3/problem-23-1.c:,1
collected_code_3/problem-23-1.c:23:17:,1
'list',2
list[i],5
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**list,2
'list,2
collected_code_3/problem-23-1.c:26:16:,1
'*list',2
list[0][0],4
list[0][1],4
list[0][2],4
collected_code_3/problem-23-1.c:27:16:,1
'*list_43,4
list[1][0],3
list[1][1],3
list[1][2],3
collected_code_3/problem-23-1.c:28:16:,1
list[2][0],2
list[2][1],2
list[2][2],2
collected_code_3/problem-516-1.c:35:6:,1
'radixsort';,1
'void(int,1
int)',2
radixsort(int,1
"array[],",1
collected_code_3/problem-516-1.c:2:,1
/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/stdlib.h:348:10:,1
'radixsort',1
'int(const,1
"**,",1
"int,",1
348,1
radixsort(const,1
"**__base,",1
"__nel,",1
"*__table,",1
collected_code_3/problem-450-1.c:,2
'extractStrings':,12
collected_code_3/problem-450-1.c:10:27:,5
malloc((stringSize,12
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
malloc(listSize,4
sizeof(char,23
listSize;,8
listSize')...,32
if(strlen(list[i]),8
stringSize),14
heap-based,5
overflow,2
[CWE-122],2
"extractStrings(list,",7
"listSize,",13
stringSize);,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
'extractStrings',13
3-25,1
**extractStrings(char,6
"**list,",16
write,25
till,6
beyond,2
3-27,1
collected_code_3/problem-450-1.c:16:12:,3
"strcpy(result[count],",2
list[i]);,3
10-19,1
3-24,1
collected_code_3/problem-450-1.c:24:26:,1
~~~~~~^~~,1
3-17,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
collected_code_3/problem-75-1.c:,1
collected_code_3/problem-75-1.c:31:24:,1
tuples[i].size,3
~~~~~~~~~~~~~~~^~~,2
*tuples,3
malloc(sizeof(Tuple),6
tupleCount);,2
collected_code_3/problem-75-1.c:34:35:,1
'*tuples_43,2
_19.elements,2
tuples[i].elements[j],4
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~,1
~~^~~~~~~~~~~~,1
tuples[i].elements,4
tuples[i].size);,1
tuples[i].size;,1
collected_code_3/problem-578-1.c:,1
collected_code_3/problem-578-1.c:11:16:,1
list1,1
collected_code_3/problem-114-1.c:,1
'assignFrequency':,7
collected_code_3/problem-114-1.c:23:23:,2
tupleList->tuples,7
"realloc(tupleList->tuples,",7
(tupleList->size,7
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
"assignFrequency(&tupleList,",7
"""tuple1"",",5
5);,7
'assignFrequency',12
assignFrequency(TupleList*,5
"tupleList,",5
tupleList->size;,5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
tupleList->tuples[tupleList->size].key,3
malloc(strlen(key),3
"strcpy(tupleList->tuples[tupleList->size].key,",1
key);,1
"""tuple2"",",2
11-16,1
"if(strcmp(tupleList->tuples[i].key,",2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'tupleList.tuples',4
8-9,1
10-16,1
collected_code_3/problem-114-1.c:24:44:,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~,1
tupleList.tuples,1
4-10,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'*tupleList.tuples,1
int)*tupleList.size,1
collected_code_3/problem-322-1.c:,1
'find_min_positions':,3
collected_code_3/problem-322-1.c:5:9:,2
'*arr',2
min,8
arr[0];,4
*arr,2
(int*)malloc(n,3
"printf(""Enter",4
elements:,2
""");",4
"find_min_positions(arr,",2
'find_min_positions',4
find_min_positions(int,2
"*arr,",2
'arr',2
collected_code_3/problem-444-1.c:,2
'trimTuple':,3
collected_code_3/problem-444-1.c:15:24:,1
'trimmedTuple',2
trimmedTuple->size,3
tuple->size,4
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~,1
tuple->size),2
*trimmedTuple,2
(Tuple*),3
collected_code_3/problem-444-1.c:19:35:,1
'*trimmedTuple.elements,2
trimmedTuple->elements[i],2
tuple->elements[i];,4
~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~,1
trimmedTuple->elements,1
malloc(trimmedTuple->size,1
trimmedTuple->size;,1
collected_code_3/problem-444-1.c:33:27:,1
'tuple.elements',3
tuple.elements[i],2
~~~~~~~~~~~~~~~~~~^~~~~~~,1
tuple.elements,2
malloc(size,1
'tuple.elements,1
collected_code_3/problem-391-1.c:,1
collected_code_3/problem-391-1.c:13:18:,1
newNode->key,4
"convertListToDict(list1,",1
size1);,2
'convertListToDict',3
'convertListToDict':,1
convertListToDict(char,1
createNode(list[0]);,1
createNode(char,1
*key),1
*newNode,7
collected_code_3/problem-245-1.c:,1
'bitonic':,3
collected_code_3/problem-245-1.c:9:12:,1
*inc,2
collected_code_3/problem-245-1.c:20:23:,1
Subarray,1
"bitonic(arr,",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'bitonic',2
bitonic(int,1
*dec,1
collected_code_3/problem-653-1.c:,2
collected_code_3/problem-653-1.c:18:20:,1
newNode->value,8
~~~~~~~~~~~~~~~^~~~~~~,1
Map*,5
map,2
"createMap(""key1"",",2
"""value1"");",11
'createMap',5
'createMap':,3
createMap(char*,2
newMap->values,1
createNode(value);,19
createNode(char*,1
collected_code_3/problem-653-1.c:25:17:,1
'newMap',2
newMap->key,2
~~~~~~~~~~~~^~~~~,1
newMap,1
(Map*)malloc(sizeof(Map));,1
collected_code_3/problem-465-1.c:,1
'dropEmptyItems':,2
collected_code_3/problem-465-1.c:17:25:,1
'*dict_25(D),2
dict[j],2
dict[j,2
~~~~~~~~^~~~~~~~~~~~~,1
DictItem,1
dict[MAX_DICT_SIZE],1
"dropEmptyItems(dict,",1
&size);,1
'dropEmptyItems',2
4-15,1
dropEmptyItems(DictItem*,1
"dict,",1
*size),1
"(strcmp(dict[i].value,",1
""""")",1
*size,1
collected_code_3/problem-715-1.c:,2
collected_code_3/problem-715-1.c:24:23:,1
'tuple.data',2
tuple.data[i],2
atoi(token);,2
~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
tuple.data,3
*)malloc(tuple.size,3
2-4,2
token,4
'token',6
'tuple.data,2
collected_code_3/problem-715-1.c:37:9:,2
'*_1,2
_3',2
"printf(""%d"",",5
tuple.data[i]);,4
"""1,2,3,4,5"";",2
string_to_tuple(str);,4
'string_to_tuple',6
string_to_tuple(char,2
*str),22
"',')",2
tuple.size;,2
collected_code_3/problem-317-1.c:,2
'modifiedRLE':,24
collected_code_3/problem-317-1.c:35:30:,1
prev->next->next,2
curr->next;,6
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~,1
if(!newNode),51
26-27,1
28-30,1
32-33,1
35-36,1
while(head,24
37-38,1
39-40,2
41-42,1
43-44,1
45-46,1
47-48,1
modifiedRLE(head);,4
'modifiedRLE',22
49-51,1
modifiedRLE(Node*,4
if(head,5
prev,17
head;,8
52-60,1
while(curr,12
'curr',16
if(prev->data,10
curr->data),10
while(curr->next,7
curr->next->data,7
prev->data),7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
prev->next,18
createNode(count);,14
61-63,1
65-67,1
(65),4
(67),4
'*prev.next',1
(66),4
collected_code_3/problem-317-1.c:38:14:,2
curr,4
~~~~~^~~~~~~~~~~~,2
18-22,2
23-24,3
28-29,4
33-34,3
36-37,4
38-39,4
42-43,3
44-45,3
46-47,3
48-49,3
50-52,3
53-61,3
62-64,3
66-69,3
(68),3
curr;,3
(69),3
70-78,3
(70),3
(71),3
(72),3
(73),3
(74),3
(76),3
count++;,3
(75),3
(77),3
(78),3
79-81,3
(79),3
(80),3
(81),3
82-83,1
(82),3
(83),3
8-12,1
13-14,1
18-19,2
83-85,2
(85),2
(84),2
collected_code_3/problem-317-1.c:40:12:,1
'prev',6
23-27,1
collected_code_3/problem-317-1.c:53:16:,1
collected_code_3/problem-317-1.c:54:22:,1
collected_code_3/problem-317-1.c:55:28:,1
collected_code_3/problem-317-1.c:56:34:,1
collected_code_3/problem-317-1.c:57:40:,1
collected_code_3/problem-251-1.c:,1
collected_code_3/problem-251-1.c:11:16:,1
collected_code_3/problem-298-1.c:,1
collected_code_3/problem-298-1.c:11:21:,1
"push(&list1,",1
20);,1
Node**,4
"head_ref,",5
new_data),5
collected_code_3/problem-350-1.c:,3
'minimizeString':,6
collected_code_3/problem-350-1.c:9:24:,3
res,8
(len,4
collected_code_3/problem-350-1.c:3:1:,1
collected_code_3/problem-350-1.c:34:5:,4
free(res);,1
collected_code_3/problem-350-1.c:23:22:,1
'res',3
res[j++],2
~~~~~~~~~^~~~~~~~,8
2-8,1
MAX_CHAR;,2
255')...,2
(count[i],2
count[i],2
min_index),1
'res,2
collected_code_3/problem-350-1.c:25:12:,1
res[j],2
~~~~~~~^~~~~~,3
"""example",1
minimizeString(str);,1
'minimizeString',2
minimizeString(char*,1
collected_code_3/problem-957-1.c:,1
'getRightmostSetBit':,1
collected_code_3/problem-957-1.c:4:12:,3
'log2',4
log2(n,2
&,2
-n),2
collected_code_3/problem-957-1.c:2:1:,1
collected_code_3/problem-570-1.c:,2
'removeWords':,21
collected_code_3/problem-570-1.c:10:25:,1
'newWords',9
newWords[j],5
(char,37
*)malloc((strlen(words[i]),5
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**newWords,22
**)malloc(count,6
for(i,59
"if(strstr(words[i],",12
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'newWords,2
collected_code_3/problem-570-1.c:16:12:,4
newWords;,9
"strcpy(newWords[j],",2
words[i]);,2
words[i],12
*)malloc(20,12
"strcpy(words[0],",10
"""abcd"");",10
"removeWords(words,",17
"count,",27
str);,17
'removeWords',29
15-22,2
**removeWords(char,10
"**words,",10
newWords,10
"**)realloc(newWords,",10
24-25,3
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
15-25,1
collected_code_3/problem-570-1.c:24:18:,1
'words',1
**words,1
'words,1
collected_code_3/problem-570-1.c:33:24:,7
newWords[i],16
15-21,5
22-23,4
'*newWords_70,6
_35',4
collected_code_3/problem-570-1.c:41:24:,3
15-23,2
25-38,2
"printf(""%s\n"",",10
newWords[i]);,2
free(words[i]);,2
free(words);,2
39-41,2
free(newWords[i]);,2
_47',2
collected_code_3/problem-108-1.c:,1
'mergeSortedArrays':,1
collected_code_3/problem-108-1.c:60:25:,2
'INT_MAX',4
root->val,2
INT_MAX;,4
collected_code_3/problem-108-1.c:3:1:,1
defined,5
header,5
'<limits.h>';,2
did,5
you,11
forget,5
'#include,5
<limits.h>'?,2
collected_code_3/problem-943-1.c:,1
collected_code_3/problem-943-1.c:30:20:,1
collected_code_3/problem-805-1.c:,1
collected_code_3/problem-805-1.c:38:43:,1
invalid,1
operands,1
binary,1
(have,1
'int,2
*',1
and,1
(*)[10]'),1
list_size[max_list,1
lists];,1
(*)[10],1
collected_code_3/problem-290-1.c:,2
'findMaxList':,2
collected_code_3/problem-290-1.c:20:31:,1
'maxLists',1
maxLists[count++],2
~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
**maxLists,1
max),1
'maxLists,1
collected_code_3/problem-290-1.c:31:18:,1
collected_code_3/problem-290-1.c:32:26:,1
'*lists_65,2
collected_code_3/problem-290-1.c:35:35:,1
'**_22.elements,2
i')...,4
collected_code_3/problem-635-1.c:,2
collected_code_3/problem-635-1.c:12:15:,1
heap->arr,3
malloc(sizeof(int)*capacity);,3
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
createMinHeap(11);,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'insertKey':,2
collected_code_3/problem-635-1.c:64:18:,1
'*heap.arr,2
heap->arr[i],2
~~~~~~~~~~~~~^~~~~,1
"insertKey(heap,",1
3);,5
'insertKey',2
insertKey(MinHeap*,1
"heap,",2
(heap->count,1
heap->capacity),2
heap->count++;,1
heap->count,1
collected_code_3/problem-129-1.c:,1
'generateSquare':,4
collected_code_3/problem-129-1.c:19:32:,2
'*magicSquare[i][j]',6
(magicSquare[(int)i][(int)j]),4
~~~~~~~~~~~~~~~~~~~^~~~~~~~,2
magicSquare[n][n];,3
n;),3
-1,2
generateSquare(n);,1
'generateSquare',2
generateSquare(int,1
collected_code_3/problem-129-1.c:31:13:,1
"printf(""%3d",2
magicSquare[i][j]);,2
collected_code_3/problem-26-1.c:,1
collected_code_3/problem-26-1.c:24:28:,1
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~,1
tupleSize);,1
tupleSize;,1
tupleSize')...,1
collected_code_3/problem-824-1.c:,1
collected_code_3/problem-824-1.c:33:16:,1
collected_code_3/problem-147-1.c:,2
'findMaxTotal':,3
collected_code_3/problem-147-1.c:12:20:,2
'*triangle',2
triangle[0][0];,4
**triangle,3
**)malloc(n,3
++i),3
"findMaxTotal(triangle,",2
'findMaxTotal',4
6-9,2
findMaxTotal(int,2
"**triangle,",2
--i),2
'triangle',3
collected_code_3/problem-147-1.c:20:21:,1
triangle[i],2
*)malloc((i,2
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'triangle,1
collected_code_3/problem-551-1.c:,1
collected_code_3/problem-551-1.c:22:19:,1
*)malloc(COLS,3
**)malloc(ROWS,1
ROWS;,2
3')...,2
collected_code_3/problem-551-1.c:24:26:,1
'*matrix_26,2
_7,2
matrix[i][j],2
COLS,2
~~~~~~~~~~~~~^~~~~~~~~~~~~~,1
COLS;,1
4')...,1
~~~~~~~~~~~~~~~~~^~~~~~~~~~,2
collected_code_3/problem-920-1.c:,1
'removeNoneTuples':,2
collected_code_3/problem-920-1.c:38:42:,1
'newTupleList.tuples',1
newTupleList.tuples[index++],2
tupleList.tuples[i];,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~,1
tupleList,1
removeNoneTuples(tupleList);,1
'removeNoneTuples',2
3-9,1
TupleList,1
removeNoneTuples(TupleList,1
tupleList),1
newTupleList.tuples,1
*)malloc(newTupleList.size,1
tupleList.size;,1
(!isNoneTuple(tupleList.tuples[i])),1
'newTupleList.tuples,1
int)index,2
collected_code_3/problem-70-1.c:,1
collected_code_3/problem-70-1.c:24:26:,1
tuples[i].length,5
~~~~~~~~~~~~~~~~~^~~,1
collected_code_3/problem-513-1.c:,1
'convert_tuple_to_list':,2
collected_code_3/problem-513-1.c:9:17:,1
list[j],2
~~~~~~~~^~~~~~~~~~,1
malloc(sizeof(char,1
2);,3
collected_code_3/problem-380-1.c:,1
'generate2DArray':,3
collected_code_3/problem-380-1.c:7:18:,1
i<rows;,3
collected_code_3/problem-380-1.c:11:25:,1
'*array_26,2
~~~~~~~~~~~~^~~~~~~,1
rows,1
"5,",2
cols,1
"generate2DArray(rows,",1
cols);,1
'generate2DArray',2
3-21,1
int**,1
generate2DArray(int,1
"rows,",1
cols),1
j=0;,3
j<cols;,1
collected_code_3/problem-548-1.c:,1
'longestIncreasingSubsequence':,2
collected_code_3/problem-548-1.c:10:16:,1
'lis',1
lis[i],2
lis,1
(sizeof(int),1
'lis,1
collected_code_3/problem-829-1.c:,2
'secondMostRepeated':,5
collected_code_3/problem-829-1.c:47:12:,1
returns,2
address,2
local,2
variable,2
[-Wreturn-local-addr],2
arr[secondMax].str;,2
collected_code_3/problem-829-1.c:55:5:,1
[-Wanalyzer-null-argument],1
res);,2
"secondMostRepeated(sequence,",2
'secondMostRepeated',5
secondMostRepeated(char*,1
"sequence[],",1
"findIndex(arr,",2
"arrSize,",2
sequence[i]);,3
'findIndex',3
'findIndex':,1
findIndex(struct,1
StringCount,1
10-11,1
"strcpy(arr[arrSize].str,",1
~~~~~~~~~~~~^~~~,1
13-17,1
firstMax,1
secondMax,1
arrSize;,1
arrSize')...,1
(arr[i].count,1
arr[firstMax].count),1
('res'),1
'__builtin_puts',4
collected_code_3/problem-460-1.c:,1
collected_code_3/problem-460-1.c:9:42:,3
collected_code_3/problem-460-1.c:2:1:,1
collected_code_3/problem-460-1.c:10:19:,1
collected_code_3/problem-240-1.c:,1
collected_code_3/problem-240-1.c:11:19:,1
collected_code_3/problem-130-1.c:,1
'findMaxFrequency':,3
collected_code_3/problem-130-1.c:12:24:,1
'items',1
items[i].value,3
Item*,2
items,2
Item*)malloc(n,2
sizeof(struct,2
Item));,2
'items,1
collected_code_3/problem-130-1.c:35:12:,1
'maxValue',2
maxValue;,3
maxFrequencyItem,1
"findMaxFrequency(arr,",1
'findMaxFrequency',2
3-20,1
findMaxFrequency(int*,1
if(items[i].value,1
items[j].value),1
if(items[i].count,1
maxCount),1
collected_code_3/problem-822-1.c:,1
collected_code_3/problem-822-1.c:26:5:,3
'printf',4
password:,2
collected_code_3/problem-822-1.c:3:1:,1
'<stdio.h>',4
collected_code_3/problem-822-1.c:27:5:,4
'scanf',4
"scanf(""%s"",",1
password);,1
collected_code_3/problem-20-1.c:1:1:,1
unknown,2
name,2
'The',1
The,3
term,9
"""woodball""",6
not,3
standard,3
computer,3
science,3
mathematics.,3
It,3
seems,3
like,3
specific,3
related,3
certain,3
problem,3
"context,",6
that,3
it's,3
impossible,3
an,3
accurate,3
function.,6
If,3
more,3
details,3
about,3
what,3
number,4
"is,",3
I'd,3
happy,3
help,3
collected_code_3/problem-20-1.c:1:10:,1
"'=',",1
"',',",1
"';',",1
'asm',1
'__attribute__',1
before,2
string,20
constant,2
collected_code_3/problem-20-1.c:1:191:,1
too,1
long,15
its,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-885-1.c:,1
'areIsomorphic':,1
collected_code_3/problem-885-1.c:17:5:,1
'bool',2
bool,2
marked[MAX_CHARS],2
{false};,2
collected_code_3/problem-885-1.c:3:1:,1
'<stdbool.h>';,3
<stdbool.h>'?,3
<stdbool.h>,1
collected_code_3/problem-885-1.c:17:31:,3
collected_code_3/problem-885-1.c:23:36:,2
(marked[str2[i]],1
true),1
collected_code_3/problem-282-1.c:,1
collected_code_3/problem-282-1.c:11:16:,1
first,2
collected_code_3/problem-411-1.c:,3
'snakeToCamel':,10
collected_code_3/problem-411-1.c:8:19:,3
camel,5
malloc(len,5
collected_code_3/problem-411-1.c:4:1:,1
collected_code_3/problem-411-1.c:27:5:,4
free(camel);,1
collected_code_3/problem-411-1.c:13:22:,1
'camel',3
camel[j],6
toupper(snake[i]);,2
~~~~~~~~~^~~~~~~~~~~~~~~~~~~,1
if(snake[i],2
'_'),4
'camel,3
collected_code_3/problem-411-1.c:15:22:,1
snake[i];,2
~~~~~~~~~^~~~~~~~~~,1
collected_code_3/problem-411-1.c:19:14:,1
~~~~~~~~~^~~~~~,2
collected_code_3/problem-694-1.c:,1
collected_code_3/problem-694-1.c:11:21:,1
collected_code_3/problem-231-1.c:,1
'maxSum':,3
collected_code_3/problem-231-1.c:7:25:,4
(tri[i+1][j],4
tri[i+1][j+1]),4
tri[N][N],2
"{1,",3
"0},",2
maxSum(tri));,2
'maxSum',4
4-9,2
maxSum(int,2
tri[N][N]),2
i=N-1;,2
i>=0;,2
j<=i;,2
'tri',3
'[2]',1
'*tri_46(D),2
_3[j]',2
collected_code_3/problem-740-1.c:,1
'convertToDictionary':,2
collected_code_3/problem-740-1.c:13:31:,1
'dictionary',1
dictionary[i,2
2].key,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
KeyValuePair*,1
dictionary,1
malloc((size,1
sizeof(KeyValuePair));,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
+=,1
'dictionary,1
int)(i,1
collected_code_3/problem-174-1.c:,3
'createDictionary':,8
collected_code_3/problem-174-1.c:18:21:,1
dict[i].key,17
createDictionary(size);,11
'createDictionary',17
*createDictionary(int,6
malloc(sizeof(Dictionary),6
'dict,1
collected_code_3/problem-174-1.c:26:20:,1
strdup(value);,6
~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
dict;,5
67,9
"addValue(dict,",17
"size,",28
"""key1"",",15
'addValue',37
'addValue':,18
18-23,4
addValue(Dictionary,11
"*dict,",11
"*key,",11
*value),16
(dict[i].key,11
dict[i].values,15
*createNode(char,5
malloc(sizeof(Node));,5
collected_code_3/problem-174-1.c:35:17:,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
"""value2"");",6
29-35,1
"(strcmp(dict[i].key,",4
equal)...,3
*current,2
dict[i].values;,2
(current->next,20
"""key2"",",2
"""value3"");",2
40-49,1
25-31,2
32-34,1
35-37,1
41-50,1
collected_code_3/problem-174-1.c:35:28:,2
~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~,2
29-34,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
30-35,1
collected_code_3/problem-945-1.c:,1
'convertToSet':,3
collected_code_3/problem-945-1.c:11:19:,1
'set',2
set->elements,3
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
Set,1
*set,1
(Set*)malloc(sizeof(Set));,1
collected_code_3/problem-945-1.c:20:40:,1
'*set.elements,2
int)*set.size,2
set->elements[set->size++],2
~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
for(j,1
if(i,1
j')...,1
collected_code_3/problem-612-1.c:,1
'mergeFirstLast':,5
collected_code_3/problem-612-1.c:48:16:,1
'tail',3
tail->next,2
mergeFirstLast(Node*,1
'mergeFirstLast',3
cursor,1
tail,1
while(cursor->next,1
newHead,2
createNode(head->data,2
cursor->data);,2
if(newNode,1
collected_code_3/problem-562-1.c:,1
collected_code_3/problem-562-1.c:23:39:,3
collected_code_3/problem-562-1.c:2:1:,1
collected_code_3/problem-562-1.c:24:16:,1
collected_code_3/problem-754-1.c:,1
collected_code_3/problem-754-1.c:25:41:,2
excess,4
elements,4
array,4
initializer,4
arr1[SIZE],1
"10,",1
"20,",4
"40,",1
80};,1
^~,4
(near,4
initialization,4
'arr1'),1
collected_code_3/problem-754-1.c:27:41:,2
arr3[SIZE],3
"{3,",3
"4,",3
"15,",3
"30,",3
"70,",3
"80,",3
120};,3
'arr3'),3
collected_code_3/problem-754-1.c:27:45:,2
collected_code_3/problem-754-1.c:27:49:,2
collected_code_3/problem-969-1.c:,2
'joinTuples':,4
collected_code_3/problem-969-1.c:22:33:,1
newTuple;,3
"joinTuples(tuples,",5
'joinTuples',8
3-11,1
joinTuples(Tuple*,3
"tuples,",3
"if(strcmp(tuples[i].first,",3
tuples[j].first),3
newTuple.first,1
collected_code_3/problem-969-1.c:43:9:,2
'*result_24,2
_2.second',2
"printf(""%s:",4
"%s\n"",",4
"result[i].first,",4
result[i].second);,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
3-10,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
possible,2
collected_code_3/problem-587-1.c:,1
'listToTuple':,3
collected_code_3/problem-587-1.c:11:21:,1
tuple->elements,3
~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(Tuple*)malloc(sizeof(Tuple));,3
collected_code_3/problem-587-1.c:13:28:,1
'*tuple.elements,2
tuple->elements[i],2
list[i];,2
~~~~~~~~~~~~~~~~~~~^~~~~~~~~,1
collected_code_3/problem-593-1.c:,1
collected_code_3/problem-593-1.c:26:5:,1
result);,2
ip[16],1
"""192.168.001.001"";",1
removeLeadingZeroes(ip);,2
'removeLeadingZeroes',3
'removeLeadingZeroes':,2
removeLeadingZeroes(char*,1
ip),1
malloc(16);,1
while(token,1
('result'),1
collected_code_3/problem-117-1.c:,1
collected_code_3/problem-117-1.c:11:19:,1
collected_code_3/problem-665-1.c:,1
collected_code_3/problem-665-1.c:26:20:,1
collected_code_3/problem-938-1.c:,1
'findClosest':,1
collected_code_3/problem-938-1.c:9:23:,1
minimum,1
"min(A[i],",1
"min(B[j],",1
C[k]));,2
collected_code_3/problem-938-1.c:10:23:,1
maximum,1
"max(A[i],",1
"max(B[j],",1
collected_code_3/problem-109-1.c:,1
'countOddRotations':,2
collected_code_3/problem-109-1.c:10:13:,1
temp[0],2
~~~~~~~~^~~~~~,1
*temp,3
*)malloc(sizeof(char)*(len*2,1
collected_code_3/problem-423-1.c:,1
'goldMine':,1
collected_code_3/problem-423-1.c:8:5:,3
"memset(goldTable,",2
sizeof(goldTable));,2
collected_code_3/problem-423-1.c:3:1:,1
collected_code_3/problem-729-1.c:,1
collected_code_3/problem-729-1.c:11:16:,1
newNode(2);,1
collected_code_3/problem-484-1.c:,1
'removeMatchingTuples':,2
collected_code_3/problem-484-1.c:22:29:,1
result[index++],2
tuple1[i];,2
~~~~~~~~~~~~~~~~^~~~~~~~~~~,1
(Tuple*)malloc(sizeof(Tuple),1
size1;,1
size1')...,1
match,1
if(!match),1
'match,1
collected_code_3/problem-956-1.c:,1
'split_string':,3
collected_code_3/problem-956-1.c:12:13:,1
temp);,4
*)malloc(sizeof(char),2
len);,7
if(isupper(str[i])),1
('temp'),2
collected_code_3/problem-956-1.c:18:5:,1
"""HelloWorldThisIsATest"";",1
split_string(str);,1
'split_string',2
split_string(char,1
collected_code_3/problem-601-1.c:,1
'maxChainLength':,2
collected_code_3/problem-601-1.c:11:16:,1
'mcl',1
mcl[i],2
*mcl,1
'mcl,1
collected_code_3/problem-620-1.c:,1
'largestDivisibleSubset':,1
collected_code_3/problem-620-1.c:10:41:,2
'__compar_fn_t',1
"qsort(nums,",2
"sizeof(int),",2
(__compar_fn_t)abs);,2
collected_code_3/problem-620-1.c:10:55:,1
),1
collected_code_3/problem-128-1.c:,1
'getLongWords':,2
collected_code_3/problem-128-1.c:11:30:,1
'longWords',1
longWords[count],2
words[i];,2
**longWords,1
**)malloc(sizeof(char,1
wordCount);,1
wordCount;,1
wordCount')...,1
(strlen(words[i]),1
'longWords,1
collected_code_3/problem-772-1.c:,1
collected_code_3/problem-772-1.c:12:24:,1
word[wc++],3
~~~~~~~~~~~^~~~~~~~,1
word,2
(char*)malloc(strlen(str),5
'\0'),3
',3
'),3
'word,2
(sizetype)wc',2
collected_code_3/problem-772-1.c:15:26:,1
word[wc],2
(wc,2
'wc,2
collected_code_3/problem-772-1.c:29:20:,1
result[rc],2
"removeWords(str,",1
removeWords(char*,1
"str,",1
(sizetype)rc',1
collected_code_3/problem-27-1.c:,1
'remove_digits':,10
collected_code_3/problem-27-1.c:11:22:,7
literal,18
[-Wanalyzer-write-to-string-literal],9
str[j++],16
"remove_digits_from_list(list,",9
'remove_digits_from_list',27
'remove_digits_from_list':,9
remove_digits_from_list(char,9
remove_digits(list[i]);,9
'remove_digits',18
remove_digits(char,9
if(!isdigit(str[i])),9
7-16,1
7-20,1
7-24,1
7-28,1
7-34,2
7-36,1
collected_code_3/problem-27-1.c:14:12:,2
str[j],4
7-32,1
collected_code_3/problem-708-1.c:,1
collected_code_3/problem-708-1.c:16:23:,1
collected_code_3/problem-222-1.c:,1
'checkSameType':,1
collected_code_3/problem-222-1.c:6:12:,1
'typeid',1
if(typeid(arr[i]),1
typeid(arr[i+1])),1
"_typeid,",1
_checkSameType,2
ccDguhZN.o,2
collected_code_3/problem-568-1.c:,3
collected_code_3/problem-568-1.c:16:18:,1
'createListOfDictionaries':,4
List**,5
createListOfDictionaries(int,2
'createListOfDictionaries',4
listOfDictionaries,3
(List**)malloc(size,3
sizeof(List*));,3
listOfDictionaries[i],4
createList();,4
'createList',5
createList(),2
createNode();,3
createNode(),1
collected_code_3/problem-568-1.c:24:19:,1
~~~~~~~~~~~~~~^~~~~~~~~~~~~~,1
collected_code_3/problem-568-1.c:31:31:,1
'listOfDictionaries',1
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,1
'listOfDictionaries,1
collected_code_3/problem-730-1.c:,1
collected_code_3/problem-730-1.c:30:21:,1
collected_code_3/problem-65-1.c:,1
'createNewNode':,2
collected_code_3/problem-65-1.c:17:43:,3
collected_code_3/problem-65-1.c:2:1:,1
collected_code_3/problem-65-1.c:18:19:,1
collected_code_3/problem-921-1.c:,2
'chunk_tuples':,3
collected_code_3/problem-921-1.c:14:24:,1
'output',4
output[i].size,3
*output,1
(Tuple*)malloc((*out_size),1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
*out_size;,2
'output,4
collected_code_3/problem-921-1.c:17:31:,1
'*output_46,2
_24.data,2
output[i].data[j],2
input[i*n+j].data[0];,2
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~,1
output[i].data,1
i*n+j,1
collected_code_3/problem-921-1.c:27:23:,1
'input',1
input[i].size,3
*input,1
'input,1
collected_code_3/problem-921-1.c:29:26:,1
'*input_50,2
_11.data',2
input[i].data[0],2
i+1;,2
~~~~~~~~~~~~~~~~~^~~~~,1
input[i].data,1
collected_code_3/problem-326-1.c:,1
'most_frequent_word':,1
collected_code_3/problem-326-1.c:48:12:,1
wc[max_count_index].word;,1
collected_code_3/problem-260-1.c:,1
'newman_shanks_williams':,3
collected_code_3/problem-260-1.c:17:16:,2
'current',24
current;,14
1-9,1
'n,4
else,2
1')...,2
prev_prev,2
Newman-Shanks-Williams,1
prime,1
"%lld\n"",",1
newman_shanks_williams(n));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'newman_shanks_williams',2
newman_shanks_williams(int,1
collected_code_3/problem-783-1.c:,1
'rgb2hsv':,1
collected_code_3/problem-783-1.c:38:17:,2
'NAN',1
out.h,1
NAN;,1
collected_code_3/problem-852-1.c:,1
collected_code_3/problem-852-1.c:33:16:,1
collected_code_3/problem-196-1.c:,2
'removeTuples':,2
collected_code_3/problem-196-1.c:22:28:,1
'newTuples',1
newTuples[j++],2
tuples[i];,2
~~~~~~~~~~~~~~~^~~~~~~~~~~,1
newTuples,1
(Tuple*)malloc(count,1
(tuples[i].length,1
'newTuples,1
collected_code_3/problem-196-1.c:35:26:,1
collected_code_3/problem-196-1.c:38:35:,1
'*tuples_65,2
_18.elements,2
(int*)malloc(tuples[i].length,1
tuples[i].length;,1
collected_code_3/problem-533-1.c:,2
'removeDataType':,3
collected_code_3/problem-533-1.c:21:30:,1
'newElements',1
newElements[j++],2
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~,1
TupleElement*,1
newElements,1
(TupleElement*),2
malloc(tuple->size,1
sizeof(TupleElement));,2
tuple->size;,1
if(tuple->elements[i].type,1
typeToRemove),1
'newElements,1
collected_code_3/problem-533-1.c:25:24:,1
'newTuple',6
newTuple->elements,2
newElements;,2
newTuple,2
collected_code_3/problem-533-1.c:34:30:,1
tuple.elements[0].intVal,2
~~~~~~~~~~~~~~~~~~~~~~~~~^~~,1
malloc(tuple.size,1
collected_code_3/problem-410-1.c:,1
collected_code_3/problem-410-1.c:15:16:,1
node->type,2
type;,2
collected_code_3/problem-140-1.c:,2
collected_code_3/problem-140-1.c:11:20:,1
'findSingleOccurrence':,29
collected_code_3/problem-140-1.c:29:25:,1
current,5
current->next;,9
~~~~~~~~^~~~~~~~~~~~~~~,2
"push(&head,",6
findSingleOccurrence(head);,3
'findSingleOccurrence',8
findSingleOccurrence(struct,3
(current,14
current->data,18
current->next->data),18
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
21-23,3
(24):,3
25-30,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
(prev,4
31-36,2
37-39,2
(40):,2
41-43,1
collected_code_3/problem-140-1.c:39:17:,1
collected_code_3/problem-140-1.c:42:1:,1
41-46,1
47-49,1
printList(struct,1
*node),1
51-52,1
(node,4
node->data);,3
53-54,1
55-56,1
57-58,1
59-60,1
collected_code_3/problem-965-1.c:,1
'camelToSnake':,4
collected_code_3/problem-965-1.c:11:23:,1
output[j],6
'_';,2
output,3
256);,3
(input[i]),3
(isupper(input[i])),2
collected_code_3/problem-965-1.c:15:23:,1
input[i];,2
~~~~~~~~~~^~~~~~~~~~,1
collected_code_3/problem-965-1.c:20:15:,1
collected_code_3/problem-538-1.c:,1
'stringListToTuple':,3
collected_code_3/problem-538-1.c:12:18:,1
tuple->items,3
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*tuple,1
collected_code_3/problem-538-1.c:15:25:,1
'*tuple.items,2
tuple->items[i],2
malloc(sizeof(char),2
(strlen(list[i]),2
~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-297-1.c:,1
collected_code_3/problem-297-1.c:11:19:,1
collected_code_3/problem-542-1.c:,1
'replace_with_colon':,1
collected_code_3/problem-542-1.c:13:9:,3
'exit',8
exit(1);,4
collected_code_3/problem-542-1.c:4:1:,1
<regex.h>,1
collected_code_3/problem-175-1.c:,3
collected_code_3/problem-175-1.c:15:21:,1
createStack(strlen(exp));,13
createStack(unsigned,7
(Stack*),2
malloc(sizeof(Stack));,2
collected_code_3/problem-175-1.c:32:32:,1
'*stack.array,4
stack->array[++stack->top],4
~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~,1
stack->array,5
(char*),5
malloc(stack->capacity,5
5-10,1
'('),6
push(Stack*,3
collected_code_3/problem-175-1.c:56:24:,3
(isEmpty(stack),2
"!isMatchingPair(pop(stack),",2
exp[i])),2
13-18,1
collected_code_3/problem-175-1.c:61:9:,1
free(stack);,4
collected_code_3/problem-175-1.c:64:9:,1
collected_code_3/problem-802-1.c:,1
'countRotations':,3
collected_code_3/problem-802-1.c:11:12:,2
'min_index',4
min_index;,6
"arr[0],",2
"countRotations(arr,",1
'countRotations',2
countRotations(int,1
(min,1
arr[i]),1
collected_code_3/problem-563-1.c:,1
'extractValues':,6
collected_code_3/problem-563-1.c:13:23:,1
strlen(token),2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
strlen(str));,2
2-5,1
(token,2
"strtok(NULL,",1
"""\"""");",1
collected_code_3/problem-563-1.c:20:15:,1
"""This",1
"\""test\""",1
"\""multiple\""",1
values,2
"\""in",1
"quotes\""."";",1
extractValues(str);,1
'extractValues',2
extractValues(char*,1
collected_code_3/problem-425-1.c:,1
collected_code_3/problem-425-1.c:13:40:,3
*link,3
collected_code_3/problem-425-1.c:2:1:,1
collected_code_3/problem-425-1.c:14:15:,1
'link',2
link->key,2
collected_code_3/problem-788-1.c:,1
'createTuple':,4
collected_code_3/problem-788-1.c:13:19:,1
newTuple->str,2
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*newTuple,1
collected_code_3/problem-482-1.c:,1
'find_sequences':,1
collected_code_3/problem-482-1.c:13:9:,3
collected_code_3/problem-482-1.c:4:1:,1
collected_code_3/problem-161-1.c:,1
collected_code_3/problem-161-1.c:11:20:,1
collected_code_3/problem-889-1.c:,1
collected_code_3/problem-889-1.c:35:20:,1
new_node->next,2
(*head_ref);,2
~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
push(Node**,1
createNode(new_data);,2
(*head_ref),1
new_node;,1
collected_code_3/problem-703-1.c:,1
collected_code_3/problem-703-1.c:29:23:,1
collected_code_3/problem-315-1.c:,1
'maxLengthEvenWord':,1
collected_code_3/problem-315-1.c:13:23:,1
"max(res,",1
cur_len);,1
collected_code_3/problem-854-1.c:,2
collected_code_3/problem-854-1.c:12:16:,1
heap->data,3
(int*)malloc(capacity,3
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
"convertListToHeap(list,",2
'convertListToHeap',8
'convertListToHeap':,3
convertListToHeap(int*,2
createHeap(size);,3
(Heap*)malloc(sizeof(Heap));,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-854-1.c:46:28:,1
'*heap.data,2
int)*heap.size,2
heap->data[heap->size],2
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~,1
"insertHeap(heap,",1
(heap->size,1
collected_code_3/problem-779-1.c:,1
collected_code_3/problem-779-1.c:11:19:,1
arr[0],1
newNode(10);,1
collected_code_3/problem-102-1.c:,3
collected_code_3/problem-102-1.c:8:29:,3
camelStr,6
collected_code_3/problem-102-1.c:4:1:,1
<ctype.h>,1
collected_code_3/problem-102-1.c:29:5:,4
free(camelStr);,1
collected_code_3/problem-102-1.c:13:25:,1
'camelStr',3
camelStr[j],6
toupper(snakeStr[i]);,2
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~,1
if(snakeStr[i],2
'camelStr,3
collected_code_3/problem-102-1.c:15:25:,1
snakeStr[i];,2
~~~~~~~~~~~~^~~~~~~~~~~~~,1
collected_code_3/problem-102-1.c:19:17:,1
~~~~~~~~~~~~^~~~~~,1
snakeToCamel(snakeStr);,1
'snakeToCamel',2
snakeToCamel(char*,1
snakeStr),1
collected_code_3/problem-272-1.c:,2
collected_code_3/problem-272-1.c:11:17:,1
newTuple->a,2
a;,2
collected_code_3/problem-272-1.c:28:19:,1
"createTuple(i,",2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~,1
Tuple**,1
(Tuple**)malloc(size,1
sizeof(Tuple*));,1
collected_code_3/problem-875-1.c:,1
'minDiff':,1
collected_code_3/problem-875-1.c:5:16:,2
diff,2
collected_code_3/problem-875-1.c:3:1:,1
collected_code_3/problem-927-1.c:,1
collected_code_3/problem-927-1.c:12:16:,1
collected_code_3/problem-393-1.c:,1
collected_code_3/problem-393-1.c:29:40:,3
collected_code_3/problem-393-1.c:2:1:,1
collected_code_3/problem-393-1.c:30:16:,1
