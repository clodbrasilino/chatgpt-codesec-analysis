word,frequency
,260916
collected_code_3/problem-582-2.c:,1
In,227
function,313
'main':,323
collected_code_3/problem-582-2.c:16:17:,1
warning:,397
dereference,256
of,538
possibly-NULL,220
'dict',8
[CWE-690],220
[-Wanalyzer-possible-null-dereference],216
16,88
|,23353
dict->count,2
=,1584
0;,288
~~~~~~~~~~~~^~~,5
events,677
1-2,177
15,95
Dictionary,12
*dict,1
malloc(sizeof(Dictionary));,8
^~~~~~~~~~~~~~~~~~~~~~~~~~,17
(1),448
this,223
call,220
could,442
return,347
NULL,359
~~~~~~~~~~~~~~~,16
(2),308
be,227
NULL:,216
unchecked,216
value,292
from,609
collected_code_3/problem-902-2.c:,1
'insert':,15
collected_code_3/problem-902-2.c:35:13:,1
use,76
'*node.key',1
where,10
non-null,15
expected,12
[-Wanalyzer-possible-null-argument],4
35,14
if,214
"(strcmp(node->key,",2
key),5
==,127
0),43
{,870
^~~~~~~~~~~~~~~~~~~~~~,6
68,8
int,389
main(),110
^~~~,175
entry,349
to,505
'main',393
|......,360
72,9
"insert(hashTable1,",4
"""apple"",",3
1);,28
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
calling,234
'insert',19
+-->,234
3-4,23
31,34
void,72
insert(HashTable*,3
"hashTable,",3
char*,53
"key,",5
value),7
^~~~~~,68
(3),237
32,38
unsigned,108
index,27
hash(key);,6
~~~~~~~~~,28
(4),247
'hash',9
'hash':,3
5-7,9
17,70
hash(char*,3
(5),184
18,54
hash,6
19,69
while,49
(*key),3
~,360
(6),180
following,610
'true',394
branch...,236
20,58
(hash,3
<<,3
5),3
+,307
*key++;,3
~~~~~~~~~~~,23
(7),128
...to,610
here,703
<------+,141
8-11,1
^~~~~~~~~,16
(8),116
returning,135
33,36
HashNode*,4
node,31
hashTable->buckets[index];,3
34,28
(node),3
~~~~,17
(9),99
'false',220
branch,374
(when,374
'node',27
is,208
NULL)...,42
41,29
malloc(sizeof(HashNode));,3
~~~~~~~~~~~~~~~~~~~~~~~~,56
(10),92
42,23
node->key,5
strdup(key);,12
(11),86
12-13,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
(12),79
possible,6
73,7
"""banana"",",1
2);,8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,13
(13),72
14-15,2
(14),64
(15),57
16-18,1
(16),49
(17),37
(18),32
19-22,1
(19),32
(20),31
non-NULL)...,51
~~~~~~~~~~~~~~~~~~~~~~,20
(21),29
(22),24
argument,12
1,47
('*node.key'),1
file,5
included,4
collected_code_3/problem-902-2.c:3:,1
/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/string.h:77:10:,2
note:,95
'strcmp',2
must,5
77,5
strcmp(const,2
char,72
"*__s1,",2
const,4
*__s2);,2
collected_code_3/problem-902-2.c:42:15:,1
~~~~~~~~~~^~~~~~~~~~~~~,2
8-12,1
~~~~~~~~~~~~~~~~~~~~~~~,31
collected_code_3/problem-769-2.c:,1
'push':,41
collected_code_3/problem-769-2.c:11:21:,1
'new_node',32
11,191
new_node->data,30
new_data;,32
~~~~~~~~~~~~~~~~^~~~~~~~~~,7
10,156
struct,49
Node*,262
new_node,19
(struct,44
Node*),8
malloc(sizeof(struct,13
Node));,45
^~~~~~~~~~~~~~~~~~~~~~~~~~~,38
~~~~~~~~~~~~~~~~~~~~~~~~~~,22
collected_code_3/problem-923-2.c:,1
'shortestSupersequence':,1
collected_code_3/problem-923-2.c:18:32:,1
implicit,88
declaration,161
'min',4
[-Wimplicit-function-declaration],51
dp[i][j],3
"min(dp[i-1][j],",1
dp[i][j-1]);,1
^~~,29
collected_code_3/problem-262-2.c:,1
collected_code_3/problem-262-2.c:33:20:,1
~~~~~~~~~~~~~~~^~~~~~~~~~,10
Node*)malloc(sizeof(struct,34
~~~~~~~~~~~~~~~~~~~~~~~~~,22
collected_code_3/problem-674-2.c:,1
'removeDuplicates':,6
collected_code_3/problem-674-2.c:11:17:,2
check,2
'word',10
for,188
after,5
already,4
dereferencing,2
it,9
[-Wanalyzer-deref-before-check],2
(word,3
!=,98
NULL),34
^,54
event,82
8,62
"strcpy(result,",2
word);,4
pointer,8
dereferenced,4
2,32
checked,2
but,9
was,20
at,24
22,55
23,62
str[],7
"""This",2
a,85
test.,1
This,1
only,3
"test."";",1
24,59
result,30
removeDuplicates(str);,1
~~~~~~~~~~~~~~~~~~~~~,27
'removeDuplicates',2
3,23
5,62
removeDuplicates(char*,1
str),9
^~~~~~~~~~~~~~~~,19
4,49
collected_code_3/problem-456-2.c:,1
'reverseString':,3
collected_code_3/problem-456-2.c:19:20:,2
write,6
string,5
literal,4
[-Wanalyzer-write-to-string-literal],2
*begin_ptr,4
temp;,4
~~~~~~~~~~~^~~~~~,15
36,18
"reverseStringList(strList,",2
size);,39
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,12
'reverseStringList',6
'reverseStringList':,2
3-6,8
26,53
reverseStringList(char*,2
"str[],",3
size),37
^~~~~~~~~~~~~~~~~,20
27,34
for(int,61
i,420
<,400
size;,30
i++),208
~~~~~~~~,45
'i,225
size')...,33
28,44
reverseString(str[i]);,2
'reverseString',4
7-12,2
reverseString(char*,2
^~~~~~~~~~~~~,29
13,107
(i,30
length,5
-,54
1;,64
~~~~~~~~~~~~~~,113
14,60
end_ptr++;,2
/,28
2;,18
temp,10
*end_ptr;,2
*end_ptr,2
*begin_ptr;,2
~~~~~~~~~~~~~~~~~,27
7-14,1
collected_code_3/problem-795-2.c:,3
'createHeap':,17
collected_code_3/problem-795-2.c:17:14:,1
'h',9
h->items,7
(Item*)malloc(sizeof(Item),5
*,345
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
62,10
65,13
Heap*,48
h,17
createHeap(n);,11
~~~~~~~~~~~~~,49
'createHeap',31
3-5,32
createHeap(int,9
^~~~~~~~~~,106
(Heap*)malloc(sizeof(Heap));,13
~~~~~~~~~~~~~~~~~~~~,73
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
collected_code_3/problem-795-2.c:25:18:,1
leak,18
'<unknown>',12
[CWE-401],18
[-Wanalyzer-malloc-leak],18
25,63
"(Item*)realloc(h->items,",3
sizeof(Item),3
h->size,9
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~,24
allocated,37
5-8,2
66,9
(int,191
n;,55
~~~~~,78
67,6
price;,5
"scanf(""%d"",",6
&price);,5
~~~~~~~~~~~~~~~~~~~,23
69,11
"push(h,",6
"(Item){price,",6
1});,6
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
'push',20
9-14,2
push(Heap*,5
"h,",10
Item,6
item),7
(h->len,6
h->size),5
h->items[h->len],4
item;,7
assuming,13
non-NULL,13
29,37
h->len;,2
30,41
>,53
<=,62
0')...,36
38,17
h->len++;,2
~~~~~~,35
15-18,3
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~,13
19-23,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
when,11
'realloc',11
fails,6
(23),24
leaks,18
here;,18
collected_code_3/problem-795-2.c:28:22:,1
'*h.items,2
(long,91
int)*h.len,2
8',46
~~~~~~~~~~~~~~~~~^~~~~~,2
9-12,2
collected_code_3/problem-795-2.c:76:21:,1
'result',44
76,4
result[i],20
pop(h);,2
1-4,39
5-9,1
10-13,2
14-17,1
18-26,1
~~~,31
70,7
m),1
74,1
Item*,2
m);,1
75,1
m;,1
(24),20
(26),19
'result,23
int)i,46
(25),20
collected_code_3/problem-937-2.c:,1
'getMostCommonChar':,3
collected_code_3/problem-937-2.c:20:12:,2
uninitialized,68
[CWE-457],34
[-Wanalyzer-use-of-uninitialized-value],34
result;,19
1-5,7
region,40
created,34
on,34
stack,34
capacity:,18
byte,18
12,100
len;,13
~~~~~~~,27
>=,55
len')...,13
"""sample",2
"string"";",2
"printf(""Most",5
common,5
character,4
"%c"",",1
getMostCommonChar(str));,1
'getMostCommonChar',2
3-8,5
6,63
getMostCommonChar(char*,1
collected_code_3/problem-827-2.c:,1
collected_code_3/problem-827-2.c:14:26:,3
'malloc',56
**list,5
**)malloc(rows,6
sizeof(int,13
*));,32
collected_code_3/problem-827-2.c:2:1:,1
include,72
'<stdlib.h>',48
or,80
provide,74
#include,31
<stdio.h>,17
+++,30
|+#include,30
<stdlib.h>,22
incompatible,36
built-in,35
[-Wbuiltin-declaration-mismatch],35
collected_code_3/problem-827-2.c:30:9:,4
'free',26
free(list[i]);,1
collected_code_3/problem-827-2.c:32:5:,2
free(list);,1
collected_code_3/problem-827-2.c:16:17:,1
'list',6
list[i],5
*)malloc(cols,8
sizeof(int));,52
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
rows;,7
rows')...,18
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
'list,4
collected_code_3/problem-827-2.c:21:24:,1
'*list_33,2
_10,4
int)j,19
4',36
21,59
list[i][j],2
j;,8
~~~~~~~~~~~^~~~~~~,1
1-14,3
~~^~~~~~,6
j,59
cols;,3
j++),24
'j,19
cols')...,4
~~~~~~~~~~~~~~~~~~,14
collected_code_3/problem-400-2.c:,1
'countTupleFrequencies':,3
collected_code_3/problem-400-2.c:33:38:,1
'tupleCounts',1
tupleCounts[count].tuple,2
tuples[i];,4
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~,2
countTupleFrequencies(Tuple*,1
"tuples,",1
n),32
^~~~~~~~~~~~~~~~~~~~~,11
'countTupleFrequencies',3
TupleCount*,1
tupleCounts,1
(TupleCount*)malloc(n,1
sizeof(TupleCount));,1
n')...,52
"findTupleIndex(tupleCounts,",2
"count,",2
tuples[i]);,2
'findTupleIndex',3
'findTupleIndex':,1
6-8,1
findTupleIndex(TupleCount*,1
"tupleCounts,",1
"n,",17
Tuple,16
tuple),8
^~~~~~~~~~~~~~,59
-1;,19
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(index,2
-1),5
'index,2
-1')...,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
'tupleCounts,1
int)count,5
12',1
collected_code_3/problem-31-2.c:,2
collected_code_3/problem-31-2.c:44:16:,1
'*h.heap,2
44,21
h->heap[i],2
node;,7
85,9
89,3
"topKFrequent(nums,",2
"numsSize,",24
k);,10
'topKFrequent',5
'topKFrequent':,3
3-11,4
59,6
topKFrequent(int*,2
"nums,",10
k),7
^~~~~~~~~~~~,7
60,7
freq[100],2
{0};,2
61,4
numsSize;,17
++i),8
~~~~~~~~~~~~,31
numsSize')...,22
++freq[nums[i]];,2
h->heap,3
(Node*)malloc(sizeof(Node),3
100;,1
99')...,2
Node,8
"{i,",1
freq[i]};,1
(h->size,12
"insert(h,",1
node);,1
12-15,2
37,11
insert(Heap*,2
node),1
40,24
&&,36
node.freq,1
h->heap[(i,1
1),49
2].freq),1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
collected_code_3/problem-31-2.c:65:13:,1
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
3-7,4
63,2
64,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,11
collected_code_3/problem-691-2.c:,1
'groupBySecond':,3
collected_code_3/problem-691-2.c:34:36:,1
'groups',1
groups[*groupSize].key,3
tuples[i].second;,3
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~,1
1-8,10
Group*,1
groups,1
malloc(size,13
sizeof(Group));,1
found,3
*groupSize;,2
(!found),2
'found,3
'groups,1
int)*groupSize,1
24',3
collected_code_3/problem-691-2.c:38:42:,1
'*groups_101,2
_85.values',2
groups[*groupSize].values[0],2
tuples[i].first;,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~,1
groups[*groupSize].values,1
malloc(2,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
collected_code_3/problem-528-2.c:,2
'findMinLengthLists':,2
collected_code_3/problem-528-2.c:21:37:,1
result[(*resultSize)++],2
lists[i];,4
~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
1-6,34
List,4
**result,22
malloc(sizeof(List*),2
*resultSize,1
if(lists[i]->length,1
min),3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
int)*resultSize,1
collected_code_3/problem-528-2.c:33:18:,1
'lists',2
lists[i],7
malloc(sizeof(List));,7
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~,2
**lists,2
'lists,2
collected_code_3/problem-528-2.c:34:26:,1
'*lists_45,2
_8',4
lists[i]->length,5
~~~~~~~~~~~~~~~~~^~~~~~~,5
collected_code_3/problem-833-2.c:,2
collected_code_3/problem-833-2.c:33:15:,1
^~~~~~~~~~~~~~~~~~~~~~~~,3
'get_keys':,3
collected_code_3/problem-833-2.c:43:31:,1
'keys',1
43,23
keys[(*length)++],2
strdup(node->key);,2
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~,1
39,18
char**,4
keys,1
malloc(TABLE_SIZE,1
sizeof(char*));,3
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
2-6,1
TABLE_SIZE;,1
(HashNode*,1
table->buckets[i];,1
node->next),1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'keys,1
int)*length,1
collected_code_3/problem-679-2.c:,2
'createDictionary':,9
collected_code_3/problem-679-2.c:16:17:,1
dict->pairs,6
sizeof(KeyValuePair));,3
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
Dictionary*,13
dict,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
'setPair':,2
collected_code_3/problem-679-2.c:25:28:,1
'*dict.pairs,4
16',14
dict->pairs[index].key,4
key;,2
~~~~~~~~~~~~~~~~~~~~~~~^~~~~,1
createDictionary(3);,2
'createDictionary',10
createDictionary(size_t,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
5-6,11
^~~~~~~~~~~~~~~~~~~,9
"setPair(dict,",1
"0,",16
"""key1"",",2
"""value1"");",3
'setPair',2
7-10,8
setPair(Dictionary*,1
"dict,",2
size_t,2
"index,",2
^~~~~~~,19
dict->size),1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~,21
collected_code_3/problem-486-2.c:,1
'binomial_probability':,1
collected_code_3/problem-486-2.c:18:17:,3
'pow',4
bin_prob,2
*=,2
"pow(p,",2
collected_code_3/problem-486-2.c:2:1:,1
'<math.h>',4
<math.h>,2
collected_code_3/problem-215-2.c:,1
'decode':,3
collected_code_3/problem-215-2.c:16:24:,1
'decoded',2
decoded[j],4
ch;,2
~~~~~~~~~~~^~~~,2
7,51
decoded,2
(char*)malloc(length,2
sizeof(char));,25
length;,4
~~~~~~~~~~,32
length')...,4
ch,1
encoded[i];,1
(count,4
'count,6
'decoded,2
(sizetype)j',20
collected_code_3/problem-215-2.c:21:16:,1
'\0';,31
collected_code_3/problem-444-2.c:,2
'trimTuple':,2
collected_code_3/problem-444-2.c:19:20:,1
'newData',1
newData[i],2
tuple->data[i];,2
~~~~~~~~~~~^~~~~~~~~~~~~~~~,3
(k,1
tuple->size),1
*newData,1
*)malloc(sizeof(int),2
(tuple->size,1
k));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,10
tuple->size,1
k;,12
'newData,1
collected_code_3/problem-444-2.c:32:23:,1
'tuple.data',1
tuple.data[i],2
~~~~~~~~~~~~~~^~~~~~~,1
tuple.data,1
tuple.size);,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
tuple.size;,7
'tuple.data,1
collected_code_3/problem-391-2.c:,2
'create_node':,3
collected_code_3/problem-391-2.c:13:19:,1
new_node->key,3
~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
*root,5
"create_node(""root"");",3
'create_node',5
node*,3
create_node(char,2
*key),2
^~~~~~~~~~~,17
*new_node,2
(node*)malloc(sizeof(node));,2
'print_dict':,2
collected_code_3/problem-391-2.c:34:5:,1
'*root.key',1
"printf(""%s\n"",",8
root->key);,2
^~~~~~~~~~~~~~~~~~~~~~~~~,11
47,20
"add_child(root,",4
child1);,2
'add_child',15
'add_child':,7
7-9,3
add_child(node,5
"*parent,",5
*child),5
if(parent->child,5
parent->child,3
child;,5
10-11,2
^~~~~~~~~~~~~~~~~~~~~~~,13
48,27
child2);,2
12-14,5
*temp,2
parent->child;,2
15-16,1
while(temp->next,2
temp->next,5
17-18,3
49,41
"add_child(child1,",4
child3);,2
19-21,8
22-23,3
50,36
child4);,2
24-26,5
27-28,1
(27),15
(28),15
29-30,1
(29),14
51,31
"add_child(child2,",2
child5);,2
(30),12
31-33,2
(31),12
(32),9
(33),8
34-35,1
(34),7
52,22
53,31
"print_dict(root,",1
0);,4
(35),8
'print_dict',2
36-41,1
print_dict(node,1
"*root,",1
level),1
(36),8
if(root,1
return;,2
(37),6
'root',1
level;,1
"printf(""\t"");",1
(39),4
level')...,1
(38),5
(40),4
(41),3
('*root.key'),1
<built-in>:,3
'__builtin_puts',2
collected_code_3/problem-358-2.c:,1
'insertEnd':,10
collected_code_3/problem-358-2.c:30:16:,1
'newNode',114
newNode;,4
~~~~~~~~~~~^~~~~~~~~,1
"insertEnd(&head1,",5
10);,2
'insertEnd',14
insertEnd(Node**,3
"head,",3
data),82
newNode,98
createNode(data);,6
~~~~~~~~~~~~~~~~,40
'createNode',222
'createNode':,126
9,142
createNode(int,74
(Node*)malloc(sizeof(Node));,92
(!newNode),60
newNode->data,59
data;,74
8-10,16
(*head,3
*head,2
11-12,13
20);,4
13-14,1
"printf(""Memory",39
"error\n"");",39
*head;,2
(temp->next,3
24-25,1
30);,1
26-27,2
28-32,1
33-35,1
36-37,1
temp->next;,1
38-40,1
collected_code_3/problem-578-2.c:,1
'newNode':,27
collected_code_3/problem-578-2.c:11:16:,1
node->data,19
^~~~~~~~~~~~~~~~~~~~,29
collected_code_3/problem-114-2.c:,1
'assign_frequency':,3
collected_code_3/problem-114-2.c:22:18:,1
'list.tuples',2
list->tuples,4
"realloc(list->tuples,",3
(list->size,3
sizeof(Tuple));,12
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
"assign_frequency(&list,",3
"""tuple1"");",2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
'assign_frequency',5
assign_frequency(TupleList,2
"*list,",2
*tuple),2
list->size;,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
"succeeds,",5
moving,5
buffer,9
8-9,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
"""tuple2"");",1
10-16,1
"if(strcmp(list->tuples[i].tuple,",1
the,14
strings,3
are,6
non-equal)...,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-322-2.c:,1
'find_min_indices':,2
collected_code_3/problem-322-2.c:15:28:,1
'indices',1
indices[count],2
i;,14
~~~~~~~~~~~~~~~^~~,5
*indices,1
if(arr[i],3
},15
else,2
'indices,1
collected_code_3/problem-516-2.c:35:6:,1
error:,13
conflicting,3
types,3
'radixsort';,1
have,5
'void(int,1
"*,",4
int)',3
radixsort(int,1
"array[],",1
collected_code_3/problem-516-2.c:2:,1
/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/stdlib.h:348:10:,1
previous,3
'radixsort',1
with,3
type,8
'int(const,1
"**,",1
"int,",2
348,1
radixsort(const,1
"**__base,",1
"__nel,",1
"*__table,",1
collected_code_3/problem-450-2.c:,2
'extractStrings':,12
collected_code_3/problem-450-2.c:11:27:,3
result[index],18
malloc((size,12
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
malloc(numStrings,5
sizeof(char,17
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
numStrings;,10
numStrings')...,22
(strlen(strings[i]),10
int)index,4
heap-based,3
overflow,1
[CWE-122],1
[-Wanalyzer-out-of-bounds],4
"extractStrings(strings,",13
"numStrings,",21
'extractStrings',21
3-23,2
**extractStrings(char,8
"**strings,",8
bytes,16
out-of-bounds,4
till,4
ends,4
beyond,1
end,4
collected_code_3/problem-450-2.c:18:12:,2
3-15,5
"realloc(result,",7
"strcpy(result[index],",1
strings[i]);,1
10-15,1
~~^~~~~~~~~~~~,1
collected_code_3/problem-450-2.c:28:27:,7
[CWE-476],21
[-Wanalyzer-null-dereference],20
NULL;,65
~~~~~~^~~,5
3-13,9
14-16,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
over-read,3
[CWE-126],3
15-17,9
read,6
result[i]);,4
without,2
'*result_24,4
_10',7
heap,32
collected_code_3/problem-317-2.c:,1
collected_code_3/problem-317-2.c:11:16:,1
collected_code_3/problem-584-2.c:3:10:,1
fatal,1
pcre.h:,1
No,1
such,1
directory,1
<pcre.h>,1
^~~~~~~~,6
compilation,1
terminated.,1
collected_code_3/problem-251-2.c:,1
collected_code_3/problem-251-2.c:11:16:,1
head,38
newNode(1);,3
newNode(int,5
collected_code_3/problem-537-2.c:,1
'findFirstRepeatedWord':,8
collected_code_3/problem-537-2.c:29:1:,1
'words[0]',2
test,1
"testing"";",1
word,5
findFirstRepeatedWord(str);,1
'findFirstRepeatedWord',2
3-16,1
findFirstRepeatedWord(char*,1
for(i,18
strlen(str);,6
if(str[i],5
',9
||,11
str[i],6
'\0'),6
word[j],3
for(k,1
k,3
w;,1
k++),1
'k,1
w')...,1
words[w],1
(char*)malloc(strlen(word),1
word[j++],3
str[i];,10
"strcpy(words[w],",1
'words[w]',1
~~^~~~~~~~~~~~~~,2
collected_code_3/problem-537-2.c:14:21:,1
~~~~~~~~^~~~~~,1
(char*)malloc(MAX_WORD_LEN);,2
'word,4
collected_code_3/problem-537-2.c:25:23:,1
~~~~~~~~~~^~~~~~~~,3
collected_code_3/problem-653-2.c:,2
'createMap':,3
collected_code_3/problem-653-2.c:17:14:,1
'map',2
map->key,2
~~~~~~~~~^~~~~~~~~~~~~,1
Map,2
*map,2
(Map,1
*)malloc(sizeof(Map));,1
collected_code_3/problem-653-2.c:19:24:,1
'*map.values',2
map->values->value,2
strdup(value);,4
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
map->values,1
(Node,3
*)malloc(sizeof(Node));,2
'addValue':,3
collected_code_3/problem-653-2.c:30:26:,1
'*current.next',2
current->next->value,2
~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
57,11
58,5
"createMap(""key1"",",1
"addValue(map,",1
"""value2"");",1
'addValue',2
addValue(Map,1
"*map,",1
*value),2
4-7,2
(current->next,1
current->next,7
collected_code_3/problem-465-2.c:,1
collected_code_3/problem-465-2.c:23:18:,1
'items',2
items[0].key,2
"""key1"";",2
items[0].value,2
"""value1"";",2
~~~~~~~~~~~~~^~~~~~~~,2
*items,1
sizeof(Item));,1
collected_code_3/problem-245-2.c:,1
'maxSumBitonic':,4
collected_code_3/problem-245-2.c:25:19:,1
'max',9
max_sum,1
"max(max_sum,",1
msis[i],6
msds[i],5
arr[i]);,3
collected_code_3/problem-245-2.c:10:17:,1
'msis',1
arr[i];,10
~~~~~~~~^~~~~~~~,2
*msis,2
*),10
malloc(sizeof(int),8
n);,14
'msis,1
collected_code_3/problem-245-2.c:11:17:,1
'msds',1
*msds,2
'msds,1
collected_code_3/problem-245-2.c:21:40:,1
'*msds_119,2
_61',2
(arr[i],7
arr[j],3
msds[j],2
arr[i]),4
~~~~^~~,1
"printf(""Maximum",1
Sum,1
Bi-tonic,1
sub-sequence,1
"%d\n"",",8
"maxSumBitonic(arr,",1
n));,4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'maxSumBitonic',2
maxSumBitonic(int,1
"*arr,",1
(j,4
i')...,7
msis[j],1
n,34
i--),4
j--),3
collected_code_3/problem-904-2.c:,1
collected_code_3/problem-904-2.c:9:5:,3
'printf',14
"printf(""Enter",4
number:,2
""");",4
collected_code_3/problem-904-2.c:2:1:,1
'<stdio.h>',11
<stdbool.h>,2
collected_code_3/problem-904-2.c:10:5:,4
'scanf',8
&num);,1
^~~~~,6
collected_code_3/problem-480-2.c:,1
'getMaxOccuringChar':,3
collected_code_3/problem-480-2.c:19:12:,2
"printf(""Max",1
occurring,1
"'%c'."",",1
getMaxOccuringChar(str));,1
'getMaxOccuringChar',2
getMaxOccuringChar(char*,1
^~~~~~~~~~~~~~~~~~,5
collected_code_3/problem-743-2.c:,1
collected_code_3/problem-743-2.c:39:19:,1
~~~~~~~~~~~~~~^~~~~~~~~~,2
collected_code_3/problem-757-2.c:,1
'countReversePairs':,1
collected_code_3/problem-757-2.c:9:9:,1
'strrev';,1
did,4
you,8
mean,1
'strsep'?,1
strrev(temp);,1
strsep,1
ld:,2
Undefined,2
symbols:,2
"_strrev,",1
referenced,2
from:,2
_countReversePairs,1
in,17
ccJfa5zH.o,1
collect2:,2
ld,2
returned,2
exit,2
status,2
collected_code_3/problem-946-2.c:,1
'findMostCommon':,3
collected_code_3/problem-946-2.c:19:5:,2
character:,4
"%c,",4
Count:,4
"result,",4
max);,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
"""Hello,",1
"World!"";",1
findMostCommon(str);,1
'findMostCommon',2
findMostCommon(char*,1
collected_code_3/problem-207-2.c:,1
'longestRepeatingSubSeq':,1
collected_code_3/problem-207-2.c:20:28:,1
"max(dp[i][j-1],",1
dp[i-1][j]);,1
collected_code_3/problem-23-2.c:,1
collected_code_3/problem-23-2.c:23:17:,1
"/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/secure/_stdio.h:31,",1
"/usr/local/Cellar/gcc/13.2.0/lib/gcc/current/gcc/x86_64-apple-darwin23/13/include-fixed/stdio.h:433,",1
collected_code_3/problem-821-2.c:1:,1
collected_code_3/problem-821-2.c:,1
'addPair':,3
collected_code_3/problem-821-2.c:19:28:,1
'*dict.size',2
"strcpy(dict->pairs[dict->size].value,",2
value);,2
~~~~^~~~~~,3
mergedDict,1
"mergeDictionaries(dict1,",1
dict2);,1
'mergeDictionaries',3
'mergeDictionaries':,1
mergeDictionaries(Dictionary,1
"dict1,",1
dict2),1
mergedDict;,1
dict1.size;,1
"addPair(&mergedDict,",1
"dict1.pairs[i].key,",1
dict1.pairs[i].value);,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'addPair',2
addPair(Dictionary,1
"*dict,",1
"*key,",1
collected_code_3/problem-718-2.c:,1
collected_code_3/problem-718-2.c:11:21:,1
"push(&head,",1
7);,1
push(struct,1
Node**,1
"head_ref,",1
new_data),1
collected_code_3/problem-412-2.c:,1
'removeOdd':,2
collected_code_3/problem-412-2.c:9:23:,1
'newArr',1
newArr[j],2
int*,16
newArr,1
(int*)malloc(size,1
%,8
'newArr,1
collected_code_3/problem-418-2.c:,1
collected_code_3/problem-418-2.c:11:20:,1
collected_code_3/problem-712-2.c:,1
collected_code_3/problem-712-2.c:49:16:,1
'head',22
head->next,31
createNode(12);,20
createNode(10);,31
'0',75
7-8,4
9-11,3
13-16,6
~~~~~~~~~~~~~^~~~~~~~~~~~~~,3
head->next->next,27
createNode(11);,26
collected_code_3/problem-712-2.c:50:22:,1
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,2
6-7,17
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,2
'*head.next',3
collected_code_3/problem-712-2.c:51:28:,1
head->next->next->next,19
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,2
13-15,10
17-19,3
20-22,3
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,2
'*head_24->next.next',1
collected_code_3/problem-712-2.c:52:34:,1
head->next->next->next->next,13
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,2
16-17,5
18-20,6
22-24,5
25-27,4
29-31,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,2
'*_7->next.next',2
collected_code_3/problem-712-2.c:53:40:,1
head->next->next->next->next->next,5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,1
21-22,2
23-25,2
27-29,2
30-32,1
34-36,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,1
'*_12->next.next',2
collected_code_3/problem-712-2.c:54:46:,1
54,19
head->next->next->next->next->next->next,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,1
28-30,2
32-34,1
35-37,2
39-41,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,1
'*_18->next.next',1
collected_code_3/problem-640-2.c:,3
'removeParenthesis':,4
collected_code_3/problem-640-2.c:6:27:,3
(char*)malloc(strlen(str),7
collected_code_3/problem-640-2.c:3:1:,1
<string.h>,11
collected_code_3/problem-640-2.c:31:5:,4
free(result);,2
collected_code_3/problem-640-2.c:18:23:,1
result[j],12
1-10,2
'('),3
')'),1
if(count,1
collected_code_3/problem-640-2.c:23:15:,1
~~~~~~~~~~^~~~~~,8
collected_code_3/problem-310-2.c:,1
'string_to_tuple':,2
collected_code_3/problem-310-2.c:13:18:,1
'tuple',6
tuple->first,2
malloc(strlen(token),2
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*tuple,2
malloc(sizeof(Tuple));,6
*token,1
"strtok(str,",1
""","");",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-898-2.c:,1
'extractElements':,4
collected_code_3/problem-898-2.c:7:19:,1
arr[start,2
i];,2
~~~~~~~~~~^~~~~~~~~~~~~~~~,1
(int*)malloc(sizeof(int),7
count);,1
count;,5
count')...,1
collected_code_3/problem-727-2.c:,1
'removeSpecialCharacters':,3
collected_code_3/problem-727-2.c:11:25:,1
'output',5
output[j++],2
~~~~~~~~~~~~^~~~~~~~,2
*output,2
malloc(strlen(str),4
while(str[i]),1
if(isalnum((unsigned,1
char)str[i])),1
'output,5
collected_code_3/problem-727-2.c:14:15:,1
output[j],8
collected_code_3/problem-661-2.c:,1
'maxSumWithoutThreeConsecutive':,1
collected_code_3/problem-661-2.c:14:18:,1
sum[2],1
"max(sum[1],",1
max(arr[1],1
"arr[2],",1
arr[0],1
arr[2]));,1
collected_code_3/problem-457-2.c:,1
collected_code_3/problem-457-2.c:11:20:,1
collected_code_3/problem-936-2.c:,1
'rearrange':,2
collected_code_3/problem-936-2.c:13:17:,1
'temp',6
temp[i],2
tuples[order[i]];,2
~~~~~~~~^~~~~~~~~~~~~~~~~~,1
Tuple*,15
(Tuple*)malloc(size,3
'temp,1
collected_code_3/problem-263-2.c:,2
collected_code_3/problem-263-2.c:17:17:,1
malloc(sizeof(KeyValuePair),4
dict1,3
createDictionary(2);,3
'setKeyValuePair':,2
collected_code_3/problem-263-2.c:23:28:,1
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
"setKeyValuePair(dict1,",1
'setKeyValuePair',2
setKeyValuePair(Dictionary*,1
^~~~~~~~~~~~~~~,2
collected_code_3/problem-922-2.c:,1
'maxProductPair':,2
collected_code_3/problem-922-2.c:20:27:,1
'abs',6
0,14
abs(arr[i]),2
abs(nega)),2
collected_code_3/problem-922-2.c:3:1:,1
<limits.h>,2
collected_code_3/problem-325-2.c:,1
'minSquares':,1
collected_code_3/problem-325-2.c:16:19:,1
res,9
"min(res,",1
minSquares(n,1
temp));,1
"_min,",1
_minSquares,1
ccO7VAoB.o,1
collected_code_3/problem-958-2.c:,1
'intToRoman':,4
collected_code_3/problem-958-2.c:12:13:,4
'strcat',5
"strcat(roman,",4
symbol[i]);,4
collected_code_3/problem-958-2.c:3:1:,1
'<string.h>',8
'roman',1
roman,1
(char*)malloc(sizeof(char),17
16);,1
while(num,2
'num,1
|cc1:,6
(3):,1
4-6,1
value[i]),1
~~~~^~~~~~~~~~~,1
num,7
-=,1
value[i];,1
('roman'),1
collected_code_3/problem-415-2.c:,1
collected_code_3/problem-415-2.c:31:27:,1
collected_code_3/problem-415-2.c:3:1:,1
collected_code_3/problem-974-2.c:,1
collected_code_3/problem-974-2.c:19:21:,1
'triangle',5
triangle[i],6
*)malloc((i,6
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**triangle,1
**)malloc(numRows,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
numRows;,5
numRows')...,21
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'triangle,1
collected_code_3/problem-974-2.c:22:20:,1
'*triangle',2
triangle[0][0],5
1-12,5
~~^~~~~~~~~,4
collected_code_3/problem-974-2.c:23:20:,1
'*triangle_47,6
triangle[1][0],2
3;,10
collected_code_3/problem-974-2.c:25:20:,1
triangle[2][0],2
6;,2
collected_code_3/problem-974-2.c:28:20:,1
triangle[3][0],2
4;,2
collected_code_3/problem-367-2.c:,1
collected_code_3/problem-367-2.c:12:16:,1
45,10
collected_code_3/problem-198-2.c:,1
'findLargestTriangle':,3
collected_code_3/problem-198-2.c:24:12:,2
triangle;,6
1-3,13
Triangle,4
Ellipse,2
ellipse,1
"{{0,",1
"0},",3
"5,",3
3};,1
triangle,1
findLargestTriangle(ellipse);,1
'findLargestTriangle',2
findLargestTriangle(struct,1
ellipse),1
collected_code_3/problem-771-2.c:,2
'createStack':,9
collected_code_3/problem-771-2.c:13:16:,1
'stack',10
stack->top,7
Stack*,21
(Stack*)malloc(sizeof(Stack));,2
'areParenthesisBalanced':,3
collected_code_3/problem-771-2.c:47:34:,1
(stack->top,2
areParenthesisBalanced(char,1
exp[]),1
'areParenthesisBalanced',3
createStack();,2
'createStack',17
createStack(),1
collected_code_3/problem-750-2.c:,1
'addTupleToList':,2
collected_code_3/problem-750-2.c:16:19:,1
t;,2
~~~~~~~~~~~~~~^~~,3
collected_code_3/problem-328-2.c:,1
collected_code_3/problem-328-2.c:39:20:,1
collected_code_3/problem-869-2.c:,1
collected_code_3/problem-869-2.c:51:16:,1
createNode(20);,18
if(!newNode),14
~~,1
11-13,1
collected_code_3/problem-869-2.c:52:22:,1
createNode(30);,15
collected_code_3/problem-869-2.c:53:28:,1
createNode(40);,5
'*head.2_7->next.next',1
collected_code_3/problem-869-2.c:54:34:,1
createNode(50);,3
collected_code_3/problem-572-2.c:,1
collected_code_3/problem-572-2.c:31:20:,1
collected_code_3/problem-352-2.c:,1
collected_code_3/problem-352-2.c:20:9:,3
"printf(""All",3
characters,3
"unique.\n"");",3
collected_code_3/problem-352-2.c:3:1:,1
collected_code_3/problem-352-2.c:22:9:,2
not,1
collected_code_3/problem-792-2.c:,1
collected_code_3/problem-792-2.c:27:23:,3
lists[0],2
(List*)malloc(sizeof(List));,4
collected_code_3/problem-792-2.c:2:1:,1
collected_code_3/problem-721-2.c:,1
'findMaxAverage':,1
collected_code_3/problem-721-2.c:19:24:,1
"max(dp[i-1][j],",1
dp[i][j-1]),1
mat[i][j];,1
collected_code_3/problem-115-2.c:,1
collected_code_3/problem-115-2.c:26:17:,1
'dict1',4
dict1->size,2
*dict1,2
collected_code_3/problem-115-2.c:29:17:,1
'dict2',4
dict2->size,2
*dict2,2
collected_code_3/problem-265-2.c:,1
collected_code_3/problem-265-2.c:11:16:,1
temp->data,4
collected_code_3/problem-522-2.c:,1
'longestBitonic':,3
collected_code_3/problem-522-2.c:10:12:,1
'inc',2
inc[0],4
~~~~~~~^~~,2
inc,1
collected_code_3/problem-522-2.c:19:23:,1
'dec',2
max,12
dec[0],2
~~~^~~,1
"printf(""Length",1
Bitonic,1
Subsequence,1
"longestBitonic(arr,",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'longestBitonic',2
longestBitonic(int,1
"arr[],",3
dec,1
inc[i],1
arr[i,4
1]),3
?,6
inc[i,1
1],2
:,6
dec[i],1
dec[i,1
collected_code_3/problem-464-2.c:,1
collected_code_3/problem-464-2.c:33:16:,1
dict->head,2
Dictionary));,1
collected_code_3/problem-464-2.c:36:18:,1
'node1',2
node1->value,2
5;,12
~~~~~~~~~~~~~^~~,9
node1,1
collected_code_3/problem-464-2.c:41:18:,1
'node2',2
node2->value,2
node2,1
collected_code_3/problem-464-2.c:46:18:,1
'node3',2
46,13
node3->value,2
node3,1
collected_code_3/problem-591-2.c:,1
collected_code_3/problem-591-2.c:27:43:,3
collected_code_3/problem-591-2.c:2:1:,1
collected_code_3/problem-591-2.c:28:20:,1
collected_code_3/problem-843-2.c:,3
collected_code_3/problem-843-2.c:13:13:,1
~~~~~~~~^~~,3
'nthSuperUglyNumber':,11
71,7
nthSuperUglyNumber(int,3
"primes,",4
primesSize),3
'nthSuperUglyNumber',20
createHeap();,5
createHeap(),3
'heapify':,5
collected_code_3/problem-843-2.c:28:34:,1
'*h.data[left]',2
(left,4
h->data[left],2
h->data[smallest]),2
~~~~~~~^~~~~~,1
"insertHeap(h,",6
'insertHeap',25
'insertHeap':,14
insertHeap(Heap*,9
val),6
MAX_HEAP_SIZE),3
h->data[h->size++],3
val;,7
h->data[(i,3
2],3
h->data[i]),3
(11):,1
78,4
val,8
deleteHeap(h);,6
'deleteHeap',9
'deleteHeap':,3
16-20,1
55,14
deleteHeap(Heap*,3
h),3
56,10
h->size--;,2
21-28,1
79,2
h->data[0],2
80,2
81,6
count++;,2
82,5
83,3
primesSize;,2
primesSize')...,2
29-34,1
root,2
h->data[0];,1
"heapify(h,",1
'heapify',10
35-38,1
heapify(Heap*,3
i),5
collected_code_3/problem-843-2.c:87:12:,1
87,3
90,3
95,1
"printf(""The",5
%dth,5
super,1
ugly,1
number,4
"%d"",",1
"nthSuperUglyNumber(n,",1
primesSize));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(14):,1
24-29,1
84,9
primes[i]);,2
30-33,1
(34):,1
35-36,1
collected_code_3/problem-585-2.c:,2
collected_code_3/problem-585-2.c:12:16:,1
'heap',8
heap->data,6
(int*)malloc(capacity,6
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
"findNExpensiveItems(prices,",2
'findNExpensiveItems',8
'findNExpensiveItems':,3
findNExpensiveItems(int*,2
"prices,",2
capacity),11
collected_code_3/problem-585-2.c:49:34:,1
'*heap.data,4
int)*heap.size,4
heap->data[heap->size++],2
value;,6
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~,1
"insert(heap,",1
prices[i]);,1
11-14,3
"heap,",9
(heap->size,5
heap->capacity),2
collected_code_3/problem-120-2.c:,1
'maxProduct':,1
collected_code_3/problem-120-2.c:13:19:,1
max_val,1
"max(max(end_max,",1
"end_min),",2
collected_code_3/problem-120-2.c:14:19:,1
min_val,1
"min(min(end_max,",1
collected_code_3/problem-536-2.c:,1
collected_code_3/problem-536-2.c:25:26:,3
collected_code_3/problem-536-2.c:2:1:,1
collected_code_3/problem-536-2.c:44:5:,4
free(head);,1
collected_code_3/problem-536-2.c:29:16:,1
head->data,6
~~~~~~~~~~~^~~,4
collected_code_3/problem-536-2.c:32:18:,1
'second',6
second->data,6
second,2
collected_code_3/problem-536-2.c:35:17:,1
'third',6
third->data,6
third,2
collected_code_3/problem-700-2.c:,1
collected_code_3/problem-700-2.c:20:39:,3
collected_code_3/problem-700-2.c:2:1:,1
collected_code_3/problem-700-2.c:21:16:,1
collected_code_3/problem-610-2.c:,1
collected_code_3/problem-610-2.c:27:21:,1
collected_code_3/problem-206-2.c:,2
'concatenateAdjacent':,2
collected_code_3/problem-206-2.c:8:19:,1
(strlen(tuples[i]),2
strlen(tuples[i+1]),2
1));,4
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(char**)malloc(sizeof(char*),4
(size,3
size,4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-206-2.c:18:15:,1
'tuples',3
tuples[0],2
"""Hello"";",4
~~~~~~~~~~^~~~~~~~~,3
tuples,1
collected_code_3/problem-604-2.c:,2
'reverseWords':,1
collected_code_3/problem-604-2.c:11:13:,2
'reverse',2
"reverse(word_begin,",2
temp-1);,2
At,2
top,2
level:,2
collected_code_3/problem-604-2.c:22:6:,1
'reverse';,1
'void(char,2
*)',2
reverse(char,1
"*begin,",1
*end),1
collected_code_3/problem-118-2.c:,1
'stringToList':,2
collected_code_3/problem-118-2.c:16:23:,1
*str++;,2
~~~~~~~~~~~~~~^~~~~~~~,2
(*str),2
collected_code_3/problem-469-2.c:,1
'maxProfit':,7
collected_code_3/problem-469-2.c:15:15:,1
'dp',4
dp[i],6
(int*)malloc(pricesSize,6
~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
if(pricesSize,6
'pricesSize,6
if(k,6
pricesSize,6
2),8
int**,26
dp,6
(int**)malloc((k,6
sizeof(int*));,13
k')...,19
'dp,1
collected_code_3/problem-469-2.c:18:33:,2
'**_33',2
localMax,4
dp[i,4
1][0],4
prices[0];,4
~~~~~~~~~^~~,3
'*dp_97,4
_32',2
collected_code_3/problem-469-2.c:24:14:,1
_74',2
dp[k][pricesSize,6
1];,8
~~^~~,3
collected_code_3/problem-469-2.c:24:17:,2
~~~~~^~~~~~~~~~~~~~~~,2
1-13,1
collected_code_3/problem-696-2.c:,2
collected_code_3/problem-696-2.c:11:16:,1
'zipLists':,7
collected_code_3/problem-696-2.c:31:16:,1
head->next;,2
zippedList,1
"zipLists(list1,",1
list2);,1
'zipLists',4
zipLists(Node*,1
"list1,",1
list2),1
newNode(0);,2
(list1,7
list2,8
'list1',11
list1;,3
(list2,3
'list2',8
list2;,3
15-20,1
21-26,1
collected_code_3/problem-834-2.c:,1
'generateSpiralMatrix':,7
collected_code_3/problem-834-2.c:7:19:,1
'matrix',2
matrix[i],5
*)malloc(n,6
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**matrix,6
**)malloc(n,6
'matrix,2
collected_code_3/problem-834-2.c:16:19:,2
'*matrix_83,6
_11',2
matrix[rowStart][i],6
value++;,6
~~~~~~^~~~~~~~~~,2
generateSpiralMatrix(n);,5
'generateSpiralMatrix',10
generateSpiralMatrix(int,5
(value,5
colStart;,3
colEnd;,3
colEnd')...,3
int)rowStart,1
collected_code_3/problem-834-2.c:16:33:,1
_11,2
~~~~~~~~~~~~~~~~~~~~^~~~~~~~~,1
collected_code_3/problem-834-2.c:38:13:,2
'*_45,2
_47',2
"printf(""%d",4
""",",6
matrix[i][j]);,4
_43,2
collected_code_3/problem-36-2.c:,1
'findNthDigit':,3
collected_code_3/problem-36-2.c:9:12:,2
'digit',4
digit;,6
digit,1
fraction,1
%d/%d,1
is:,2
"numerator,",2
"denominator,",3
"findNthDigit(numerator,",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'findNthDigit',2
findNthDigit(int,1
collected_code_3/problem-413-2.c:,1
collected_code_3/problem-413-2.c:20:23:,1
list[i].first,3
list,2
collected_code_3/problem-413-2.c:27:9:,1
'*nthElement.second',2
element,2
"(%d,",4
"%d)\n"",",4
"nthElement->first,",2
nthElement->second);,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
1-9,2
nthElement,2
"extractNthElement(list,",2
"size,",14
'extractNthElement',3
'extractNthElement':,1
10-12,2
extractNthElement(Tuple*,1
"list,",3
(n,4
&list[n];,1
(nthElement,1
'nthElement',1
collected_code_3/problem-893-2.c:,1
collected_code_3/problem-893-2.c:25:26:,3
collected_code_3/problem-893-2.c:2:1:,1
collected_code_3/problem-893-2.c:29:16:,1
collected_code_3/problem-893-2.c:32:18:,1
collected_code_3/problem-893-2.c:35:17:,1
collected_code_3/problem-361-2.c:,2
collected_code_3/problem-361-2.c:16:19:,1
~~~~~~~~~~~~~~^~~~~~,12
'createList':,4
collected_code_3/problem-361-2.c:23:19:,1
'newList',6
newList->head,4
List*,2
newList,7
collected_code_3/problem-966-2.c:,1
collected_code_3/problem-966-2.c:30:16:,1
list->size,2
TupleList,9
*list,1
malloc(sizeof(TupleList));,1
collected_code_3/problem-966-2.c:34:18:,1
'tuple1',2
tuple1->size,2
*tuple1,1
collected_code_3/problem-966-2.c:38:18:,1
'tuple2',2
tuple2->size,2
*tuple2,1
collected_code_3/problem-966-2.c:40:25:,1
'*tuple2.elements',2
tuple2->elements[0],2
~~~~~~~~~~~~~~~~~~~~^~~,1
tuple2->elements,1
tuple2->size);,1
collected_code_3/problem-966-2.c:44:18:,1
'tuple3',2
tuple3->size,2
*tuple3,1
collected_code_3/problem-966-2.c:47:21:,1
'*list.tuples',2
list->tuples[0],2
tuple1;,2
~~~~~~~~~~~~~~~~^~~~~~~~,1
malloc(sizeof(Tuple*),1
list->size);,1
collected_code_3/problem-157-2.c:,1
'runLengthEncoding':,3
collected_code_3/problem-157-2.c:15:25:,1
result[j++],2
count,2
'0';,2
~~~~~~~~~~~~^~~~~~~~~~~~~,1
(str[i],7
str[i,1
collected_code_3/problem-157-2.c:21:15:,1
"""aaabbbccc"";",1
encodedStr,1
runLengthEncoding(str);,1
'runLengthEncoding',2
runLengthEncoding(char*,1
collected_code_3/problem-110-2.c:,2
'findMissingRanges':,12
collected_code_3/problem-110-2.c:8:27:,1
'returnSize',3
returnSize[j],9
(int*)malloc(2,9
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
returnSize,6
(int**)malloc(numsSize,6
"findMissingRanges(nums,",12
"lower,",20
"upper,",20
returnSize);,12
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
'findMissingRanges',20
4-15,1
findMissingRanges(int*,8
returnSize),8
(nums[i],17
lower),9
'returnSize,3
upper),14
lower,8
nums[i],8
collected_code_3/problem-110-2.c:9:30:,2
'*returnSize',1
returnSize[j][0],6
lower;,6
~~^~~~~~~~~~,1
'*returnSize_57(D),5
collected_code_3/problem-110-2.c:19:23:,1
4-13,1
(lower,6
'lower,6
upper')...,6
collected_code_3/problem-110-2.c:20:26:,1
_36',2
collected_code_3/problem-110-2.c:31:47:,4
'*returnSize_34,6
_19',6
numsSize,8
returnSize[i],8
~~~~~~~~~~^~~,5
4-11,2
(12):,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
4-12,1
4-16,1
collected_code_3/problem-921-2.c:,1
'chunk_tuples':,3
collected_code_3/problem-921-2.c:14:24:,1
'chunks',1
chunks[i].size,3
*chunk_count,3
arr_size,6
~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*chunks,1
(Tuple*)malloc(*chunk_count,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
*chunk_count;,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'chunks,1
collected_code_3/problem-921-2.c:18:35:,1
'*chunks_52,2
_29.elements,2
chunks[i].elements[j],2
j];,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,2
chunks[i].elements,1
(int*)malloc(chunks[i].size,1
chunks[i].size;,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
collected_code_3/problem-326-2.c:,2
'getMostFrequentWord':,1
collected_code_3/problem-326-2.c:40:12:,1
returns,2
address,2
local,2
variable,2
[-Wreturn-local-addr],2
wc[maxCountIndex].word;,1
^~,6
collected_code_3/problem-326-2.c:50:20:,1
'strings',1
strings[i],2
(char*)malloc(MAX_WORD_LENGTH,2
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(char**)malloc(n,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'strings,1
collected_code_3/problem-260-2.c:,1
'newman_shanks_williams':,3
collected_code_3/problem-260-2.c:13:12:,2
'c',4
c;,6
1-7,1
"1,",4
b,2
Newman-Shanks-Williams,1
prime,1
newman_shanks_williams(n));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'newman_shanks_williams',2
3-10,2
newman_shanks_williams(int,1
collected_code_3/problem-783-2.c:,1
'rgb2hsv':,1
collected_code_3/problem-783-2.c:38:17:,2
'NAN',1
undeclared,5
(first,3
function),3
out.h,1
NAN;,1
each,4
identifier,2
reported,2
once,2
appears,2
collected_code_3/problem-65-2.c:,1
collected_code_3/problem-65-2.c:16:44:,3
collected_code_3/problem-65-2.c:2:1:,1
collected_code_3/problem-65-2.c:17:20:,1
collected_code_3/problem-730-2.c:,1
collected_code_3/problem-730-2.c:30:21:,1
collected_code_3/problem-348-2.c:,2
'countSeq':,1
collected_code_3/problem-348-2.c:11:17:,1
subscripted,3
neither,3
array,7
nor,6
vector,3
(arr[len][sum],2
collected_code_3/problem-348-2.c:12:24:,1
arr[len][sum];,1
collected_code_3/problem-348-2.c:16:21:,1
res);,3
'countSeqUtil':,1
collected_code_3/problem-348-2.c:26:25:,1
passing,1
'countSeq',1
[-Wincompatible-pointer-types],1
+=,2
"countSeq(arr,",1
"len,",2
sum);,1
(*)[1000],1
collected_code_3/problem-348-2.c:6:18:,1
'int,2
*',1
(*)[1000]',1
countSeq(int,1
sum),1
~~~~^~~~~,1
collected_code_3/problem-618-2.c:,3
'divideLists':,4
collected_code_3/problem-618-2.c:4:31:,3
double*,4
(double*)malloc(size,4
sizeof(double));,4
collected_code_3/problem-618-2.c:2:1:,1
collected_code_3/problem-618-2.c:23:5:,4
collected_code_3/problem-618-2.c:7:23:,1
list1[i],2
list2[i];,2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~,1
if(list2[i],2
collected_code_3/problem-618-2.c:9:23:,1
collected_code_3/problem-196-2.c:,1
'removeTuples':,2
collected_code_3/problem-196-2.c:16:26:,1
'newTuples',2
newTuples[j],2
~~~~~~~~~~~~~^~~~~~~~~~~,1
*newTuples,4
(Tuple*)malloc(sizeof(Tuple),4
tupleCount);,1
tupleCount;,1
tupleCount')...,1
if(tuples[i].length,1
'newTuples,2
collected_code_3/problem-533-2.c:,1
collected_code_3/problem-533-2.c:40:26:,1
'tuple.strings',1
tuple.strings[i],2
malloc(sizeof(char),2
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~,1
tuple.strings,1
malloc(sizeof(char*),1
5);,1
4')...,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
'tuple.strings,1
collected_code_3/problem-852-2.c:,1
collected_code_3/problem-852-2.c:33:16:,1
collected_code_3/problem-484-2.c:,1
'removeMatchingTuples':,2
collected_code_3/problem-484-2.c:22:29:,1
result[index++],4
tuple1[i];,2
~~~~~~~~~~~~~~~~^~~~~~~~~~~,2
size1);,2
size1;,2
size1')...,2
if(!found),1
collected_code_3/problem-729-2.c:,1
collected_code_3/problem-729-2.c:11:16:,1
first,1
newNode(2);,1
collected_code_3/problem-423-2.c:,1
'goldMine':,1
collected_code_3/problem-423-2.c:8:5:,3
'memset',8
"memset(goldTable,",2
sizeof(goldTable));,2
collected_code_3/problem-423-2.c:3:1:,1
collected_code_3/problem-938-2.c:,1
'findClosest':,1
collected_code_3/problem-938-2.c:9:23:,1
minimum,1
"min(A[i],",1
"min(B[j],",1
C[k]));,2
collected_code_3/problem-938-2.c:10:23:,1
maximum,1
"max(A[i],",1
"max(B[j],",1
collected_code_3/problem-708-2.c:,1
'convertStringToList':,2
collected_code_3/problem-708-2.c:16:23:,1
*str;,2
collected_code_3/problem-27-2.c:,2
'removeDigits':,4
collected_code_3/problem-27-2.c:10:20:,1
newList[i],4
malloc(len,4
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**newList,2
len,3
strlen(strList[i]);,3
'newList,2
collected_code_3/problem-27-2.c:14:37:,1
'*newList_52,4
_29,2
(sizetype)index',7
newList[i][index++],2
strList[i][j];,2
~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
if(!isdigit(strList[i][j])),1
collected_code_3/problem-27-2.c:17:27:,1
_37,2
newList[i][index],2
~~~~~~~~~~~~~~~~~~^~~~~~,1
collected_code_3/problem-27-2.c:25:16:,1
'strList',2
strList[0],2
"""abc123"";",2
~~~~~~~~~~~^~~~~~~~~~,1
**strList,1
collected_code_3/problem-128-2.c:,1
'shortlist_words':,2
collected_code_3/problem-128-2.c:11:51:,1
'shortlisted_words',1
shortlisted_words[*shortlisted_count],2
words[i];,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
**shortlisted_words,1
(char,1
**)malloc(sizeof(char,1
word_count);,1
word_count;,1
word_count')...,1
(strlen(words[i]),1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'shortlisted_words,1
int)*shortlisted_count,1
collected_code_3/problem-772-2.c:,1
'removeWords':,6
collected_code_3/problem-772-2.c:12:32:,1
word[wordLength++],3
~~~~~~~~~~~~~~~~~~~^~~~~~~~,3
'),3
(sizetype)wordLength',2
collected_code_3/problem-772-2.c:15:34:,1
word[wordLength],2
(wordLength,2
'wordLength,2
collected_code_3/problem-772-2.c:29:19:,1
"removeWords(str,",1
'removeWords',2
removeWords(char*,1
"str,",1
collected_code_3/problem-544-2.c:,2
'flattenTupleList':,2
collected_code_3/problem-544-2.c:19:15:,1
result[0],4
*result,4
(totalLength,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
collected_code_3/problem-544-2.c:32:30:,1
'tupleList[0].elements',2
tupleList[0].elements[0],2
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~,1
tupleList[0].elements,1
collected_code_3/problem-544-2.c:36:30:,1
'tupleList[1].elements',2
tupleList[1].elements[0],2
"""Flatten"";",2
tupleList[1].elements,1
collected_code_3/problem-620-2.c:,1
'largestDivisibleSubset':,7
collected_code_3/problem-620-2.c:10:18:,1
'count',6
count[i],5
(numsSize,6
'numsSize,6
*count,6
(int*)malloc(sizeof(int)*numsSize);,9
collected_code_3/problem-620-2.c:11:16:,1
'pre',6
pre[i],4
~~~~~~~^~~~,1
*pre,3
'pre,1
collected_code_3/problem-620-2.c:25:12:,4
max;,8
1-11,2
(count[i],2
max),2
count[i];,2
collected_code_3/problem-854-2.c:,2
collected_code_3/problem-854-2.c:12:16:,1
"listToHeap(list,",2
'listToHeap',8
'listToHeap':,3
listToHeap(int*,2
createHeap(size);,3
collected_code_3/problem-854-2.c:46:28:,1
heap->data[heap->size],2
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~,1
"insertHeap(heap,",8
list[i]);,1
collected_code_3/problem-779-2.c:,2
collected_code_3/problem-779-2.c:16:19:,1
collected_code_3/problem-779-2.c:23:19:,1
collected_code_3/problem-473-2.c:,1
'findIntersection':,2
collected_code_3/problem-473-2.c:17:29:,1
result[k++],2
list1[i];,2
~~~~~~~~~~~~^~~~~~~~~~,1
for(j,3
size2;,1
size2')...,1
if((list1[i].first,1
list2[j].first,1
list1[i].second,2
list2[j].second),1
(list1[i].first,1
list2[j].second,1
list2[j].first)),1
int)k,1
collected_code_3/problem-889-2.c:,1
collected_code_3/problem-889-2.c:43:16:,1
createNode(2);,9
~~~~~~~~~~~^~~~~~~~~~~~~~~,1
createNode(1);,8
~~~~~~~~~~~~~^~~~~~~~~~~~~,1
createNode(3);,8
collected_code_3/problem-889-2.c:44:22:,1
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
collected_code_3/problem-889-2.c:45:28:,1
createNode(4);,5
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
'*head_13->next.next',1
collected_code_3/problem-889-2.c:46:34:,1
createNode(5);,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
collected_code_3/problem-301-2.c:,1
collected_code_3/problem-301-2.c:19:23:,1
dict1->nestedDict,2
dict2;,2
~~~~~~~~~~~~~~~~~~^~~~~~~,2
(Dictionary*)malloc(sizeof(Dictionary));,3
collected_code_3/problem-301-2.c:20:23:,1
dict2->nestedDict,2
dict3;,2
collected_code_3/problem-301-2.c:21:23:,1
'dict3',2
dict3->nestedDict,2
*dict3,1
collected_code_3/problem-393-2.c:,1
collected_code_3/problem-393-2.c:19:42:,3
collected_code_3/problem-393-2.c:2:1:,1
collected_code_3/problem-393-2.c:20:19:,1
collected_code_3/problem-500-2.c:,1
'concatenateList':,2
collected_code_3/problem-500-2.c:12:15:,1
malloc(totalLength,1
collected_code_3/problem-927-2.c:,1
collected_code_3/problem-927-2.c:12:16:,1
collected_code_3/problem-102-2.c:,3
'snakeToCamel':,10
collected_code_3/problem-102-2.c:8:30:,3
camel_str,6
len);,5
collected_code_3/problem-102-2.c:4:1:,1
<ctype.h>,2
collected_code_3/problem-102-2.c:29:5:,4
free(camel_str);,1
collected_code_3/problem-102-2.c:13:26:,1
'camel_str',3
camel_str[j],6
toupper(snake_str[i]);,2
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~,1
if(snake_str[i],2
'_'),4
i++;,2
'camel_str,3
collected_code_3/problem-102-2.c:15:26:,1
snake_str[i];,2
collected_code_3/problem-102-2.c:19:18:,1
~~~~~~~~~~~~~^~~~~~,1
snakeToCamel(snake_str);,1
'snakeToCamel',2
snakeToCamel(char*,1
snake_str),1
collected_code_3/problem-933-2.c:,1
'camel_to_snake':,4
collected_code_3/problem-933-2.c:13:27:,1
'_';,4
~~~~~~~~~~~~~~^~~~~,1
(2,3
length));,3
if(isupper(input[i])),2
collected_code_3/problem-933-2.c:17:27:,1
input[i];,4
collected_code_3/problem-933-2.c:21:19:,1
collected_code_3/problem-791-2.c:,1
collected_code_3/problem-791-2.c:23:31:,1
'tuple.nestedRecord',1
tuple.nestedRecord[i],2
~~~~~~~~~~~~~~~~~~~~~~^~~,2
tuple.nestedRecord,1
(int*),5
malloc(tuple.nestedRecordSize,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
tuple.nestedRecordSize;,1
'tuple.nestedRecord,1
collected_code_3/problem-272-2.c:,1
collected_code_3/problem-272-2.c:20:22:,1
'records',2
records[i].a,3
records,2
'records,2
collected_code_3/problem-272-2.c:26:9:,1
'*rearElement.b',2
"printf(""Rear",2
element:,2
"rearElement->a,",2
rearElement->b);,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
rearElement,2
"extractRearElement(records,",2
'extractRearElement',3
'extractRearElement':,1
extractRearElement(Tuple*,1
"records,",1
'size,1
&records[size,1
(rearElement,1
'rearElement',1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-297-2.c:,1
collected_code_3/problem-297-2.c:11:19:,1
collected_code_3/problem-542-2.c:,1
'replace_with_colon':,1
collected_code_3/problem-542-2.c:13:9:,3
'exit',8
exit(1);,4
collected_code_3/problem-542-2.c:4:1:,1
<regex.h>,2
collected_code_3/problem-362-2.c:,1
'maxOccurrence':,3
collected_code_3/problem-362-2.c:5:18:,2
'*arr',2
"arr[0],",6
arr,4
(int*)malloc(n,2
maxOccur,2
"maxOccurrence(arr,",2
'maxOccurrence',4
maxOccurrence(int*,2
"arr,",7
'arr',4
collected_code_3/problem-154-2.c:,2
collected_code_3/problem-154-2.c:11:33:,1
arr[i][j];,2
(int*)malloc((*size),1
if((i,1
cols,4
collected_code_3/problem-154-2.c:22:16:,1
arr[i],3
(int*)malloc(cols,3
~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(int**)malloc(rows,1
'arr,2
collected_code_3/problem-154-2.c:24:23:,1
'*arr_41,2
_12,2
arr[i][j],2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-965-2.c:,1
'camelToSnake':,4
collected_code_3/problem-965-2.c:11:23:,1
~~~~~~~~~~^~~~~,1
output,3
256);,3
(input[i]),3
(isupper(input[i])),2
collected_code_3/problem-965-2.c:15:23:,1
~~~~~~~~~~^~~~~~~~~~,1
collected_code_3/problem-965-2.c:20:15:,1
collected_code_3/problem-538-2.c:,1
'create_tuple':,5
collected_code_3/problem-538-2.c:12:18:,1
tuple->items,3
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-538-2.c:16:25:,1
'*tuple.items,2
tuple->items[i],2
malloc((strlen(list[i]),2
~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-971-2.c:,1
'maxSegments':,1
collected_code_3/problem-971-2.c:8:15:,1
"max(maxSegments(n-a,",1
"a,",4
"b,",3
"c),",2
"maxSegments(n-b,",1
"maxSegments(n-c,",1
c));,1
collected_code_3/problem-140-2.c:,1
collected_code_3/problem-140-2.c:11:16:,1
collected_code_3/problem-482-2.c:,1
'find_sequences':,1
collected_code_3/problem-482-2.c:13:9:,3
collected_code_3/problem-482-2.c:4:1:,1
collected_code_3/problem-161-2.c:,2
collected_code_3/problem-161-2.c:11:19:,1
'removeElements':,3
collected_code_3/problem-161-2.c:46:21:,1
'prev',4
current,2
prev->next;,2
~~~~~~~~^~~~~~~~~~~~,1
(temp,1
prev,1
4-10,1
(current,1
'current',1
(current->data,1
temp->data),1
(prev,1
*firstList,1
current->next;,1
collected_code_3/problem-788-2.c:,1
collected_code_3/problem-788-2.c:13:16:,1
tuple->str,2
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~,1
tuple,1
collected_code_3/problem-425-2.c:,1
collected_code_3/problem-425-2.c:9:42:,3
collected_code_3/problem-425-2.c:2:1:,1
collected_code_3/problem-425-2.c:10:19:,1
collected_code_3/problem-175-2.c:,3
collected_code_3/problem-175-2.c:13:21:,1
stack->capacity,3
capacity;,3
'isValid':,11
isValid(char*,5
s),5
'isValid',21
strlen(s);,5
createStack(n);,9
createStack(unsigned,5
(Stack*),2
malloc(sizeof(Stack));,2
collected_code_3/problem-175-2.c:24:23:,3
~~~~~~~~~~~^~~~~,4
(isValid(s)),4
stack->array,3
(char*),3
malloc(stack->capacity,3
'isEmpty':,3
(s[i],2
"push(stack,",3
s[i]);,3
push(Stack*,2
"stack,",2
stack->array[++stack->top],3
'*stack.array,3
(sizetype)*stack.top',3
collected_code_3/problem-175-2.c:30:32:,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~,1
(isFull(stack)),1
collected_code_3/problem-802-2.c:,1
'countRotations':,3
collected_code_3/problem-802-2.c:11:12:,2
'min_index',4
min_index;,6
min,2
"printf(""%d"",",1
"countRotations(arr,",1
'countRotations',2
countRotations(int,1
(min,1
collected_code_3/problem-513-2.c:,1
'convert_tuple_to_list':,2
collected_code_3/problem-513-2.c:9:17:,1
list[j],2
malloc(strlen(tuple[i]),2
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
malloc(sizeof(char,3
collected_code_3/problem-380-2.c:,1
'generate2DArray':,3
collected_code_3/problem-380-2.c:7:18:,1
'array',1
array[i],3
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**array,3
i=0;,3
i<rows;,3
'array,1
collected_code_3/problem-380-2.c:11:25:,1
'*array_26,2
array[i][j],2
~~~~~~~~~~~~^~~~~~~,1
rows,1
"generate2DArray(rows,",1
cols);,1
'generate2DArray',2
3-21,1
generate2DArray(int,1
"rows,",1
cols),1
j=0;,3
j<cols;,1
collected_code_3/problem-70-2.c:,1
collected_code_3/problem-70-2.c:23:23:,1
tuples[i].len,2
*tuples,1
malloc(n,3
sizeof(struct,1
Tuple));,1
'tuples,1
collected_code_3/problem-920-2.c:,2
'removeNoneTuples':,10
collected_code_3/problem-920-2.c:35:35:,1
newTuples[newIndex++],2
list.tuples[i];,2
removeNoneTuples(list);,5
'removeNoneTuples',20
removeNoneTuples(TupleList,3
list),3
noneCount,3
list.size;,8
(isNoneTuple(list.tuples[i])),6
'isNoneTuple',18
'isNoneTuple':,6
7-11,3
isNoneTuple(Tuple,6
(tuple.values[i],6
12-16,3
malloc((list.size,3
noneCount),3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
newIndex,3
(!isNoneTuple(list.tuples[i])),6
17-21,3
22-25,1
int)newIndex,1
collected_code_3/problem-920-2.c:55:46:,2
'*_10,2
_12.size',2
newList.tuples[i].size;,4
~~~~~~~~~~~~~~~~~^~~~~,2
25-28,2
newList.size;,2
'newList.tuples',1
'newList.tuples,1
collected_code_3/problem-507-2.c:,1
'removeWord':,2
collected_code_3/problem-507-2.c:11:12:,1
'*words_29(D),1
_2',1
"if(strcmp(words[i],",2
word),3
1-15,1
words[i],1
strdup(words[i]);,1
"removeWord(words,",1
"&size,",1
'removeWord',2
16-19,1
removeWord(char*,1
"words[],",1
*size;,1
('*words_29(D),1
_2'),1
collected_code_3/problem-507-2.c:2:,1
collected_code_3/problem-240-2.c:,1
collected_code_3/problem-240-2.c:11:19:,1
collected_code_3/problem-130-2.c:,1
'findMaxFrequency':,2
collected_code_3/problem-130-2.c:13:23:,1
'freq',1
freq[i].value,2
freq,1
Item*)malloc(sizeof(struct,1
Item),1
"i,",3
"j,",1
maxCountIndex,1
'freq,1
collected_code_3/problem-829-2.c:,2
'second_most_repeated':,5
collected_code_3/problem-829-2.c:47:12:,1
wc[second_max].str;,2
collected_code_3/problem-829-2.c:54:5:,1
'res',1
[-Wanalyzer-null-argument],1
"second_most_repeated(str,",2
'second_most_repeated',5
second_most_repeated(char*,1
"find_index(wc,",2
"distinct_word_count,",2
str[i]);,3
'find_index',3
'find_index':,1
find_index(WordCount,1
"wc[],",1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
if(index,1
"strcpy(wc[distinct_word_count].str,",1
~~~~~~~~~~~~~~~~~~~~~~~^~~~,1
('res'),1
collected_code_3/problem-548-2.c:,1
'longestIncreasingSubsequence':,2
collected_code_3/problem-548-2.c:9:16:,1
'lis',1
lis[i],2
lis,1
malloc,1
(sizeof(int),1
i++,1
),1
'lis,1
collected_code_3/problem-943-2.c:,1
collected_code_3/problem-943-2.c:30:20:,1
collected_code_3/problem-108-2.c:,4
'createIterator':,2
collected_code_3/problem-108-2.c:17:13:,1
'it',2
it->arr,2
arr;,2
~~~~~~~~^~~~~,1
101,4
113,4
"mergeSortedArrays(arr,",4
"input,",8
"lengths,",8
4);,4
'mergeSortedArrays',23
'mergeSortedArrays':,11
mergeSortedArrays(int*,4
"createIterator(input[i],",7
lengths[i]));,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
'createIterator',2
Iterator*,11
createIterator(int*,1
(Iterator*)malloc(sizeof(Iterator));,1
collected_code_3/problem-108-2.c:25:15:,1
heap->arr,3
(Iterator**)malloc(sizeof(Iterator*),3
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-108-2.c:55:18:,1
'*heap.arr,2
heap->arr[i],2
it;,2
~~~~~~~~~~~~~^~~~,1
it),5
heap->size;,1
collected_code_3/problem-108-2.c:92:22:,1
92,2
arr[index++],2
it->arr[it->index];,2
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~,1
111,1
112,1
heap->arr[(i,4
2]->arr[heap->arr[(i,4
2]->index],4
heap->arr[i]->arr[heap->arr[i]->index]),4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
heap->size++;,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
15-19,1
20-23,1
24-28,1
29-32,2
33-37,1
38-43,1
86,1
88,1
extractMin(heap);,2
(42),1
(43),1
'extractMin',5
'extractMin':,2
44-49,1
extractMin(Heap*,1
heap),1
(44),1
(45),1
heap->arr[0];,1
(46),1
(47),1
heap->arr[0],1
heap->arr[heap->size,1
(48),1
"heapify(heap,",4
(49),1
50-59,1
(50),1
heap->size,6
heap->arr[left]->arr[heap->arr[left]->index],2
heap->arr[smallest]->arr[heap->arr[smallest]->index]),4
(51),1
smallest,1
left;,1
(52),1
(right,2
heap->arr[right]->arr[heap->arr[right]->index],2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(54),1
(55),1
(53),1
(smallest,2
(56),1
(57),1
'smallest,2
"swap(&heap->arr[i],",1
&heap->arr[smallest]);,1
(58),1
smallest);,2
(59),1
60-68,1
(60),1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
(62),1
(63),1
(61),1
(64),1
(65),1
(66),1
(67),1
(68),1
(69),1
(70),1
71-72,1
(71),1
91,1
(72),1
collected_code_3/problem-2-2.c:,1
'find_similar':,2
collected_code_3/problem-2-2.c:16:33:,1
result[count++],4
t1.data[i];,2
~~~~~~~~~~~~~~~~^~~~~~~~~~~~,1
(t1.length,1
t2.length,1
t1.length,1
t2.length));,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
t1.length;,1
t2.length;,1
(t1.data[i],1
t2.data[j]),1
collected_code_3/problem-570-2.c:,1
collected_code_3/problem-570-2.c:11:28:,1
newList[count],2
malloc(strlen(strList[i]),2
~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
malloc(listSize,1
listSize;,2
listSize')...,2
"if(strstr(strList[i],",1
target),1
collected_code_3/problem-350-2.c:,1
collected_code_3/problem-350-2.c:34:18:,1
'tolower',2
tolower(str[i]);,1
collected_code_3/problem-350-2.c:3:1:,1
'<ctype.h>',1
collected_code_3/problem-957-2.c:,1
'rightmostSetBitPos':,1
collected_code_3/problem-957-2.c:4:12:,3
'log2',4
log2(n,2
&,2
-n),2
collected_code_3/problem-957-2.c:2:1:,1
collected_code_3/problem-237-2.c:,1
'checkOccurrences':,2
collected_code_3/problem-237-2.c:14:26:,1
if(records[i].count,2
records[j].count),2
Record,1
*records,1
(Record,1
sizeof(Record));,1
"if(checkOccurrences(records,",1
n)),1
'checkOccurrences',2
4-9,3
checkOccurrences(Record,1
"*records,",1
56',1
collected_code_3/problem-824-2.c:,1
collected_code_3/problem-824-2.c:33:20:,1
collected_code_3/problem-26-2.c:,1
collected_code_3/problem-26-2.c:24:31:,1
'tupleList',1
tupleList[i].elements,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~,1
*tupleList,1
malloc(sizeof(Tuple),1
listSize);,1
'tupleList,1
collected_code_3/problem-290-2.c:,2
'findMaxLists':,2
collected_code_3/problem-290-2.c:21:42:,1
'maxLists',1
maxLists[(*maxListsCount)++],2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
**maxLists,1
sizeof(List,2
*maxListsCount,1
(lists[i]->length,1
maxLength),1
'maxLists,1
int)*maxListsCount,1
collected_code_3/problem-290-2.c:32:18:,1
collected_code_3/problem-290-2.c:33:26:,1
'*lists_74,2
collected_code_3/problem-290-2.c:36:35:,1
'**_26.elements,2
lists[i]->elements[j],2
lists[i]->elements,1
malloc(lists[i]->length,1
lists[i]->length;,1
collected_code_3/problem-635-2.c:,2
'createMinHeap':,3
collected_code_3/problem-635-2.c:12:18:,1
'minHeap',2
minHeap->arr,3
malloc(sizeof(int)*capacity);,3
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
MinHeap*,7
minHeap,5
createMinHeap(11);,3
'createMinHeap',5
createMinHeap(int,2
(MinHeap*),2
malloc(sizeof(MinHeap));,2
collected_code_3/problem-635-2.c:48:21:,1
'*minHeap.arr,2
minHeap->arr[i],2
~~~~~~~~~~~~~~~~^~~~~,1
"insert(minHeap,",1
3);,1
insert(MinHeap*,1
"minHeap,",1
(minHeap->count,1
minHeap->capacity),1
minHeap->count++;,1
minHeap->count,1
collected_code_3/problem-918-2.c:,1
'countChange':,1
collected_code_3/problem-918-2.c:5:5:,3
"memset(table,",2
sizeof(table));,2
collected_code_3/problem-918-2.c:2:1:,1
collected_code_3/problem-129-2.c:,1
'generateSquare':,4
collected_code_3/problem-129-2.c:19:32:,2
'*magicSquare[i][j]',6
(magicSquare[(int)i][(int)j]),4
magicSquare[n][n];,3
n;),3
-1,2
generateSquare(n);,1
'generateSquare',2
generateSquare(int,1
collected_code_3/problem-129-2.c:34:13:,1
"printf(""%3d",2
magicSquare[i][j]);,2
collected_code_3/problem-699-2.c:,1
'minSwaps':,1
collected_code_3/problem-699-2.c:14:31:,1
(count1,1
count2,1
abs(count1,1
count2)),1
collected_code_3/problem-699-2.c:3:1:,1
collected_code_3/problem-969-2.c:,1
'joinTuples':,2
collected_code_3/problem-969-2.c:22:33:,1
newTuple;,3
"joinTuples(tuples,",1
&newSize);,1
'joinTuples',2
joinTuples(Tuple,1
"*tuples,",1
*newSize),1
"if(strcmp(tuples[i].first,",1
tuples[j].first),1
equal)...,1
newTuple.first,1
collected_code_3/problem-57-2.c:,1
'findLargestNum':,1
collected_code_3/problem-57-2.c:9:16:,3
'strlen',4
"qsort(str,",2
"strlen(str),",2
"sizeof(char),",2
compare);,2
collected_code_3/problem-57-2.c:3:1:,1
collected_code_3/problem-665-2.c:,1
collected_code_3/problem-665-2.c:26:20:,1
collected_code_3/problem-209-2.c:,1
collected_code_3/problem-209-2.c:65:16:,1
Heap,1
*heap,1
(Heap,1
*)malloc(sizeof(Heap));,1
collected_code_3/problem-392-2.c:,2
'max_sum':,1
collected_code_3/problem-392-2.c:13:16:,2
"max(n,",2
max_sum(n/2),2
max_sum(n/3),2
max_sum(n/4),2
max_sum(n/5));,2
collected_code_3/problem-392-2.c:17:15:,1
'max';,1
'long,1
long,11
int(long,1
max(long,1
b),1
'int()',1
collected_code_3/problem-117-2.c:,1
collected_code_3/problem-117-2.c:26:16:,1
"""3.14"";",2
~~~~~~~~~~~^~~~~~~~,1
malloc(sizeof(Node));,4
collected_code_3/problem-117-2.c:29:18:,1
"""2.71"";",2
*second,1
collected_code_3/problem-117-2.c:32:17:,1
"""1.41"";",2
*third,1
collected_code_3/problem-694-2.c:,1
collected_code_3/problem-694-2.c:11:21:,1
node*),1
node));,1
collected_code_3/problem-231-2.c:,1
'maxSum':,3
collected_code_3/problem-231-2.c:7:25:,4
stack-based,1
(tri[i+1][j],4
tri[i+1][j+1]),4
tri[N][N],2
"{1,",3
"printf(""%d\n"",",2
maxSum(tri));,2
'maxSum',4
maxSum(int,2
tri[N][N]),2
i=N-1;,2
i>=0;,2
j<=i;,2
'tri',3
valid,1
subscripts,1
'[0]',1
'[2]',1
'*tri_46(D),2
_3[j]',2
collected_code_3/problem-885-2.c:,1
'areIsomorphic':,1
collected_code_3/problem-885-2.c:17:5:,1
unknown,1
name,1
'bool',2
bool,2
marked[MAX_CHARS],2
{false};,2
collected_code_3/problem-885-2.c:3:1:,1
defined,3
header,3
'<stdbool.h>';,3
forget,3
'#include,3
<stdbool.h>'?,3
collected_code_3/problem-885-2.c:17:31:,3
collected_code_3/problem-885-2.c:23:36:,2
(marked[str2[i]],1
true),1
collected_code_3/problem-282-2.c:,1
collected_code_3/problem-282-2.c:50:17:,1
list1->next,9
~~~~~~~~~~~~^~~~~~~~~~~~~~~~,2
list1,8
~~~~~~~~~~~~~~^~~~~~~~~~~~~~,2
list1->next->next,8
collected_code_3/problem-282-2.c:51:23:,1
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,2
~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,2
'*list1.next',1
collected_code_3/problem-282-2.c:54:17:,1
list2->next,5
createNode(15);,5
23-24,1
list2->next->next,4
createNode(25);,4
collected_code_3/problem-282-2.c:55:23:,1
'*list2.next',1
collected_code_3/problem-411-2.c:,3
collected_code_3/problem-411-2.c:8:19:,3
camel,5
malloc(len+1);,5
collected_code_3/problem-411-2.c:4:1:,1
collected_code_3/problem-411-2.c:27:5:,4
free(camel);,1
collected_code_3/problem-411-2.c:13:22:,1
'camel',3
camel[j],6
toupper(snake[i]);,2
~~~~~~~~~^~~~~~~~~~~~~~~~~~~,1
if(snake[i],2
'camel,3
collected_code_3/problem-411-2.c:15:22:,1
snake[i];,2
~~~~~~~~~^~~~~~~~~~,1
collected_code_3/problem-411-2.c:19:14:,1
~~~~~~~~~^~~~~~,1
collected_code_3/problem-20-2.c:1:2:,2
constant,2
too,2
its,2
I'm,2
"sorry,",2
term,2
"""woodball""",2
doesn't,2
seem,2
specific,4
meaning,2
context,2
C,2
programming,2
theory.,2
Could,2
please,2
more,2
details,2
context?,2
If,2
you're,2
referring,2
algorithm,2
property,2
"numbers,",2
I'd,2
happy,2
help,2
clarify.,2
"'=',",1
"',',",1
"';',",1
'asm',1
'__attribute__',1
before,1
'\x6f65736e',1
collected_code_3/problem-20-2.c:1:182:,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-822-2.c:,1
collected_code_3/problem-822-2.c:28:5:,3
password:,2
collected_code_3/problem-822-2.c:3:1:,1
collected_code_3/problem-822-2.c:29:5:,4
"scanf(""%s"",",1
password);,1
collected_code_3/problem-562-2.c:,1
collected_code_3/problem-562-2.c:30:42:,3
collected_code_3/problem-562-2.c:2:1:,1
collected_code_3/problem-562-2.c:31:19:,1
collected_code_3/problem-754-2.c:,1
collected_code_3/problem-754-2.c:25:41:,2
excess,4
elements,4
initializer,4
arr1[SIZE],1
"10,",1
"20,",4
"40,",1
80};,1
(near,4
initialization,4
'arr1'),1
collected_code_3/problem-754-2.c:27:41:,2
arr3[SIZE],3
"{3,",3
"4,",3
"15,",3
"30,",3
"70,",3
"80,",3
120};,3
'arr3'),3
collected_code_3/problem-754-2.c:27:45:,2
collected_code_3/problem-754-2.c:27:49:,2
collected_code_3/problem-945-2.c:,1
'convertToSet':,3
collected_code_3/problem-945-2.c:11:19:,1
'set',2
set->elements,3
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
Set,1
*set,1
(Set*)malloc(sizeof(Set));,1
collected_code_3/problem-945-2.c:21:38:,1
'*set.elements,2
int)*set.size,2
set->elements[set->size],2
tuple[i];,4
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
if(i,1
j),1
j')...,1
collected_code_3/problem-174-2.c:,2
collected_code_3/problem-174-2.c:17:21:,1
'dictionary',3
dictionary->key,2
*dictionary,3
createDictionary();,1
*createDictionary(),1
(Dictionary,1
collected_code_3/problem-174-2.c:24:20:,1
newNode->value,2
~~~~~~~~~~~~~~~^~~~~~~,1
*newNode,1
collected_code_3/problem-740-2.c:,1
'convertToDictionary':,2
collected_code_3/problem-740-2.c:13:31:,1
dictionary[i,2
2].key,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
KeyValuePair,1
2));,1
'dictionary,1
int)(i,1
collected_code_3/problem-15-2.c:,1
'split_string':,3
collected_code_3/problem-15-2.c:13:23:,1
&str[k];,4
strlen(str));,2
if(islower(str[i])),1
collected_code_3/problem-15-2.c:18:15:,1
"""HelloWorldThisIsATest"";",1
split_string(str);,1
'split_string',2
**split_string(char,1
*str),1
