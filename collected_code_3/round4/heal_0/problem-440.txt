Writing a C function to find all adverbs and their positions in a given sentence is a complex task, mainly because C is a low-level language and doesn't have built-in libraries for natural language processing or text analysis like Python or Java.

However, if we simplify the problem and assume that all adverbs in English end with "ly", we can write a function to find these words. This is a very simplified approach and won't cover all adverbs, but it's a start.

Here is a simple C program that does this:

```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_WORDS 100
#define MAX_WORD_LEN 20

void find_adverbs(char* sentence) {
    char* words[MAX_WORDS];
    int word_count = 0;
    char* word = strtok(sentence, " ");
    while (word != NULL) {
        words[word_count] = malloc(strlen(word) + 1);
        strcpy(words[word_count], word);
        word_count++;
        word = strtok(NULL, " ");
    }

    for (int i = 0; i < word_count; i++) {
        int len = strlen(words[i]);
        if (len > 2 && words[i][len - 2] == 'l' && words[i][len - 1] == 'y') {
            printf("Adverb: %s, Position: %d\n", words[i], i + 1);
        }
        free(words[i]);
    }
}

int main() {
    char sentence[] = "He quickly ran to the beautifully decorated house.";
    find_adverbs(sentence);
    return 0;
}
```

This program first splits the sentence into words using the `strtok` function. It then checks each word to see if it ends with "ly". If it does, it prints the word and its position. Note that the position is 1-indexed, not 0-indexed.