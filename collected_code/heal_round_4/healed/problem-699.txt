```C
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

bool strIsValid(const char* str) {
    const char* tmp = str;
    if (tmp == NULL) {
        return false;
    }
    while (*tmp) {
        if (*tmp != '0' && *tmp != '1') {
            return false;
        }
        tmp++;
    }
    return true;
}

int minSwaps(const char* str1, const char* str2) {

    if (!strIsValid(str1) || !strIsValid(str2)) {
        return -1;
    }

    size_t n = str1 ? strnlen(str1, INT_MAX) : 0;
    size_t m = str2 ? strnlen(str2, INT_MAX) : 0;

    if (n != m) {
        return -1;
    }

    int count0 = 0, count1 = 0, mismatch = 0;

    for (size_t i = 0; (i < n) && (str1[i]!='\0') && (str2[i]!='\0'); i++) {
        if (str1[i] != str2[i]) {
            mismatch++;
            if (str1[i] == '0') {
                count0++;
            } else {
                count1++;
            }
        }
    }

    if ((mismatch & 1) != 0) {
        return -1;
    }

    return (mismatch >> 1) + ((count0 & 1) == 0 ? (count0 >> 1) : (count0 >> 1) + 1);
}

int main() {
    const char* str1 = "0110";
    const char* str2 = "1001";

    int swaps = minSwaps(str1, str2);

    printf("Minimum number of swaps required: %d\n", swaps);

    return 0;
}
```
This revised version of the code applies bug fixes and enhancements pointed out in the initial code comments. It also adds an improved string validation method. 

This version uses strnlen instead of strlen avoiding potential over-read in case of non-null terminated strings. 

It also used bitwise operations instead of division and modulo operations to potentially improve performance. It's worth mentioning though, that any decent C compiler will automatically optimize division and modulo operations with powers of 2 into bitwise operations where possible.