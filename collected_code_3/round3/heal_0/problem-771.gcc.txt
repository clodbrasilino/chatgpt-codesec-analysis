collected_code_3/problem-771-3.c: In function 'areParenthesisBalanced':
collected_code_3/problem-771-3.c:53:39: warning: implicit declaration of function 'strlen' [-Wimplicit-function-declaration]
   53 |     struct Stack* stack = createStack(strlen(exp));
      |                                       ^~~~~~
collected_code_3/problem-771-3.c:3:1: note: include '<string.h>' or provide a declaration of 'strlen'
    2 | #include <stdlib.h>
  +++ |+#include <string.h>
    3 | 
collected_code_3/problem-771-3.c:53:39: warning: incompatible implicit declaration of built-in function 'strlen' [-Wbuiltin-declaration-mismatch]
   53 |     struct Stack* stack = createStack(strlen(exp));
      |                                       ^~~~~~
collected_code_3/problem-771-3.c:53:39: note: include '<string.h>' or provide a declaration of 'strlen'
collected_code_3/problem-771-3.c:62:24: warning: leak of 'stack' [CWE-401] [-Wanalyzer-malloc-leak]
   62 |                 return 0;
      |                        ^
  'main': events 1-2
    |
    |   77 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   78 |     char exp[100] = "{()}[]";
    |   79 |     if (areParenthesisBalanced(exp))
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (2) calling 'areParenthesisBalanced' from 'main'
    |
    +--> 'areParenthesisBalanced': events 3-4
           |
           |   51 | int areParenthesisBalanced(char exp[]) {
           |      |     ^~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (3) entry to 'areParenthesisBalanced'
           |   52 |     int i = 0;
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (4) calling 'createStack' from 'areParenthesisBalanced'
           |
           +--> 'createStack': events 5-11
                  |
                  |   10 | struct Stack* createStack(unsigned capacity) {
                  |      |               ^~~~~~~~~~~
                  |      |               |
                  |      |               (5) entry to 'createStack'
                  |   11 |     struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
                  |      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  |      |                                           |
                  |      |                                           (6) allocated here
                  |   12 |     if (!stack)
                  |      |        ~       
                  |      |        |
                  |      |        (7) assuming 'stack' is non-NULL
                  |      |        (8) following 'false' branch (when 'stack' is non-NULL)...
                  |   13 |         return NULL;
                  |   14 |     stack->top = -1;
                  |      |     ~~~~~~~~~~~~~~~
                  |      |                |
                  |      |                (9) ...to here
                  |......
                  |   17 |     if (!stack->array)
                  |      |        ~       
                  |      |        |
                  |      |        (10) following 'false' branch...
                  |   18 |         return NULL;
                  |   19 |     return stack;
                  |      |            ~~~~~
                  |      |            |
                  |      |            (11) ...to here
                  |
           <------+
           |
         'areParenthesisBalanced': events 12-13
           |
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (12) returning to 'areParenthesisBalanced' from 'createStack'
           |   54 |     if(!stack)
           |      |       ~                    
           |      |       |
           |      |       (13) following 'false' branch (when 'stack' is non-NULL)...
           |
         'areParenthesisBalanced': event 14
           |
           |cc1:
           | (14): ...to here
           |
         'areParenthesisBalanced': events 15-25
           |
           |   57 |     while (exp[i]) {
           |      |            ^~~
           |      |            |
           |      |            (15) following 'true' branch...
           |      |            (21) following 'true' branch...
           |      |            (23) following 'true' branch...
           |   58 |         if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[')
           |      |            ~   ~
           |      |            |   |
           |      |            |   (16) ...to here
           |      |            |   (22) ...to here
           |      |            |   (24) ...to here
           |      |            (17) following 'true' branch...
           |   59 |             push(stack, exp[i]);
           |      |                            ~
           |      |                            |
           |      |                            (18) ...to here
           |   60 |         if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') {
           |      |            ~
           |      |            |
           |      |            (19) following 'false' branch...
           |   61 |             if (isEmpty(stack)) {
           |   62 |                 return 0;
           |      |                        ~
           |      |                        |
           |      |                        (25) 'stack' leaks here; was allocated at (6)
           |......
           |   67 |         i++;
           |      |         ~~~ 
           |      |          |
           |      |          (20) ...to here
           |
collected_code_3/problem-771-3.c:64:24: warning: leak of 'stack' [CWE-401] [-Wanalyzer-malloc-leak]
   64 |                 return 0;
      |                        ^
  'main': events 1-2
    |
    |   77 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   78 |     char exp[100] = "{()}[]";
    |   79 |     if (areParenthesisBalanced(exp))
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (2) calling 'areParenthesisBalanced' from 'main'
    |
    +--> 'areParenthesisBalanced': events 3-4
           |
           |   51 | int areParenthesisBalanced(char exp[]) {
           |      |     ^~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (3) entry to 'areParenthesisBalanced'
           |   52 |     int i = 0;
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (4) calling 'createStack' from 'areParenthesisBalanced'
           |
           +--> 'createStack': events 5-11
                  |
                  |   10 | struct Stack* createStack(unsigned capacity) {
                  |      |               ^~~~~~~~~~~
                  |      |               |
                  |      |               (5) entry to 'createStack'
                  |   11 |     struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
                  |      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  |      |                                           |
                  |      |                                           (6) allocated here
                  |   12 |     if (!stack)
                  |      |        ~       
                  |      |        |
                  |      |        (7) assuming 'stack' is non-NULL
                  |      |        (8) following 'false' branch (when 'stack' is non-NULL)...
                  |   13 |         return NULL;
                  |   14 |     stack->top = -1;
                  |      |     ~~~~~~~~~~~~~~~
                  |      |                |
                  |      |                (9) ...to here
                  |......
                  |   17 |     if (!stack->array)
                  |      |        ~       
                  |      |        |
                  |      |        (10) following 'false' branch...
                  |   18 |         return NULL;
                  |   19 |     return stack;
                  |      |            ~~~~~
                  |      |            |
                  |      |            (11) ...to here
                  |
           <------+
           |
         'areParenthesisBalanced': events 12-13
           |
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (12) returning to 'areParenthesisBalanced' from 'createStack'
           |   54 |     if(!stack)
           |      |       ~                    
           |      |       |
           |      |       (13) following 'false' branch (when 'stack' is non-NULL)...
           |
         'areParenthesisBalanced': event 14
           |
           |cc1:
           | (14): ...to here
           |
         'areParenthesisBalanced': events 15-27
           |
           |   57 |     while (exp[i]) {
           |      |            ^~~
           |      |            |
           |      |            (15) following 'true' branch...
           |      |            (21) following 'true' branch...
           |      |            (23) following 'true' branch...
           |   58 |         if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[')
           |      |            ~   ~
           |      |            |   |
           |      |            |   (16) ...to here
           |      |            |   (22) ...to here
           |      |            |   (24) ...to here
           |      |            (17) following 'true' branch...
           |   59 |             push(stack, exp[i]);
           |      |                            ~
           |      |                            |
           |      |                            (18) ...to here
           |   60 |         if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') {
           |      |            ~
           |      |            |
           |      |            (19) following 'false' branch...
           |   61 |             if (isEmpty(stack)) {
           |      |                ~
           |      |                |
           |      |                (25) following 'false' branch...
           |   62 |                 return 0;
           |   63 |             } else if (!isMatchingPair(pop(stack), exp[i])) {
           |      |                                        ~~~~~~~~~~     ~
           |      |                                        |              |
           |      |                                        |              (26) ...to here
           |      |                                        (27) calling 'pop' from 'areParenthesisBalanced'
           |......
           |   67 |         i++;
           |      |         ~~~ 
           |      |          |
           |      |          (20) ...to here
           |
           +--> 'pop': events 28-30
                  |
                  |   34 | char pop(struct Stack* stack) {
                  |      |      ^~~
                  |      |      |
                  |      |      (28) entry to 'pop'
                  |   35 |     if (!isEmpty(stack))
                  |      |        ~
                  |      |        |
                  |      |        (29) following 'true' branch...
                  |   36 |         return stack->array[stack->top--];
                  |      |                ~~~~~~~~~~~~
                  |      |                     |
                  |      |                     (30) ...to here
                  |
           <------+
           |
         'areParenthesisBalanced': events 31-32
           |
           |   63 |             } else if (!isMatchingPair(pop(stack), exp[i])) {
           |      |                                        ^~~~~~~~~~
           |      |                                        |
           |      |                                        (31) returning to 'areParenthesisBalanced' from 'pop'
           |   64 |                 return 0;
           |      |                        ~                
           |      |                        |
           |      |                        (32) 'stack' leaks here; was allocated at (6)
           |
collected_code_3/problem-771-3.c:71:16: warning: leak of 'stack' [CWE-401] [-Wanalyzer-malloc-leak]
   71 |         return 1;
      |                ^
  'main': events 1-2
    |
    |   77 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   78 |     char exp[100] = "{()}[]";
    |   79 |     if (areParenthesisBalanced(exp))
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (2) calling 'areParenthesisBalanced' from 'main'
    |
    +--> 'areParenthesisBalanced': events 3-4
           |
           |   51 | int areParenthesisBalanced(char exp[]) {
           |      |     ^~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (3) entry to 'areParenthesisBalanced'
           |   52 |     int i = 0;
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (4) calling 'createStack' from 'areParenthesisBalanced'
           |
           +--> 'createStack': events 5-11
                  |
                  |   10 | struct Stack* createStack(unsigned capacity) {
                  |      |               ^~~~~~~~~~~
                  |      |               |
                  |      |               (5) entry to 'createStack'
                  |   11 |     struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
                  |      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  |      |                                           |
                  |      |                                           (6) allocated here
                  |   12 |     if (!stack)
                  |      |        ~       
                  |      |        |
                  |      |        (7) assuming 'stack' is non-NULL
                  |      |        (8) following 'false' branch (when 'stack' is non-NULL)...
                  |   13 |         return NULL;
                  |   14 |     stack->top = -1;
                  |      |     ~~~~~~~~~~~~~~~
                  |      |                |
                  |      |                (9) ...to here
                  |......
                  |   17 |     if (!stack->array)
                  |      |        ~       
                  |      |        |
                  |      |        (10) following 'false' branch...
                  |   18 |         return NULL;
                  |   19 |     return stack;
                  |      |            ~~~~~
                  |      |            |
                  |      |            (11) ...to here
                  |
           <------+
           |
         'areParenthesisBalanced': events 12-13
           |
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (12) returning to 'areParenthesisBalanced' from 'createStack'
           |   54 |     if(!stack)
           |      |       ~                    
           |      |       |
           |      |       (13) following 'false' branch (when 'stack' is non-NULL)...
           |
         'areParenthesisBalanced': event 14
           |
           |cc1:
           | (14): ...to here
           |
         'areParenthesisBalanced': events 15-21
           |
           |   57 |     while (exp[i]) {
           |      |            ^~~
           |      |            |
           |      |            (15) following 'true' branch...
           |   58 |         if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[')
           |      |            ~   ~
           |      |            |   |
           |      |            |   (16) ...to here
           |      |            (17) following 'true' branch...
           |   59 |             push(stack, exp[i]);
           |      |                            ~
           |      |                            |
           |      |                            (18) ...to here
           |   60 |         if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') {
           |      |            ~
           |      |            |
           |      |            (19) following 'false' branch...
           |......
           |   67 |         i++;
           |      |         ~~~ 
           |      |          |
           |      |          (20) ...to here
           |......
           |   71 |         return 1;
           |      |                ~
           |      |                |
           |      |                (21) 'stack' leaks here; was allocated at (6)
           |
collected_code_3/problem-771-3.c:71:16: warning: leak of '<unknown>' [CWE-401] [-Wanalyzer-malloc-leak]
   71 |         return 1;
      |                ^
  'main': events 1-2
    |
    |   77 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   78 |     char exp[100] = "{()}[]";
    |   79 |     if (areParenthesisBalanced(exp))
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (2) calling 'areParenthesisBalanced' from 'main'
    |
    +--> 'areParenthesisBalanced': events 3-4
           |
           |   51 | int areParenthesisBalanced(char exp[]) {
           |      |     ^~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (3) entry to 'areParenthesisBalanced'
           |   52 |     int i = 0;
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (4) calling 'createStack' from 'areParenthesisBalanced'
           |
           +--> 'createStack': events 5-11
                  |
                  |   10 | struct Stack* createStack(unsigned capacity) {
                  |      |               ^~~~~~~~~~~
                  |      |               |
                  |      |               (5) entry to 'createStack'
                  |   11 |     struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
                  |   12 |     if (!stack)
                  |      |        ~       
                  |      |        |
                  |      |        (6) following 'false' branch (when 'stack' is non-NULL)...
                  |   13 |         return NULL;
                  |   14 |     stack->top = -1;
                  |      |     ~~~~~~~~~~~~~~~
                  |      |                |
                  |      |                (7) ...to here
                  |   15 |     stack->capacity = capacity;
                  |   16 |     stack->array = (int*) malloc(stack->capacity * sizeof(int));
                  |      |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  |      |                           |
                  |      |                           (8) allocated here
                  |   17 |     if (!stack->array)
                  |      |        ~       
                  |      |        |
                  |      |        (9) assuming '<unknown>' is non-NULL
                  |      |        (10) following 'false' branch...
                  |   18 |         return NULL;
                  |   19 |     return stack;
                  |      |            ~~~~~
                  |      |            |
                  |      |            (11) ...to here
                  |
           <------+
           |
         'areParenthesisBalanced': events 12-13
           |
           |   53 |     struct Stack* stack = createStack(strlen(exp));
           |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (12) returning to 'areParenthesisBalanced' from 'createStack'
           |   54 |     if(!stack)
           |      |       ~                    
           |      |       |
           |      |       (13) following 'false' branch (when 'stack' is non-NULL)...
           |
         'areParenthesisBalanced': event 14
           |
           |cc1:
           | (14): ...to here
           |
         'areParenthesisBalanced': events 15-21
           |
           |   57 |     while (exp[i]) {
           |      |            ^~~
           |      |            |
           |      |            (15) following 'true' branch...
           |   58 |         if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[')
           |      |            ~   ~
           |      |            |   |
           |      |            |   (16) ...to here
           |      |            (17) following 'true' branch...
           |   59 |             push(stack, exp[i]);
           |      |                            ~
           |      |                            |
           |      |                            (18) ...to here
           |   60 |         if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') {
           |      |            ~
           |      |            |
           |      |            (19) following 'false' branch...
           |......
           |   67 |         i++;
           |      |         ~~~ 
           |      |          |
           |      |          (20) ...to here
           |......
           |   71 |         return 1;
           |      |                ~
           |      |                |
           |      |                (21) '<unknown>' leaks here; was allocated at (8)
           |
