```C
#include <stdio.h>

int mergeSort(int arr[], int array_size);
int merge(int arr[], int temp[], int left, int mid, int right);

int inversionCount(int arr[], int array_size)
{
    int temp[array_size];
    return mergeSort(arr, array_size);
}

int mergeSort(int arr[], int array_size)
{
    int temp[array_size];
    int left = 0;
    int right = array_size - 1;
    int mid = 0;
    int inv_count = 0;
    if (right > left)
    {
        mid = (right + left) / 2;
        inv_count = mergeSort(arr, mid);
        inv_count += mergeSort(arr + mid + 1, right - mid);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}

int merge(int arr[], int temp[], int left, int mid, int right)
{
    int i, j, k;
    int inv_count = 0;

    i = left;
    j = mid;
    k = left;
    while ((i <= mid - 1) && (j <= right))
    {
        if (arr[i] <= arr[j])
        {
            temp[k++] = arr[i++];
        }
        else
        {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i);
        }
    }

    while (i <= mid - 1)
        temp[k++] = arr[i++];

    while (j <= right)
        temp[k++] = arr[j++];

    for (i = left; i <= right; i++)
        arr[i] = temp[i];

    return inv_count;
}

int main(int argv, char** args)
{
    int arr[] = {1, 20, 6, 4, 5};
    printf("Number of inversions are %d \n", inversionCount(arr, 5));
    return 0;
}
```