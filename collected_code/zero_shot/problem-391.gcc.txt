collected_code/problem-391-0.c: In function 'createDict':
collected_code/problem-391-0.c:16:28: warning: implicit declaration of function 'malloc' [-Wimplicit-function-declaration]
   16 |     Dict* newDict = (Dict*)malloc(sizeof(Dict));
      |                            ^~~~~~
collected_code/problem-391-0.c:2:1: note: include '<stdlib.h>' or provide a declaration of 'malloc'
    1 | #include <stdio.h>
  +++ |+#include <stdlib.h>
    2 | 
collected_code/problem-391-0.c:16:28: warning: incompatible implicit declaration of built-in function 'malloc' [-Wbuiltin-declaration-mismatch]
   16 |     Dict* newDict = (Dict*)malloc(sizeof(Dict));
      |                            ^~~~~~
collected_code/problem-391-0.c:16:28: note: include '<stdlib.h>' or provide a declaration of 'malloc'
collected_code/problem-391-0.c: In function 'main':
collected_code/problem-391-0.c:56:26: warning: incompatible implicit declaration of built-in function 'malloc' [-Wbuiltin-declaration-mismatch]
   56 |     Node* list1 = (Node*)malloc(sizeof(Node));
      |                          ^~~~~~
collected_code/problem-391-0.c:56:26: note: include '<stdlib.h>' or provide a declaration of 'malloc'
collected_code/problem-391-0.c: In function 'createDict':
collected_code/problem-391-0.c:17:18: warning: dereference of possibly-NULL 'newDict' [CWE-690] [-Wanalyzer-possible-null-dereference]
   17 |     newDict->key = key;
      |     ~~~~~~~~~~~~~^~~~~
  'main': events 1-2
    |
    |   55 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |......
    |   73 |     insertDict(&root, list1);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (2) calling 'insertDict' from 'main'
    |
    +--> 'insertDict': events 3-8
           |
           |   23 | void insertDict(Dict** root, Node* list) {
           |      |      ^~~~~~~~~~
           |      |      |
           |      |      (3) entry to 'insertDict'
           |   24 |     if (!list) { // base case
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'list' is non-NULL)...
           |......
           |   28 |     if (!(*root)) { // if root is empty, create a new dictionary
           |      |        ~ ~~~~~~~
           |      |        |  |
           |      |        |  (5) ...to here
           |      |        (6) following 'true' branch...
           |   29 |         (*root) = createDict(list->key);
           |      |                   ~~~~~~~~~~~~~~~~~~~~~
           |      |                   |
           |      |                   (7) ...to here
           |      |                   (8) calling 'createDict' from 'insertDict'
           |
           +--> 'createDict': events 9-11
                  |
                  |   15 | Dict* createDict(int key) {
                  |      |       ^~~~~~~~~~
                  |      |       |
                  |      |       (9) entry to 'createDict'
                  |   16 |     Dict* newDict = (Dict*)malloc(sizeof(Dict));
                  |      |                            ~~~~~~~~~~~~~~~~~~~~
                  |      |                            |
                  |      |                            (10) this call could return NULL
                  |   17 |     newDict->key = key;
                  |      |     ~~~~~~~~~~~~~~~~~~
                  |      |                  |
                  |      |                  (11) 'newDict' could be NULL: unchecked value from (10)
                  |
collected_code/problem-391-0.c: In function 'main':
collected_code/problem-391-0.c:57:16: warning: dereference of possibly-NULL 'list1' [CWE-690] [-Wanalyzer-possible-null-dereference]
   57 |     list1->key = 1;
      |     ~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   56 |     Node* list1 = (Node*)malloc(sizeof(Node));
    |      |                          ^~~~~~~~~~~~~~~~~~~~
    |      |                          |
    |      |                          (1) this call could return NULL
    |   57 |     list1->key = 1;
    |      |     ~~~~~~~~~~~~~~        
    |      |                |
    |      |                (2) 'list1' could be NULL: unchecked value from (1)
    |
collected_code/problem-391-0.c:60:22: warning: dereference of possibly-NULL '*list1.next' [CWE-690] [-Wanalyzer-possible-null-dereference]
   60 |     list1->next->key = 2;
      |     ~~~~~~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   59 |     list1->next = (Node*)malloc(sizeof(Node));
    |      |                          ^~~~~~~~~~~~~~~~~~~~
    |      |                          |
    |      |                          (1) this call could return NULL
    |   60 |     list1->next->key = 2;
    |      |     ~~~~~~~~~~~~~~~~~~~~  
    |      |                      |
    |      |                      (2) '*list1.next' could be NULL: unchecked value from (1)
    |
collected_code/problem-391-0.c:65:16: warning: dereference of possibly-NULL 'list2' [CWE-690] [-Wanalyzer-possible-null-dereference]
   65 |     list2->key = 1;
      |     ~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   64 |     Node* list2 = (Node*)malloc(sizeof(Node));
    |      |                          ^~~~~~~~~~~~~~~~~~~~
    |      |                          |
    |      |                          (1) this call could return NULL
    |   65 |     list2->key = 1;
    |      |     ~~~~~~~~~~~~~~        
    |      |                |
    |      |                (2) 'list2' could be NULL: unchecked value from (1)
    |
collected_code/problem-391-0.c:68:22: warning: dereference of possibly-NULL '*list2.next' [CWE-690] [-Wanalyzer-possible-null-dereference]
   68 |     list2->next->key = 3;
      |     ~~~~~~~~~~~~~~~~~^~~
  'main': events 1-2
    |
    |   67 |     list2->next = (Node*)malloc(sizeof(Node));
    |      |                          ^~~~~~~~~~~~~~~~~~~~
    |      |                          |
    |      |                          (1) this call could return NULL
    |   68 |     list2->next->key = 3;
    |      |     ~~~~~~~~~~~~~~~~~~~~  
    |      |                      |
    |      |                      (2) '*list2.next' could be NULL: unchecked value from (1)
    |
