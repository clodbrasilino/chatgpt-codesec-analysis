In C, there is no built-in data type for a dictionary. However, we can create a dictionary-like structure using a struct. Let's assume that our dictionary has two fields: a string key and an integer value. We can sort this list of dictionaries based on the integer value. Here is a simple implementation:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char key[50];
    int value;
} Dictionary;

int compare(const void* a, const void* b) {
    Dictionary* dictA = (Dictionary*) a;
    Dictionary* dictB = (Dictionary*) b;
    return dictA->value - dictB->value;
}

void sortDictionary(Dictionary* dict, int n) {
    qsort(dict, n, sizeof(Dictionary), compare);
}

int main() {
    Dictionary dict[3] = {{"Apple", 20}, {"Banana", 10}, {"Cherry", 30}};
    int n = sizeof(dict) / sizeof(dict[0]);

    sortDictionary(dict, n);

    for(int i = 0; i < n; i++) {
        printf("%s: %d\n", dict[i].key, dict[i].value);
    }

    return 0;
}
```

In this code, we define a struct Dictionary to represent a dictionary. We then define a compare function that compares two dictionaries based on their values. This function is used by the qsort function to sort the array of dictionaries. The sortDictionary function is a wrapper around the qsort function that sorts an array of dictionaries. In the main function, we create an array of dictionaries and sort it using the sortDictionary function. Finally, we print the sorted array.