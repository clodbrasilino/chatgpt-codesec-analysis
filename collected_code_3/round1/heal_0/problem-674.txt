C language does not have a built-in collections module like Python. However, we can achieve the same functionality using other methods. Here is a C program that removes duplicate words from a given string.

```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_WORD_LENGTH 50
#define MAX_WORDS 100

int isWordExist(char* word, char* words[], int count) {
    for(int i = 0; i < count; i++) {
        if(strcmp(words[i], word) == 0) {
            return 1;
        }
    }
    return 0;
}

char* removeDuplicateWords(char* str) {
    char* words[MAX_WORDS];
    int count = 0;

    char* word = strtok(str, " ");
    while(word != NULL) {
        if(!isWordExist(word, words, count)) {
            words[count] = malloc(strlen(word) + 1);
            strcpy(words[count++], word);
        }
        word = strtok(NULL, " ");
    }

    char* result = malloc(strlen(str) + 1);
    strcpy(result, words[0]);
    for(int i = 1; i < count; i++) {
        strcat(result, " ");
        strcat(result, words[i]);
        free(words[i]);
    }

    return result;
}

int main() {
    char str[] = "Hello world world Hello";
    char* result = removeDuplicateWords(str);
    printf("%s\n", result);
    free(result);
    return 0;
}
```

This program first tokenizes the input string into words using the `strtok` function. It then checks each word to see if it already exists in the array of unique words. If it does not exist, it is added to the array. Finally, the array of unique words is concatenated into a single string which is returned. The `malloc` function is used to dynamically allocate memory for the unique words and the result string. The `free` function is used to deallocate memory that is no longer needed.