collected_code/healed/problem-620.c: In function 'largestDivisibleSubset':
collected_code/healed/problem-620.c:17:9: warning: leak of 'previousIndex' [CWE-401] [-Wanalyzer-malloc-leak]
   17 |         return;
      |         ^~~~~~
  'largestDivisibleSubset': events 1-6
    |
    |    6 |     if (n == 0)
    |      |        ^
    |      |        |
    |      |        (1) following 'false' branch (when 'n != 0')...
    |......
    |    9 |     int count = 1, maxSubsetSize = 1;
    |      |         ~~~~~
    |      |         |
    |      |         (2) ...to here
    |......
    |   13 |     int *previousIndex = (int*)malloc(sizeof(int)*n);
    |      |                                ~~~~~~~~~~~~~~~~~~~~~
    |      |                                |
    |      |                                (3) allocated here
    |   14 | 
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |       ~ 
    |      |       |
    |      |       (4) following 'true' branch (when 'subsetSize' is NULL)...
    |   16 |         printf("\nFailure to allocate memory for subsetSize or previousIndex\n");
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (5) ...to here
    |   17 |         return;
    |      |         ~~~~~~
    |      |         |
    |      |         (6) 'previousIndex' leaks here; was allocated at (3)
    |
collected_code/healed/problem-620.c:17:9: warning: leak of 'subsetSize' [CWE-401] [-Wanalyzer-malloc-leak]
   17 |         return;
      |         ^~~~~~
  'largestDivisibleSubset': events 1-5
    |
    |    6 |     if (n == 0)
    |      |        ^
    |      |        |
    |      |        (1) following 'false' branch (when 'n != 0')...
    |......
    |    9 |     int count = 1, maxSubsetSize = 1;
    |      |         ~~~~~
    |      |         |
    |      |         (2) ...to here
    |......
    |   12 |     int *subsetSize = (int*)malloc(sizeof(int)*n);
    |      |                             ~~~~~~~~~~~~~~~~~~~~~
    |      |                             |
    |      |                             (3) allocated here
    |......
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |       ~ 
    |      |       |
    |      |       (4) assuming 'subsetSize' is non-NULL
    |      |       (5) following 'false' branch (when 'subsetSize' is non-NULL)...
    |
  'largestDivisibleSubset': event 6
    |
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |                           ^
    |      |                           |
    |      |                           (6) ...to here
    |
  'largestDivisibleSubset': events 7-9
    |
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |                           ^
    |      |                           |
    |      |                           (7) following 'true' branch (when 'previousIndex' is NULL)...
    |   16 |         printf("\nFailure to allocate memory for subsetSize or previousIndex\n");
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (8) ...to here
    |   17 |         return;
    |      |         ~~~~~~             
    |      |         |
    |      |         (9) 'subsetSize' leaks here; was allocated at (3)
    |
collected_code/healed/problem-620.c:48:9: warning: leak of 'subsetSize' [CWE-401] [-Wanalyzer-malloc-leak]
   48 |         return;
      |         ^~~~~~
  'largestDivisibleSubset': events 1-9
    |
    |    6 |     if (n == 0)
    |      |        ^
    |      |        |
    |      |        (1) following 'false' branch (when 'n != 0')...
    |......
    |    9 |     int count = 1, maxSubsetSize = 1;
    |      |         ~~~~~
    |      |         |
    |      |         (2) ...to here
    |......
    |   12 |     int *subsetSize = (int*)malloc(sizeof(int)*n);
    |      |                             ~~~~~~~~~~~~~~~~~~~~~
    |      |                             |
    |      |                             (3) allocated here
    |......
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |       ~ 
    |      |       |
    |      |       (4) assuming 'subsetSize' is non-NULL
    |      |       (5) following 'false' branch...
    |......
    |   20 |     for (int i = 0; i < n; i++)
    |      |              ~
    |      |              |
    |      |              (6) ...to here
    |......
    |   46 |     if(subset == NULL){
    |      |       ~ 
    |      |       |
    |      |       (7) following 'true' branch (when 'subset' is NULL)...
    |   47 |         printf("\nFailure to allocate memory for subset\n");
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (8) ...to here
    |   48 |         return;
    |      |         ~~~~~~
    |      |         |
    |      |         (9) 'subsetSize' leaks here; was allocated at (3)
    |
collected_code/healed/problem-620.c:48:9: warning: leak of 'previousIndex' [CWE-401] [-Wanalyzer-malloc-leak]
   48 |         return;
      |         ^~~~~~
  'largestDivisibleSubset': events 1-4
    |
    |    6 |     if (n == 0)
    |      |        ^
    |      |        |
    |      |        (1) following 'false' branch (when 'n != 0')...
    |......
    |    9 |     int count = 1, maxSubsetSize = 1;
    |      |         ~~~~~
    |      |         |
    |      |         (2) ...to here
    |......
    |   13 |     int *previousIndex = (int*)malloc(sizeof(int)*n);
    |      |                                ~~~~~~~~~~~~~~~~~~~~~
    |      |                                |
    |      |                                (3) allocated here
    |   14 | 
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |       ~ 
    |      |       |
    |      |       (4) following 'false' branch (when 'subsetSize' is non-NULL)...
    |
  'largestDivisibleSubset': event 5
    |
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |                           ^
    |      |                           |
    |      |                           (5) ...to here
    |
  'largestDivisibleSubset': event 6
    |
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |                           ^
    |      |                           |
    |      |                           (6) assuming 'previousIndex' is non-NULL
    |
  'largestDivisibleSubset': events 7-11
    |
    |   15 |     if(subsetSize == NULL || previousIndex == NULL){
    |      |                           ^
    |      |                           |
    |      |                           (7) following 'false' branch (when 'previousIndex' is non-NULL)...
    |......
    |   20 |     for (int i = 0; i < n; i++)
    |      |              ~             
    |      |              |
    |      |              (8) ...to here
    |......
    |   46 |     if(subset == NULL){
    |      |       ~                    
    |      |       |
    |      |       (9) following 'true' branch (when 'subset' is NULL)...
    |   47 |         printf("\nFailure to allocate memory for subset\n");
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |         |
    |      |         (10) ...to here
    |   48 |         return;
    |      |         ~~~~~~             
    |      |         |
    |      |         (11) 'previousIndex' leaks here; was allocated at (3)
    |
collected_code/healed/problem-620.c:62:9: warning: use of uninitialized value '*subset_93 + _59' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
   62 |         printf("%d ", subset[i]);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
  'main': events 1-2
    |
    |   70 | int main()
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |......
    |   75 |     largestDivisibleSubset(arr, n);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (2) calling 'largestDivisibleSubset' from 'main'
    |
    +--> 'largestDivisibleSubset': events 3-23
           |
           |    4 | void largestDivisibleSubset(int arr[], int n)
           |      |      ^~~~~~~~~~~~~~~~~~~~~~
           |      |      |
           |      |      (3) entry to 'largestDivisibleSubset'
           |    5 | {
           |    6 |     if (n == 0)
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'n != 0')...
           |......
           |    9 |     int count = 1, maxSubsetSize = 1;
           |      |         ~~~~~
           |      |         |
           |      |         (5) ...to here
           |......
           |   15 |     if(subsetSize == NULL || previousIndex == NULL){
           |      |       ~
           |      |       |
           |      |       (6) following 'false' branch...
           |......
           |   20 |     for (int i = 0; i < n; i++)
           |      |              ~      ~~~~~
           |      |              |        |
           |      |              |        (8) following 'true' branch (when 'i < n')...
           |      |              (7) ...to here
           |   21 |     {
           |   22 |         subsetSize[i] = 1;
           |      |                   ~
           |      |                   |
           |      |                   (9) ...to here
           |......
           |   26 |     for (int i = 1; i < n; i++)
           |      |                     ~~~~~
           |      |                       |
           |      |                       (10) following 'true' branch (when 'i < n')...
           |   27 |     {
           |   28 |         for (int j = 0; j < i; j++)
           |      |                  ~      ~~~~~
           |      |                  |        |
           |      |                  |        (12) following 'true' branch (when 'j < i')...
           |      |                  (11) ...to here
           |   29 |         {
           |   30 |             if (arr[i] % arr[j] == 0 && subsetSize[i] < subsetSize[j] + 1)
           |      |                ~   ~                                              ~
           |      |                |   |                                              |
           |      |                |   (13) ...to here                                (15) ...to here
           |      |                (14) following 'true' branch...
           |......
           |   44 |     int *subset = (int*)malloc(sizeof(int)*maxSubsetSize);
           |      |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                         |
           |      |                         (16) region created on heap here
           |   45 | 
           |   46 |     if(subset == NULL){
           |      |       ~
           |      |       |
           |      |       (17) following 'false' branch (when 'subset' is non-NULL)...
           |......
           |   51 |     int currentIndex = lastElementIndex;
           |      |         ~~~~~~~~~~~~
           |      |         |
           |      |         (18) ...to here
           |   52 |     for (int i = maxSubsetSize - 1; i >= 0; i--)
           |      |                                     ~~~~~~
           |      |                                       |
           |      |                                       (19) following 'false' branch (when 'i < 0')...
           |......
           |   59 |     printf("Largest Divisible Subset: ");
           |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (20) ...to here
           |   60 |     for (int i = 0; i < maxSubsetSize; i++)
           |      |                     ~~~~~~~~~~~~~~~~~
           |      |                       |
           |      |                       (21) following 'true' branch (when 'i < maxSubsetSize')...
           |   61 |     {
           |   62 |         printf("%d ", subset[i]);
           |      |         ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |         |                   |
           |      |         |                   (22) ...to here
           |      |         (23) use of uninitialized value '*subset_93 + _59' here
           |
-macosx_version_min has been renamed to -macos_version_min
