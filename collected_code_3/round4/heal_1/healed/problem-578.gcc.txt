./collected_code_3/round4/heal_1/healed/problem-578.c: In function 'interleaveLists':
./collected_code_3/round4/heal_1/healed/problem-578.c:41:1: warning: leak of 'result' [CWE-401] [-Wanalyzer-malloc-leak]
   41 | }
      | ^
  'main': events 1-2
    |
    |   63 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   64 |     Node* list1 = newNode(1);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (2) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 3-5
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (3) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (5) ...to here
           |
    <------+
    |
  'main': events 6-7
    |
    |   64 |     Node* list1 = newNode(1);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (6) returning to 'main' from 'newNode'
    |   65 |     list1->next = newNode(2);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (7) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 8-10
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (8) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (9) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (10) ...to here
           |
    <------+
    |
  'main': events 11-12
    |
    |   65 |     list1->next = newNode(2);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (11) returning to 'main' from 'newNode'
    |   66 |     list1->next->next = newNode(3);
    |      |                         ~~~~~~~~~~
    |      |                         |
    |      |                         (12) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 13-14
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (13) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (14) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 15
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (15) ...to here
           |
    <------+
    |
  'main': events 16-17
    |
    |   66 |     list1->next->next = newNode(3);
    |      |                         ^~~~~~~~~~
    |      |                         |
    |      |                         (16) returning to 'main' from 'newNode'
    |   67 | 
    |   68 |     Node* list2 = newNode(4);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (17) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 18-20
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (18) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (19) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (20) ...to here
           |
    <------+
    |
  'main': events 21-22
    |
    |   68 |     Node* list2 = newNode(4);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (21) returning to 'main' from 'newNode'
    |   69 |     list2->next = newNode(5);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (22) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 23-25
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (23) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (24) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (25) ...to here
           |
    <------+
    |
  'main': events 26-27
    |
    |   69 |     list2->next = newNode(5);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (26) returning to 'main' from 'newNode'
    |   70 |     list2->next->next = newNode(6);
    |      |                         ~~~~~~~~~~
    |      |                         |
    |      |                         (27) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 28-30
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (28) entry to 'newNode'
           |   44 |     Node* node = (Node*)malloc(sizeof(Node));
           |      |                         ~~~~~~~~~~~~~~~~~~~~
           |      |                         |
           |      |                         (29) allocated here
           |   45 | 
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (30) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 31
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (31) ...to here
           |
    <------+
    |
  'main': events 32-33
    |
    |   70 |     list2->next->next = newNode(6);
    |      |                         ^~~~~~~~~~
    |      |                         |
    |      |                         (32) returning to 'main' from 'newNode'
    |   71 | 
    |   72 |     Node* result = interleaveLists(list1, list2);
    |      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                    |
    |      |                    (33) calling 'interleaveLists' from 'main'
    |
    +--> 'interleaveLists': event 34
           |
           |    9 | Node* interleaveLists(Node* list1, Node* list2) {
           |      |       ^~~~~~~~~~~~~~~
           |      |       |
           |      |       (34) entry to 'interleaveLists'
           |
         'interleaveLists': events 35-42
           |
           |   13 |     while (list1 != NULL && list2 != NULL) {
           |      |                          ^
           |      |                          |
           |      |                          (35) following 'true' branch...
           |   14 |         Node* newNode1 = (Node*)malloc(sizeof(Node));
           |      |                                 ~~~~~~~~~~~~~~~~~~~~
           |      |                                 |
           |      |                                 (36) ...to here
           |      |                                 (37) allocated here
           |   15 | 
           |   16 |         if (!newNode1) {
           |      |            ~              
           |      |            |
           |      |            (38) assuming 'newNode1' is non-NULL
           |      |            (39) following 'false' branch (when 'newNode1' is non-NULL)...
           |......
           |   20 |         newNode1->data = list1->data;
           |      |                          ~~~~~~~~~~~
           |      |                               |
           |      |                               (40) ...to here
           |......
           |   27 |         if (!newNode2) {
           |      |            ~              
           |      |            |
           |      |            (41) following 'false' branch (when 'newNode2' is non-NULL)...
           |......
           |   31 |         newNode2->data = list2->data;
           |      |                          ~~~~~~~~~~~
           |      |                               |
           |      |                               (42) ...to here
           |
         'interleaveLists': events 43-45
           |
           |   13 |     while (list1 != NULL && list2 != NULL) {
           |      |                          ^
           |      |                          |
           |      |                          (43) following 'true' branch...
           |   14 |         Node* newNode1 = (Node*)malloc(sizeof(Node));
           |      |                                 ~~~~~~~~~~~~~~~~~~~~
           |      |                                 |
           |      |                                 (44) ...to here
           |   15 | 
           |   16 |         if (!newNode1) {
           |      |            ~              
           |      |            |
           |      |            (45) following 'true' branch (when 'newNode1' is NULL)...
           |
         'interleaveLists': event 46
           |
           |   17 |             return NULL;
           |      |                    ^~~~
           |      |                    |
           |      |                    (46) ...to here
           |
         'interleaveLists': event 47
           |
           |   41 | }
           |      | ^
           |      | |
           |      | (47) 'result' leaks here; was allocated at (37)
           |
./collected_code_3/round4/heal_1/healed/problem-578.c:41:1: warning: leak of '<unknown>' [CWE-401] [-Wanalyzer-malloc-leak]
  'main': events 1-2
    |
    |   63 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   64 |     Node* list1 = newNode(1);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (2) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 3-5
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (3) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (5) ...to here
           |
    <------+
    |
  'main': events 6-7
    |
    |   64 |     Node* list1 = newNode(1);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (6) returning to 'main' from 'newNode'
    |   65 |     list1->next = newNode(2);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (7) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 8-10
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (8) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (9) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (10) ...to here
           |
    <------+
    |
  'main': events 11-12
    |
    |   65 |     list1->next = newNode(2);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (11) returning to 'main' from 'newNode'
    |   66 |     list1->next->next = newNode(3);
    |      |                         ~~~~~~~~~~
    |      |                         |
    |      |                         (12) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 13-14
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (13) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (14) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 15
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (15) ...to here
           |
    <------+
    |
  'main': events 16-17
    |
    |   66 |     list1->next->next = newNode(3);
    |      |                         ^~~~~~~~~~
    |      |                         |
    |      |                         (16) returning to 'main' from 'newNode'
    |   67 | 
    |   68 |     Node* list2 = newNode(4);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (17) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 18-20
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (18) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (19) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (20) ...to here
           |
    <------+
    |
  'main': events 21-22
    |
    |   68 |     Node* list2 = newNode(4);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (21) returning to 'main' from 'newNode'
    |   69 |     list2->next = newNode(5);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (22) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 23-25
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (23) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (24) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (25) ...to here
           |
    <------+
    |
  'main': events 26-27
    |
    |   69 |     list2->next = newNode(5);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (26) returning to 'main' from 'newNode'
    |   70 |     list2->next->next = newNode(6);
    |      |                         ~~~~~~~~~~
    |      |                         |
    |      |                         (27) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 28-29
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (28) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (29) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 30
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (30) ...to here
           |
    <------+
    |
  'main': events 31-32
    |
    |   70 |     list2->next->next = newNode(6);
    |      |                         ^~~~~~~~~~
    |      |                         |
    |      |                         (31) returning to 'main' from 'newNode'
    |   71 | 
    |   72 |     Node* result = interleaveLists(list1, list2);
    |      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                    |
    |      |                    (32) calling 'interleaveLists' from 'main'
    |
    +--> 'interleaveLists': event 33
           |
           |    9 | Node* interleaveLists(Node* list1, Node* list2) {
           |      |       ^~~~~~~~~~~~~~~
           |      |       |
           |      |       (33) entry to 'interleaveLists'
           |
         'interleaveLists': events 34-41
           |
           |   13 |     while (list1 != NULL && list2 != NULL) {
           |      |                          ^
           |      |                          |
           |      |                          (34) following 'true' branch...
           |   14 |         Node* newNode1 = (Node*)malloc(sizeof(Node));
           |      |                                 ~~~~~~~~~~~~~~~~~~~~
           |      |                                 |
           |      |                                 (35) ...to here
           |   15 | 
           |   16 |         if (!newNode1) {
           |      |            ~              
           |      |            |
           |      |            (36) following 'false' branch (when 'newNode1' is non-NULL)...
           |......
           |   20 |         newNode1->data = list1->data;
           |      |                          ~~~~~~~~~~~
           |      |                               |
           |      |                               (37) ...to here
           |......
           |   25 |         Node* newNode2 = (Node*)malloc(sizeof(Node));
           |      |                                 ~~~~~~~~~~~~~~~~~~~~
           |      |                                 |
           |      |                                 (38) allocated here
           |   26 | 
           |   27 |         if (!newNode2) {
           |      |            ~              
           |      |            |
           |      |            (39) assuming 'newNode2' is non-NULL
           |      |            (40) following 'false' branch (when 'newNode2' is non-NULL)...
           |......
           |   31 |         newNode2->data = list2->data;
           |      |                          ~~~~~~~~~~~
           |      |                               |
           |      |                               (41) ...to here
           |
         'interleaveLists': events 42-46
           |
           |   13 |     while (list1 != NULL && list2 != NULL) {
           |      |                          ^
           |      |                          |
           |      |                          (42) following 'true' branch...
           |   14 |         Node* newNode1 = (Node*)malloc(sizeof(Node));
           |      |                                 ~~~~~~~~~~~~~~~~~~~~
           |      |                                 |
           |      |                                 (43) ...to here
           |   15 | 
           |   16 |         if (!newNode1) {
           |      |            ~              
           |      |            |
           |      |            (44) following 'false' branch (when 'newNode1' is non-NULL)...
           |......
           |   20 |         newNode1->data = list1->data;
           |      |                          ~~~~~~~~~~~
           |      |                               |
           |      |                               (45) ...to here
           |......
           |   27 |         if (!newNode2) {
           |      |            ~              
           |      |            |
           |      |            (46) following 'true' branch (when 'newNode2' is NULL)...
           |
         'interleaveLists': event 47
           |
           |   28 |             return NULL;
           |      |                    ^~~~
           |      |                    |
           |      |                    (47) ...to here
           |
         'interleaveLists': event 48
           |
           |   41 | }
           |      | ^
           |      | |
           |      | (48) '<unknown>' leaks here; was allocated at (38)
           |
./collected_code_3/round4/heal_1/healed/problem-578.c: In function 'main':
./collected_code_3/round4/heal_1/healed/problem-578.c:65:17: warning: dereference of NULL 'list1' [CWE-476] [-Wanalyzer-null-dereference]
   65 |     list1->next = newNode(2);
      |     ~~~~~~~~~~~~^~~~~~~~~~~~
  'main': events 1-2
    |
    |   63 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   64 |     Node* list1 = newNode(1);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (2) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 3-4
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (3) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (4) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 5
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (5) ...to here
           |
         'newNode': event 6
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (6) '0' is NULL
           |
    <------+
    |
  'main': events 7-8
    |
    |   64 |     Node* list1 = newNode(1);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (7) returning to 'main' from 'newNode'
    |   65 |     list1->next = newNode(2);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (8) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 9-10
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (9) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (10) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 11
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (11) ...to here
           |
         'newNode': event 12
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (12) 'list1' is NULL
           |
    <------+
    |
  'main': events 13-16
    |
    |   65 |     list1->next = newNode(2);
    |      |     ~~~~~~~~~~~~~~^~~~~~~~~~
    |      |                 | |
    |      |                 | (13) returning to 'main' from 'newNode'
    |      |                 (14) 'list1' is NULL
    |      |                 (16) dereference of NULL 'list1'
    |   66 |     list1->next->next = newNode(3);
    |      |     ~~~~~~~~~~~    
    |      |          |
    |      |          (15) 'list1' is NULL
    |
./collected_code_3/round4/heal_1/healed/problem-578.c:66:23: warning: dereference of NULL '0' [CWE-476] [-Wanalyzer-null-dereference]
   66 |     list1->next->next = newNode(3);
      |     ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
  'main': events 1-2
    |
    |   63 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   64 |     Node* list1 = newNode(1);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (2) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 3-5
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (3) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (5) ...to here
           |
    <------+
    |
  'main': events 6-7
    |
    |   64 |     Node* list1 = newNode(1);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (6) returning to 'main' from 'newNode'
    |   65 |     list1->next = newNode(2);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (7) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 8-9
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (8) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (9) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 10
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (10) ...to here
           |
         'newNode': event 11
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (11) '0' is NULL
           |
    <------+
    |
  'main': events 12-14
    |
    |   65 |     list1->next = newNode(2);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (12) returning to 'main' from 'newNode'
    |   66 |     list1->next->next = newNode(3);
    |      |     ~~~~~~~~~~~         ~~~~~~~~~~
    |      |          |              |
    |      |          |              (14) calling 'newNode' from 'main'
    |      |          (13) '0' is NULL
    |
    +--> 'newNode': events 15-16
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (15) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (16) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 17
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (17) ...to here
           |
         'newNode': event 18
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (18) '0' is NULL
           |
    <------+
    |
  'main': events 19-21
    |
    |   66 |     list1->next->next = newNode(3);
    |      |     ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
    |      |                       | |
    |      |                       | (19) returning to 'main' from 'newNode'
    |      |                       (20) '0' is NULL
    |      |                       (21) dereference of NULL '*list1.next'
    |
./collected_code_3/round4/heal_1/healed/problem-578.c:69:17: warning: dereference of NULL 'list2' [CWE-476] [-Wanalyzer-null-dereference]
   69 |     list2->next = newNode(5);
      |     ~~~~~~~~~~~~^~~~~~~~~~~~
  'main': events 1-2
    |
    |   63 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   64 |     Node* list1 = newNode(1);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (2) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 3-5
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (3) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (5) ...to here
           |
    <------+
    |
  'main': events 6-7
    |
    |   64 |     Node* list1 = newNode(1);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (6) returning to 'main' from 'newNode'
    |   65 |     list1->next = newNode(2);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (7) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 8-10
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (8) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (9) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (10) ...to here
           |
    <------+
    |
  'main': events 11-12
    |
    |   65 |     list1->next = newNode(2);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (11) returning to 'main' from 'newNode'
    |   66 |     list1->next->next = newNode(3);
    |      |                         ~~~~~~~~~~
    |      |                         |
    |      |                         (12) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 13-14
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (13) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (14) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 15
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (15) ...to here
           |
         'newNode': event 16
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (16) '0' is NULL
           |
    <------+
    |
  'main': events 17-18
    |
    |   66 |     list1->next->next = newNode(3);
    |      |                         ^~~~~~~~~~
    |      |                         |
    |      |                         (17) returning to 'main' from 'newNode'
    |   67 | 
    |   68 |     Node* list2 = newNode(4);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (18) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 19-20
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (19) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (20) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 21
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (21) ...to here
           |
         'newNode': event 22
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (22) '0' is NULL
           |
    <------+
    |
  'main': events 23-24
    |
    |   68 |     Node* list2 = newNode(4);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (23) returning to 'main' from 'newNode'
    |   69 |     list2->next = newNode(5);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (24) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 25-26
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (25) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (26) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 27
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (27) ...to here
           |
         'newNode': event 28
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (28) 'list2' is NULL
           |
    <------+
    |
  'main': events 29-32
    |
    |   69 |     list2->next = newNode(5);
    |      |     ~~~~~~~~~~~~~~^~~~~~~~~~
    |      |                 | |
    |      |                 | (29) returning to 'main' from 'newNode'
    |      |                 (30) 'list2' is NULL
    |      |                 (32) dereference of NULL 'list2'
    |   70 |     list2->next->next = newNode(6);
    |      |     ~~~~~~~~~~~    
    |      |          |
    |      |          (31) 'list2' is NULL
    |
./collected_code_3/round4/heal_1/healed/problem-578.c:70:23: warning: dereference of NULL '0' [CWE-476] [-Wanalyzer-null-dereference]
   70 |     list2->next->next = newNode(6);
      |     ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
  'main': events 1-2
    |
    |   63 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   64 |     Node* list1 = newNode(1);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (2) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 3-5
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (3) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (4) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (5) ...to here
           |
    <------+
    |
  'main': events 6-7
    |
    |   64 |     Node* list1 = newNode(1);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (6) returning to 'main' from 'newNode'
    |   65 |     list1->next = newNode(2);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (7) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 8-10
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (8) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (9) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (10) ...to here
           |
    <------+
    |
  'main': events 11-12
    |
    |   65 |     list1->next = newNode(2);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (11) returning to 'main' from 'newNode'
    |   66 |     list1->next->next = newNode(3);
    |      |                         ~~~~~~~~~~
    |      |                         |
    |      |                         (12) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 13-14
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (13) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (14) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 15
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (15) ...to here
           |
         'newNode': event 16
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (16) '0' is NULL
           |
    <------+
    |
  'main': events 17-18
    |
    |   66 |     list1->next->next = newNode(3);
    |      |                         ^~~~~~~~~~
    |      |                         |
    |      |                         (17) returning to 'main' from 'newNode'
    |   67 | 
    |   68 |     Node* list2 = newNode(4);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (18) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 19-21
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (19) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (20) following 'false' branch (when 'node' is non-NULL)...
           |......
           |   50 |     node->data = data;
           |      |     ~~~~~~~~~~~~~~~~~
           |      |                |
           |      |                (21) ...to here
           |
    <------+
    |
  'main': events 22-23
    |
    |   68 |     Node* list2 = newNode(4);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (22) returning to 'main' from 'newNode'
    |   69 |     list2->next = newNode(5);
    |      |                   ~~~~~~~~~~
    |      |                   |
    |      |                   (23) calling 'newNode' from 'main'
    |
    +--> 'newNode': events 24-25
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (24) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (25) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 26
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (26) ...to here
           |
         'newNode': event 27
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (27) '0' is NULL
           |
    <------+
    |
  'main': events 28-30
    |
    |   69 |     list2->next = newNode(5);
    |      |                   ^~~~~~~~~~
    |      |                   |
    |      |                   (28) returning to 'main' from 'newNode'
    |   70 |     list2->next->next = newNode(6);
    |      |     ~~~~~~~~~~~         ~~~~~~~~~~
    |      |          |              |
    |      |          |              (30) calling 'newNode' from 'main'
    |      |          (29) '0' is NULL
    |
    +--> 'newNode': events 31-32
           |
           |   43 | Node* newNode(int data) {
           |      |       ^~~~~~~
           |      |       |
           |      |       (31) entry to 'newNode'
           |......
           |   46 |     if (!node) {
           |      |        ~
           |      |        |
           |      |        (32) following 'true' branch (when 'node' is NULL)...
           |
         'newNode': event 33
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (33) ...to here
           |
         'newNode': event 34
           |
           |   47 |         return NULL;
           |      |                ^~~~
           |      |                |
           |      |                (34) '0' is NULL
           |
    <------+
    |
  'main': events 35-37
    |
    |   70 |     list2->next->next = newNode(6);
    |      |     ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
    |      |                       | |
    |      |                       | (35) returning to 'main' from 'newNode'
    |      |                       (36) '0' is NULL
    |      |                       (37) dereference of NULL '*list2.next'
    |
