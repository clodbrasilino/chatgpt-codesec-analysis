In C programming, there is no built-in data type for tuples as in Python or some other high-level languages. However, we can use structures to create something similar to a tuple. 

Here is a simple example of how you might convert a list of strings into a tuple-like structure in C:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char **items;
    int size;
} Tuple;

Tuple* create_tuple(char **list, int size) {
    Tuple *tuple = malloc(sizeof(Tuple));
    tuple->items = malloc(size * sizeof(char *));
    tuple->size = size;

    for (int i = 0; i < size; i++) {
        tuple->items[i] = malloc((strlen(list[i]) + 1) * sizeof(char));
        strcpy(tuple->items[i], list[i]);
    }

    return tuple;
}

void free_tuple(Tuple *tuple) {
    for (int i = 0; i < tuple->size; i++) {
        free(tuple->items[i]);
    }
    free(tuple->items);
    free(tuple);
}

int main() {
    char *list[] = {"Hello", "World", "This", "Is", "C"};
    int size = sizeof(list) / sizeof(list[0]);

    Tuple *tuple = create_tuple(list, size);

    for (int i = 0; i < tuple->size; i++) {
        printf("%s ", tuple->items[i]);
    }

    free_tuple(tuple);

    return 0;
}
```

In this code, a struct `Tuple` is defined to hold an array of strings (`char **items`) and the size of the array (`int size`). The `create_tuple` function takes a list of strings and its size, allocates memory for a new `Tuple` and its `items`, and then copies the strings from the list to the `items`. The `free_tuple` function is used to free the memory allocated for a `Tuple`. The `main` function demonstrates how to use these functions to convert a list of strings to a `Tuple` and then print the strings in the `Tuple`.