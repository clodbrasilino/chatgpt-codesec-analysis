```C
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if(!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void appendNode(Node** head, int data) {
    if(*head == NULL) {
        *head = createNode(data);
    } else {
        Node* temp = *head;
        while(temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = createNode(data);
    }
}

void printList(Node* head) {
    while(head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

void packDuplicates(Node* head) {
    while(head != NULL && head->next != NULL) {
        if(head->data == head->next->data) {
            printf("[ %d ", head->data);
            while(head->next != NULL && head->data == head->next->data) {
                printf("%d ", head->next->data);
                head = head->next;
            }
            printf("] ");
        } else {
            printf("[ %d ] ", head->data);
        }
        head = head->next;
    }
    if(head != NULL) {
        printf("[ %d ] ", head->data);
    }
    printf("\n");
}

int main() {
    Node* head = NULL;
    appendNode(&head, 1);
    appendNode(&head, 1);
    appendNode(&head, 2);
    appendNode(&head, 3);
    appendNode(&head, 3);
    appendNode(&head, 4);
    appendNode(&head, 4);
    appendNode(&head, 4);
    appendNode(&head, 5);

    printList(head);
    packDuplicates(head);

    return 0;
}
```