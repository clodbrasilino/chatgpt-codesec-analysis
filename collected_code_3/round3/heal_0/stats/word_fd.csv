word,frequency
,229039
collected_code_3/problem-743-3.c:,1
In,214
function,314
'push':,40
collected_code_3/problem-743-3.c:39:19:,1
warning:,374
dereference,222
of,501
possibly-NULL,206
'newNode',73
[CWE-690],206
[-Wanalyzer-possible-null-dereference],204
39,23
|,19697
newNode->data,32
=,1367
new_data;,34
~~~~~~~~~~~~~~^~~~~~~~~~,1
events,551
1-2,168
37,31
struct,77
Node*,137
newNode,38
(struct,63
Node*)malloc(sizeof(struct,41
Node));,52
^~~~~~~~~~~~~~~~~~~~~~~~~~~,48
(1),421
this,214
call,206
could,412
return,301
NULL,268
38,22
~~~~~~~~~~~~~~~~~~~~~~~~,24
(2),284
be,213
NULL:,204
unchecked,204
value,283
from,484
collected_code_3/problem-480-3.c:,1
'getMaxOccuringChar':,6
collected_code_3/problem-480-3.c:20:12:,2
use,86
uninitialized,74
'result',33
[CWE-457],37
[-Wanalyzer-use-of-uninitialized-value],37
20,54
result;,14
^~~~~~,62
1-5,11
10,95
char,88
region,45
created,37
on,37
stack,45
here,667
capacity:,21
1,48
byte,24
11,111
12,66
for,184
(int,174
i,467
0;,311
<,473
len;,9
i++),209
{,739
~~~~~~~,22
(3),210
following,569
'false',165
branch,321
(when,321
'i,234
>=,74
len')...,10
|......,273
~~~~~~,26
(4),223
...to,569
(5),145
'main':,232
23,63
int,363
main(),97
^~~~,134
entry,303
to,417
'main',244
24,70
str[],21
"""sample",2
"string"";",2
25,55
"printf(""Max",2
occurring,2
character,8
is,119
"%c"",",1
getMaxOccuringChar(str));,2
~~~~~~~~~~~~~~~~~~~~~~~,23
calling,191
'getMaxOccuringChar',4
+-->,191
3-8,8
6,48
getMaxOccuringChar(char*,2
str),34
^~~~~~~~~~~~~~~~~~,6
(6),143
(7),102
(8),99
collected_code_3/problem-213-3.c:,1
'concatenate_tuples':,2
collected_code_3/problem-213-3.c:12:19:,1
result->first,2
malloc(strlen(tuple1->first),2
+,272
strlen(tuple2->first),2
1);,14
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
Tuple,19
*result,8
malloc(sizeof(Tuple));,10
^~~~~~~~~~~~~~~~~~~~~,12
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-207-3.c:,1
'longestRepeatedSubSeq':,1
collected_code_3/problem-207-3.c:16:28:,1
implicit,86
declaration,159
'max',8
[-Wimplicit-function-declaration],47
16,84
dp[i][j],2
"max(dp[i][j-1],",1
dp[i-1][j]);,1
^~~,29
collected_code_3/problem-341-3.c:,1
'convertToOrderedTuples':,2
collected_code_3/problem-341-3.c:22:29:,1
'tuples',7
22,63
tuples[i,2
/,22
2].first,2
set[i];,2
~~~~~~~~~~~~~~~~~~~~^~~~~~~~,1
1-3,9
29,32
33,45
*tuples,3
malloc(sizeof(Tuple),2
*,342
setSize,1
2);,11
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
34,30
35,27
"convertToOrderedTuples(set,",1
"setSize,",2
tuples);,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
'convertToOrderedTuples',2
4-7,3
void,82
convertToOrderedTuples(int,1
"*set,",1
*tuples),1
^~~~~~~~~~~~~~~~~~~~~~,11
21,67
setSize;,1
+=,2
2),11
~~~~~~~~~~~,25
'true',408
setSize')...,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
'tuples,7
(long,98
unsigned,103
int)(i,2
8',45
collected_code_3/problem-946-3.c:,1
'findMostCommon':,3
collected_code_3/problem-946-3.c:19:5:,2
19,58
"printf(""Most",4
common,4
character:,4
"%c,",4
count:,4
"%d\n"",",7
"result,",4
max);,4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
9,72
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
"""Hello,",1
"World!"";",1
findMostCommon(str);,1
~~~~~~~~~~~~~~~~~~~,13
'findMostCommon',2
5,42
findMostCommon(char*,1
^~~~~~~~~~~~~~,16
collected_code_3/problem-757-3.c:,1
'count_reverse_pairs':,1
collected_code_3/problem-757-3.c:9:9:,1
'strrev';,1
did,7
you,7
mean,1
'strsep'?,1
strrev(temp);,1
strsep,1
ld:,2
Undefined,2
symbols:,2
"_strrev,",1
referenced,2
from:,2
_count_reverse_pairs,1
in,34
ccgdEbuM.o,1
collect2:,2
error:,19
ld,2
returned,2
exit,2
status,2
collected_code_3/problem-23-3.c:,1
collected_code_3/problem-23-3.c:22:16:,1
'arr',7
arr[i],12
*)malloc(m,6
sizeof(int));,47
~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
1-4,47
**arr,3
**)malloc(n,8
sizeof(int,14
*));,16
^~~~~~~~~~~~~~~~~~~~~~~~~,9
for(int,79
n;,43
~~~~~,86
n')...,44
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,10
'arr,5
int)i,49
collected_code_3/problem-412-3.c:,1
'removeOdd':,3
collected_code_3/problem-412-3.c:20:18:,1
'prev',4
[CWE-476],9
[-Wanalyzer-null-dereference],9
node,21
prev->next;,2
~~~~~^~~~~~~~~~~~,1
event,66
prev,3
NULL;,55
2-8,1
while,23
(node,1
!=,41
NULL),27
^,57
'node',32
non-NULL)...,29
13,63
if,162
(node->data,1
%,1
2,37
0),26
branch...,248
14,62
(prev,1
==,110
~,269
NULL)...,19
15,73
head,25
node->next;,1
~~~~~~~~~~~~~~~~~,27
collected_code_3/problem-468-3.c:,1
'maxProductIS':,2
collected_code_3/problem-468-3.c:10:24:,1
'max_product',1
max_product[i],2
arr[i];,4
~~~~~~~~~~~~~~~^~~~~~~~,1
*max_product,1
(int*),3
malloc,2
(n,3
^~~~~~~~~~~~~~~~~~~~~~~~,8
(i,28
'max_product,1
4',36
collected_code_3/problem-114-3.c:,1
'assign_frequency':,5
collected_code_3/problem-114-3.c:25:37:,1
tuples[count].frequency,2
1;,66
~~~~~~~~~~~~~~~~~~~~~~~~^~~,4
(Tuple,5
*)malloc(list_size,1
sizeof(Tuple));,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,14
"assign_frequency(tuples,",1
"tuple_list,",1
list_size);,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
'assign_frequency',4
assign_frequency(Tuple,1
"*tuples,",3
"**tuple_list,",1
list_size),1
^~~~~~~~~~~~~~~~,23
count,3
list_size;,1
~~~~~~~~~~~~~,56
list_size')...,1
index,9
"find_tuple(tuples,",2
"count,",5
tuple_list[i]);,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
'find_tuple',3
'find_tuple':,1
8-10,5
find_tuple(Tuple,1
*tuple),2
^~~~~~~~~~,47
count;,2
~~~~~~~~~,13
(9),84
count')...,2
-1;,10
(10),80
<------+,80
11-12,6
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
(11),74
returning,77
(index,2
-1),2
(12),71
'index,2
-1')...,3
"strcpy(tuples[count].tuple,",1
(13),61
(14),48
int)count,5
104',4
collected_code_3/problem-578-3.c:,1
'newNode':,35
collected_code_3/problem-578-3.c:11:16:,1
node->data,27
data;,58
~~~~~~~~~~~^~~~~~,15
(Node*)malloc(sizeof(Node));,40
^~~~~~~~~~~~~~~~~~~~,30
collected_code_3/problem-358-3.c:,1
collected_code_3/problem-358-3.c:22:20:,1
'new_node',37
new_node->next,2
(*head_ref);,2
~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
48,15
49,8
list1,1
'list1',10
50,8
list2,5
51,9
result,17
52,10
53,27
"push(&list1,",2
10);,8
~~~~~~~~~~~~~~~~,37
'push',11
6-7,5
push(Node**,1
"head_ref,",2
new_data),2
new_node,22
createNode(new_data);,2
~~~~~~~~~~~~~~~~~~~~,49
'createNode',62
'createNode':,55
createNode(int,19
data),27
(!newNode),17
"printf(""Memory",11
"error\n"");",11
12-16,4
(16),40
(*head_ref),1
new_node;,1
~~~~~~~~~~~~~~~~~~~~~~,28
(15),46
collected_code_3/problem-391-3.c:,2
collected_code_3/problem-391-3.c:13:18:,1
newNode->key,4
key;,17
~~~~~~~~~~~~~^~~~~,5
~~~~~~~~~~~~~~~~~~,14
'convertListToDict':,2
collected_code_3/problem-391-3.c:24:20:,1
'values',2
"createNode(keys[i],",2
values[i]);,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
innerDict1,1
"convertListToDict((char*[]){""key1"",",1
"""key2"",",2
"NULL},",1
"NULL,",2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'convertListToDict',2
3-9,1
convertListToDict(char**,1
"keys,",1
Node**,7
"values,",1
size),16
^~~~~~~~~~~~~~~~~,9
size;,32
~~~~~~~~,43
size')...,42
if(head,1
'head',24
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'values,1
collected_code_3/problem-444-3.c:,1
collected_code_3/problem-444-3.c:23:24:,1
tuples[i].size,3
5;,12
~~~~~~~~~~~~~~~^~~,2
Tuple*,7
tuples,4
malloc(tupleCount,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,13
tupleCount;,7
~~~~~~~~~~~~~~,39
tupleCount')...,7
16',19
collected_code_3/problem-444-3.c:26:31:,1
'*tuples_57,2
_17.data,2
int)j,27
26,55
tuples[i].data[j],4
j;,16
~~~~~~~~~~~~~~~~~~^~~,2
1-6,24
~~^~~~~~~~~~~~,2
tuples[i].data,2
malloc(tuples[i].size,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
j,51
tuples[i].size;,1
j++),24
~~~~~~~~~~~~~~~~~~~~~,18
collected_code_3/problem-450-3.c:,1
'extractStrings':,8
collected_code_3/problem-450-3.c:10:27:,5
result[index],12
(char,15
*)malloc(sizeof(char),9
(strSize,9
1));,15
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
**result,9
**)malloc(sizeof(char,6
*),8
listSize);,5
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
7,56
8,55
listSize;,5
~~~~~~~~~~~~,59
listSize')...,29
if(strlen(list[i]),5
strSize),9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
'result,13
int)index,2
heap-based,4
buffer,5
overflow,4
[CWE-122],4
[-Wanalyzer-out-of-bounds],5
"extractStrings(list,",4
"listSize,",8
strSize);,4
'extractStrings',8
3-25,1
**extractStrings(char,4
"**list,",4
40,23
bytes,17
~~~,39
(17),35
(19),32
(21),30
(23),24
(18),36
(20),31
(22),25
(24),22
(25),23
out-of-bounds,5
write,24
till,5
47,11
but,9
ends,5
at,23
note:,100
beyond,4
the,20
end,5
3-27,1
(26),16
(27),14
55,10
collected_code_3/problem-450-3.c:15:19:,4
3-22,1
3-24,1
collected_code_3/problem-516-3.c:35:6:,1
conflicting,3
types,3
'radixsort';,1
have,9
'void(int,1
"*,",4
int)',3
radixsort(int,1
"array[],",1
^~~~~~~~~,16
file,1
included,1
collected_code_3/problem-516-3.c:2:,1
/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/stdlib.h:348:10:,1
previous,3
'radixsort',1
with,3
type,7
'int(const,1
"**,",1
"int,",2
const,2
348,1
radixsort(const,1
"**__base,",1
"__nel,",1
"*__table,",1
collected_code_3/problem-298-3.c:,1
collected_code_3/problem-298-3.c:11:21:,1
new_node->data,32
~~~~~~~~~~~~~~~~^~~~~~~~~~,7
42,26
20);,1
3-5,19
push(struct,1
Node*),10
malloc(sizeof(struct,19
~~~~~~~~~~~~~~~~~~~~~~~~~~~,33
~~~~~~~~~~~~~~~~~~~~~~~~~~,24
collected_code_3/problem-251-3.c:,1
collected_code_3/problem-251-3.c:11:16:,1
44,26
45,15
newNode(1);,5
~~~~~~~~~~,19
newNode(int,8
^~~~~~~,34
collected_code_3/problem-317-3.c:,1
collected_code_3/problem-317-3.c:11:16:,1
collected_code_3/problem-245-3.c:,1
'maxBiotonic':,3
collected_code_3/problem-245-3.c:9:12:,1
'inc',2
inc[0],4
~~~~~~~^~~,3
*inc,2
*)malloc(sizeof(int),12
n);,12
^~~~~~~~~~~~~~~~~~~~~~~,8
collected_code_3/problem-245-3.c:20:23:,1
'dec',2
max,4
dec[0],2
-,48
~~~^~~,3
36,36
"printf(""Length",2
length,1
Bitonic,1
Subarray,1
"maxBiotonic(arr,",1
n));,4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'maxBiotonic',2
3-13,5
4,38
maxBiotonic(int,1
"*arr,",4
n),27
^~~~~~~~~~~,36
*dec,1
inc[i],1
(arr[i],7
arr[i,2
1]),3
?,3
inc[i,1
1],8
:,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
n,23
2;,27
i--),4
0')...,16
17,61
dec[i],1
dec[i,1
collected_code_3/problem-715-3.c:,2
'string_to_tuple':,7
collected_code_3/problem-715-3.c:24:23:,1
'tuple.data',4
tuple.data[i],2
atoi(token);,2
~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
tuple.data,4
*)malloc(tuple.size,3
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
2-4,2
token,3
'token',6
'tuple.data,2
collected_code_3/problem-715-3.c:37:9:,2
'*_1,2
_3',2
"printf(""%d"",",5
tuple.data[i]);,4
31,32
32,32
"""1,2,3,4,5"";",2
tuple,4
string_to_tuple(str);,4
'string_to_tuple',6
string_to_tuple(char,2
*str),2
^~~~~~~~~~~~~~~,7
str[i];,20
(str[i],6
"',')",2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,10
heap,48
9-10,3
28,31
tuple;,4
11-14,4
tuple.size;,8
collected_code_3/problem-653-3.c:,2
collected_code_3/problem-653-3.c:18:20:,1
18,53
newNode->value,5
value;,5
~~~~~~~~~~~~~~~^~~~~~~,2
'createMap':,2
collected_code_3/problem-653-3.c:25:17:,1
'newMap',2
newMap->key,2
~~~~~~~~~~~~^~~~~,1
Map*,1
newMap,1
(Map*)malloc(sizeof(Map));,1
^~~~~~~~~~~~~~~~~~~,4
collected_code_3/problem-400-3.c:,1
'extractFrequency':,5
collected_code_3/problem-400-3.c:29:37:,1
'tupleCount',1
tupleCount[count].count,2
extractFrequency(char,1
"tuples[][MAX],",1
'extractFrequency',3
*tupleCount,1
*)malloc(n,6
~~~~~~~~~~~~~~~~~~~~~~~~~,32
"findTuple(tupleCount,",2
tuples[i]);,3
'findTuple',3
'findTuple':,1
6-8,2
findTuple(Tuple,1
"tupleCount,",1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
27,34
"strcpy(tupleCount[count].tuple,",1
'tupleCount,1
collected_code_3/problem-827-3.c:,1
collected_code_3/problem-827-3.c:14:18:,3
'malloc',56
**list,3
malloc(num_lists,3
collected_code_3/problem-827-3.c:2:1:,1
include,72
'<stdlib.h>',48
or,85
provide,74
a,103
#include,31
<stdio.h>,16
+++,31
|+#include,31
<stdlib.h>,26
incompatible,37
built-in,40
[-Wbuiltin-declaration-mismatch],37
collected_code_3/problem-827-3.c:27:9:,4
'free',28
free(list[i]);,1
collected_code_3/problem-827-3.c:29:5:,2
free(list);,1
collected_code_3/problem-827-3.c:16:17:,1
'list',5
list[i],3
malloc(list_length,3
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
num_lists;,2
num_lists')...,2
'list,1
collected_code_3/problem-827-3.c:18:24:,1
'*list_31,2
_10,4
list[i][j],2
~~~~~~~~~~~^~~~~~~,1
~~^~~~~~~~~~~,2
list_length;,1
~~~~~~~~~~~~~~~,38
'j,18
list_length')...,1
collected_code_3/problem-833-3.c:,3
'createDictionary':,11
collected_code_3/problem-833-3.c:16:16:,1
'dict',5
dict->head,2
Dictionary,13
*dict,10
Dictionary));,1
'addKey':,2
collected_code_3/problem-833-3.c:23:15:,1
node->key,4
~~~~~~~~~~^~~~~,3
Node,16
*node,2
'getKeys':,2
collected_code_3/problem-833-3.c:33:17:,1
'keys',1
keys[i],2
node->key;,2
~~~~~~~~^~~~~~~~~~~,1
30,23
**keys,1
malloc(sizeof(char,1
dict->count);,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
dict->head;,1
dict->count;,1
'keys,1
collected_code_3/problem-528-3.c:,2
'findMinLengthLists':,2
collected_code_3/problem-528-3.c:21:42:,1
'minLengthLists',1
minLengthLists[*numMinLists],2
lists[i];,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
List,4
**minLengthLists,1
malloc(numLists,2
sizeof(List,2
*numMinLists,1
numLists;,4
numLists')...,4
if(lists[i]->length,1
minLength),1
'minLengthLists,1
int)*numMinLists,1
collected_code_3/problem-528-3.c:33:18:,1
'lists',1
lists[i],4
malloc(sizeof(List));,5
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~,1
**lists,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,16
'lists,1
collected_code_3/problem-528-3.c:34:26:,1
'*lists_74,2
_8',4
lists[i]->length,3
~~~~~~~~~~~~~~~~~^~~~~~~,3
~~^~~~~~~~~~,2
collected_code_3/problem-528-3.c:37:35:,1
'**_26.elements,2
lists[i]->elements[j],2
~~~~~~~~~~~~~~~~~~~~~~^~~,4
lists[i]->elements,1
malloc(lists[i]->length,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,10
lists[i]->length;,1
collected_code_3/problem-691-3.c:,1
'groupBySecond':,4
collected_code_3/problem-691-3.c:17:19:,1
'groups',1
groups[i],4
groups,3
(Node**)malloc(sizeof(Node*),2
size);,23
^~~~~~~~~~~~~~~~~~~~~~~~~~~~,9
'groups,1
collected_code_3/problem-691-3.c:22:23:,1
tuples[i].first;,2
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~,1
46,16
"groupBySecond(tuples,",1
'groupBySecond',2
3-19,1
groupBySecond(Tuple*,1
"tuples,",1
^~~~~~~~~~~~~,27
collected_code_3/problem-31-3.c:,3
'createHeap':,15
collected_code_3/problem-31-3.c:17:16:,1
'heap',11
heap->data,8
(NumFreq*)malloc(capacity,8
sizeof(NumFreq));,8
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'topKFrequent':,21
69,9
topKFrequent(int*,8
"nums,",8
"numsSize,",13
k),11
^~~~~~~~~~~~,9
'topKFrequent',38
70,9
int*,22
freq,10
"(int*)calloc(numsSize,",9
71,13
numsSize;,18
++i),28
numsSize')...,34
74,21
Heap*,40
createHeap(k);,14
'createHeap',34
5-7,4
createHeap(int,11
capacity),20
(Heap*)malloc(sizeof(Heap));,8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
'insertHeap':,5
collected_code_3/problem-31-3.c:48:26:,2
'*heap_41(D)->data.freq',2
(heap->data[0].freq,4
numFreq.freq),4
72,9
freq[nums[i]]++;,8
73,8
7-8,4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,12
9-14,4
75,16
76,9
(freq[i],11
>,29
77,10
NumFreq,8
numFreq,4
"{i,",4
freq[i]};,4
78,11
"insertHeap(heap,",5
numFreq);,5
'insertHeap',9
15-18,4
insertHeap(Heap*,4
"heap,",7
numFreq),4
(heap->size,7
heap->capacity),7
'*heap.data',2
collected_code_3/problem-31-3.c:53:32:,1
'*heap.data,2
int)*heap.size,4
heap->data[heap->size],3
numFreq;,3
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~,1
collected_code_3/problem-31-3.c:76:17:,1
'freq',5
~~~~^~~,2
1-8,5
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~,8
'freq,2
collected_code_3/problem-31-3.c:83:1:,4
leak,16
'<unknown>',17
[CWE-401],16
[-Wanalyzer-malloc-leak],16
83,8
},28
85,4
89,4
"topKFrequent(nums,",4
k);,8
3-10,7
allocated,33
13-22,2
82,8
printHeap(heap);,8
'printHeap',12
'printHeap':,4
23-25,1
63,10
printHeap(Heap*,4
heap),4
64,12
heap->size;,5
65,7
"printf(""%d",9
""",",16
heap->data[i].num);,4
66,6
"printf(""\n"");",4
26-27,1
leaks,16
here;,16
was,17
11-13,1
assuming,15
non-NULL,15
14-23,1
24-26,3
27-28,1
(28),12
3-20,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,6
21-23,2
24-25,1
23-28,1
54,8
0,5
&&,29
heap->data[(i,1
1),7
2].freq,1
heap->data[i].freq),1
59,12
heap->size++;,1
29-32,1
(30),8
(29),9
(31),8
(32),7
33-35,1
(33),6
(34),5
(35),5
36-37,1
(36),6
(37),5
collected_code_3/problem-215-3.c:,1
'decode':,3
collected_code_3/problem-215-3.c:16:29:,1
result[j++],6
~~~~~~~~~~~~^~~~~~~~,4
char*,23
(char*)malloc(sizeof(char),31
len,16
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'0',19
str[i],13
<=,32
'9'),1
(sizetype)j',10
collected_code_3/problem-215-3.c:21:15:,1
result[j],4
'\0';,20
~~~~~~~~~~^~~~~~,6
"""2a3b4c"";",1
decoded_str,1
decode(str);,1
'decode',2
decode(char*,1
strlen(str);,38
collected_code_3/problem-679-3.c:,1
'create_dict':,5
collected_code_3/problem-679-3.c:11:12:,1
'd',2
d->key,2
~~~~~~~^~~~~,1
dict*,2
d,1
malloc(sizeof(dict));,1
collected_code_3/problem-353-3.c:,1
collected_code_3/problem-353-3.c:20:16:,1
malloc(cols,3
~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
int**,4
arr,2
malloc(rows,1
sizeof(int*));,3
for(i,39
rows;,8
rows')...,16
collected_code_3/problem-353-3.c:22:23:,1
'*arr_46,2
_11,6
arr[i][j],4
cols,7
~~~~~~~~~~^~~~~~~~~~~~~~,1
~~^~~~~~,6
for(j,5
cols;,3
cols')...,4
collected_code_3/problem-421-3.c:,2
'concatenate':,3
collected_code_3/problem-421-3.c:6:20:,3
malloc(1000,2
sizeof(char));,5
collected_code_3/problem-421-3.c:3:1:,1
<string.h>,11
3,25
collected_code_3/problem-421-3.c:22:5:,4
free(result);,2
collected_code_3/problem-127-3.c:,1
'multiply':,1
collected_code_3/problem-127-3.c:5:24:,1
'abs',2
abs(b);,1
collected_code_3/problem-127-3.c:2:1:,1
collected_code_3/problem-582-3.c:,1
collected_code_3/problem-582-3.c:20:17:,1
dict->pairs,2
malloc(sizeof(Dictionary));,6
^~~~~~~~~~~~~~~~~~~~~~~~~~,8
collected_code_3/problem-769-3.c:,1
collected_code_3/problem-769-3.c:11:21:,1
collected_code_3/problem-902-3.c:,1
'combineDict':,7
collected_code_3/problem-902-3.c:18:25:,1
result[k].value,4
dict1[i].value;,2
~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,5
dict,4
malloc((size1,2
size2),3
sizeof(dict));,3
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
size1;,4
size1')...,4
"strcpy(result[k].key,",2
dict1[i].key);,1
int)k,3
collected_code_3/problem-902-3.c:31:29:,1
dict2[i].value;,2
size2;,2
size2')...,2
k;,3
k')...,2
if(j,1
dict2[i].key);,1
collected_code_3/problem-674-3.c:,2
'createWord':,5
collected_code_3/problem-674-3.c:16:19:,1
'newWord',3
newWord->next,3
'removeDuplicates':,23
removeDuplicates(char*,2
'removeDuplicates',32
while(token,3
"if(!contains(root,",4
token)),4
'contains',6
'contains':,4
contains(struct,2
Word*,9
"root,",2
^~~~~~~~,8
while(temp,2
'temp',13
8-11,1
newWord,5
createWord(token);,3
'createWord',5
12-13,5
createWord(char*,2
Word*),2
Word));,2
collected_code_3/problem-674-3.c:42:1:,1
'root',2
removeDuplicates(str);,1
4-6,2
8-9,1
10-13,2
14-15,1
18-20,2
collected_code_3/problem-262-3.c:,1
collected_code_3/problem-262-3.c:31:20:,1
~~~~~~~~~~~~~~~^~~~~~~~~~,10
collected_code_3/problem-748-3.c:,1
'addSpaces':,3
collected_code_3/problem-748-3.c:7:20:,3
*newStr,4
malloc(strlen(str),9
collected_code_3/problem-748-3.c:4:1:,1
<regex.h>,3
collected_code_3/problem-748-3.c:21:5:,4
free(newStr);,1
collected_code_3/problem-748-3.c:16:21:,1
'newStr',2
newStr[j++],2
"if(regexec(&regex,",1
"&str[i],",1
"0,",15
'newStr,2
collected_code_3/problem-748-3.c:19:15:,1
newStr[j],2
collected_code_3/problem-937-3.c:,1
collected_code_3/problem-937-3.c:20:12:,2
"'%c'."",",1
collected_code_3/problem-795-3.c:,3
collected_code_3/problem-795-3.c:17:16:,1
heap->size,4
~~~~~~~~~~~^~~,8
67,13
createHeap(n);,9
'insert':,4
collected_code_3/problem-795-3.c:48:40:,2
'*heap_20(D)->items.price',2
(item.price,4
heap->items[0].price),4
~~~~~~~~~~~~~~^~~~~~,14
3-4,17
heap->items,3
(Item*)malloc(sizeof(Item),4
capacity);,3
5-8,4
"insert(heap,",5
items[i]);,5
'insert',6
9-12,6
insert(Heap*,3
Item,3
item),5
'*heap.items',2
collected_code_3/problem-795-3.c:53:35:,1
'*heap.items,2
heap->items[heap->size++],2
item;,5
~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~,1
collected_code_3/problem-795-3.c:75:9:,1
'items',1
68,2
Item*,1
items,1
'items,1
collected_code_3/problem-510-3.c:,1
'countSubsequences':,1
collected_code_3/problem-510-3.c:5:5:,3
'memset',12
"memset(dp,",4
sizeof(dp));,2
collected_code_3/problem-510-3.c:2:1:,1
'<string.h>',14
collected_code_3/problem-456-3.c:,1
'reverseString':,5
collected_code_3/problem-456-3.c:8:16:,2
string,9
literal,8
[-Wanalyzer-write-to-string-literal],4
str[len,10
1];,6
~~~~~~~^~~~~~~~~~~~~~~~~~,2
"reverseStringList(list,",4
'reverseStringList',12
'reverseStringList':,4
3-6,9
reverseStringList(char**,4
"list,",4
reverseString(list[i]);,4
'reverseString',8
7-10,4
reverseString(char*,4
temp,14
7-12,4
collected_code_3/problem-456-3.c:9:26:,2
temp;,4
~~~~~~~~~~~~~~~~~^~~~~~,2
collected_code_3/problem-206-3.c:,2
'concatenate_adjacent':,2
collected_code_3/problem-206-3.c:8:19:,1
result[i],4
(strlen(tuples[i]),2
strlen(tuples[i+1]),2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
char**,44
(char**)malloc(sizeof(char*),18
(size,2
size,8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-206-3.c:19:19:,1
tuples[i],4
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-610-3.c:,1
collected_code_3/problem-610-3.c:27:21:,1
collected_code_3/problem-118-3.c:,1
'convertStringToList':,4
collected_code_3/problem-118-3.c:16:23:,1
*str++;,2
~~~~~~~~~~~~~~^~~~~~~~,1
(*str),2
collected_code_3/problem-604-3.c:,2
'reverseWords':,1
collected_code_3/problem-604-3.c:11:13:,2
'reverse',2
"reverse(word_begin,",2
At,2
top,2
level:,2
collected_code_3/problem-604-3.c:21:6:,1
'reverse';,1
'void(char,2
*)',2
reverse(char,1
"*begin,",1
*end),1
collected_code_3/problem-953-3.c:,1
'minSubsets':,2
collected_code_3/problem-953-3.c:19:17:,1
maxFreq),2
(int*)calloc(max,1
"1,",3
maxFreq,1
'max,1
i')...,9
collected_code_3/problem-36-3.c:,1
'findNthDigit':,3
collected_code_3/problem-36-3.c:9:12:,2
'digit',4
digit;,6
^~~~~,10
"printf(""The",2
%dth,2
digit,1
proper,1
fraction,1
%d/%d,1
is:,1
"n,",12
"numerator,",2
"denominator,",3
"findNthDigit(numerator,",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'findNthDigit',2
findNthDigit(int,1
collected_code_3/problem-834-3.c:,1
'generateSpiralMatrix':,7
collected_code_3/problem-834-3.c:7:19:,1
'matrix',2
matrix[i],5
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**matrix,6
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,5
'matrix,2
collected_code_3/problem-834-3.c:16:19:,2
'*matrix_83,6
_11',2
matrix[rowStart][i],6
value++;,6
~~~~~~^~~~~~~~~~,2
generateSpiralMatrix(n);,5
'generateSpiralMatrix',10
3-11,7
generateSpiralMatrix(int,5
(value,5
colStart;,3
colEnd;,3
colEnd')...,3
int)rowStart,1
collected_code_3/problem-834-3.c:16:33:,1
~~~~~~~~~~~~~~~~~~~~^~~~~~~~~,1
collected_code_3/problem-834-3.c:38:13:,2
'*_45,2
_47',2
matrix[i][j]);,4
3-15,5
_43,2
collected_code_3/problem-696-3.c:,2
collected_code_3/problem-696-3.c:11:16:,1
'zipLists':,7
collected_code_3/problem-696-3.c:31:16:,1
head->next;,2
~~~~^~~~~~,1
"zipLists(list1,",1
list2);,1
'zipLists',4
zipLists(Node*,1
"list1,",1
list2),1
newNode(0);,2
(list1,7
||,29
current->next,8
list1;,3
(list2,3
'list2',3
list2;,3
15-20,1
21-26,1
27-29,2
collected_code_3/problem-469-3.c:,1
'maxProfit':,1
collected_code_3/problem-469-3.c:15:43:,2
'INT_MIN',2
undeclared,15
(first,8
function),8
buy[i],2
INT_MIN;,2
collected_code_3/problem-469-3.c:3:1:,1
defined,6
header,6
'<limits.h>';,3
forget,6
'#include,6
<limits.h>'?,3
<limits.h>,3
each,14
identifier,7
reported,7
only,7
once,7
it,9
appears,7
collected_code_3/problem-157-3.c:,1
'runLengthEncoding':,3
collected_code_3/problem-157-3.c:15:25:,1
str[i,1
collected_code_3/problem-157-3.c:21:15:,1
"""aaabbbccc"";",1
encodedStr,1
runLengthEncoding(str);,1
'runLengthEncoding',2
runLengthEncoding(char*,1
collected_code_3/problem-966-3.c:,1
collected_code_3/problem-966-3.c:30:16:,1
list->size,4
3;,9
TupleList,9
*list,2
malloc(sizeof(TupleList));,1
collected_code_3/problem-966-3.c:33:21:,1
'*list.tuples',2
list->tuples[0],3
~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~,1
list->tuples,1
malloc(sizeof(Tuple*),1
list->size);,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
collected_code_3/problem-966-3.c:34:27:,1
'*list_37->tuples',2
list->tuples[0]->size,2
collected_code_3/problem-966-3.c:37:27:,1
'*_12,2
list->tuples[1]->size,2
list->tuples[1],1
collected_code_3/problem-966-3.c:39:34:,1
'**_20.elements',2
list->tuples[1]->elements[0],2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~,1
list->tuples[1]->elements,1
malloc(sizeof(int),3
collected_code_3/problem-966-3.c:43:27:,1
'*_31,2
43,22
list->tuples[2]->size,2
list->tuples[2],1
collected_code_3/problem-361-3.c:,2
collected_code_3/problem-361-3.c:16:19:,1
'createList':,8
collected_code_3/problem-361-3.c:23:19:,1
'newList',4
newList->head,2
node;,2
List*,1
newList,6
(List*)malloc(sizeof(List));,2
collected_code_3/problem-893-3.c:,1
collected_code_3/problem-893-3.c:25:26:,3
collected_code_3/problem-893-3.c:2:1:,1
collected_code_3/problem-893-3.c:29:16:,1
head->data,4
collected_code_3/problem-893-3.c:32:18:,1
'second',6
second->data,4
~~~~~~~~~~~~~^~~,3
second,3
collected_code_3/problem-893-3.c:35:17:,1
'third',6
third->data,4
~~~~~~~~~~~~^~~,2
third,3
collected_code_3/problem-294-3.c:,1
collected_code_3/problem-294-3.c:15:19:,1
newNode->type,2
type;,2
collected_code_3/problem-721-3.c:,1
'findMaxAverage':,1
collected_code_3/problem-721-3.c:20:24:,1
"max(dp[i-1][j],",1
dp[i][j-1]),1
mat[i][j];,1
collected_code_3/problem-792-3.c:,1
collected_code_3/problem-792-3.c:24:28:,3
arr[0],8
collected_code_3/problem-792-3.c:2:1:,1
collected_code_3/problem-265-3.c:,1
collected_code_3/problem-265-3.c:11:19:,1
collected_code_3/problem-115-3.c:,1
collected_code_3/problem-115-3.c:21:21:,1
'dictList',1
dictList[i],3
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
Dictionary**,1
dictList,1
malloc(size,1
sizeof(Dictionary*));,1
'dictList,1
collected_code_3/problem-115-3.c:22:28:,1
'*dictList_24,2
dictList[i]->count,2
~~~~~~~~~~~~~~~~~~~^~~,1
collected_code_3/problem-843-3.c:,1
'nthSuperUglyNumber':,4
collected_code_3/problem-843-3.c:37:17:,1
heap[i],4
(HeapNode*)malloc(sizeof(HeapNode));,4
~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
"printf(""%d\n"",",5
"nthSuperUglyNumber(n,",3
"primes,",6
primesSize));,3
'nthSuperUglyNumber',6
3-7,2
nthSuperUglyNumber(int,3
primesSize),3
ugly,2
(int*)malloc(sizeof(int),4
HeapNode**,2
(HeapNode**)malloc(sizeof(HeapNode*),2
primesSize);,2
primesSize;,3
primesSize')...,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,4
'heap,2
collected_code_3/problem-843-3.c:38:22:,1
'*heap_67,2
_13',2
heap[i]->val,2
primes[i];,2
~~~~~~~~~~~~~^~~~~~~~~~~,1
collected_code_3/problem-843-3.c:43:13:,1
'ugly',2
ugly[0],2
~~~~~~~~^~~,9
collected_code_3/problem-591-3.c:,1
collected_code_3/problem-591-3.c:27:43:,3
collected_code_3/problem-591-3.c:2:1:,1
collected_code_3/problem-591-3.c:28:20:,1
collected_code_3/problem-464-3.c:,1
collected_code_3/problem-464-3.c:12:15:,1
collected_code_3/problem-522-3.c:,1
'longestBitonic':,4
collected_code_3/problem-522-3.c:12:16:,1
'lis',2
lis[i],8
lds[i],7
~~~~~~~^~~~~~~~~~~~,2
*lis,1
'lis,2
collected_code_3/problem-522-3.c:12:25:,1
'lds',1
*lds,2
'lds,1
collected_code_3/problem-522-3.c:21:43:,1
'*lds_102,2
_45',2
arr[j],3
lds[j],2
longest,1
bitonic,1
subsequence,1
"longestBitonic(arr,",1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'longestBitonic',2
3-23,1
longestBitonic(int,1
"arr[],",4
(j,6
i;,17
lis[j],1
j--),1
collected_code_3/problem-700-3.c:,1
collected_code_3/problem-700-3.c:20:39:,3
collected_code_3/problem-700-3.c:2:1:,1
collected_code_3/problem-700-3.c:21:16:,1
temp->data,4
collected_code_3/problem-536-3.c:,1
collected_code_3/problem-536-3.c:25:26:,3
collected_code_3/problem-536-3.c:2:1:,1
collected_code_3/problem-536-3.c:44:5:,4
free(head);,2
collected_code_3/problem-536-3.c:29:16:,1
collected_code_3/problem-536-3.c:32:18:,1
collected_code_3/problem-536-3.c:35:17:,1
collected_code_3/problem-120-3.c:,1
'maxProduct':,1
collected_code_3/problem-120-3.c:12:19:,1
max_val,1
max(prev_max,1
"arr[i],",4
max(prev_min,1
arr[i]));,2
collected_code_3/problem-120-3.c:13:19:,1
'min',3
min_val,1
min(prev_max,1
min(prev_min,1
collected_code_3/problem-585-3.c:,1
'pushHeap':,2
collected_code_3/problem-585-3.c:26:9:,1
'h',2
if(h->count,2
h->size),2
~^~~~~~~,1
80,2
"findNExpensiveItems(prices,",1
sizeof(prices),1
sizeof(prices[0]));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'findNExpensiveItems',5
'findNExpensiveItems':,2
61,3
findNExpensiveItems(int,1
"*prices,",1
62,8
Heap,4
*h,2
*createHeap(int,1
"pushHeap(h,",1
prices[i]);,1
'pushHeap',2
pushHeap(Heap,1
"*h,",1
value),2
collected_code_3/problem-553-3.c:,1
collected_code_3/problem-553-3.c:13:14:,3
'strlen',12
tupleNum[strlen(tupleNum),2
collected_code_3/problem-553-3.c:3:1:,1
collected_code_3/problem-771-3.c:,1
'areParenthesisBalanced':,18
collected_code_3/problem-771-3.c:53:39:,3
Stack*,35
createStack(strlen(exp));,10
collected_code_3/problem-771-3.c:3:1:,1
collected_code_3/problem-771-3.c:62:24:,1
'stack',22
exp[100],4
"""{()}[]"";",4
79,4
(areParenthesisBalanced(exp)),4
'areParenthesisBalanced',18
areParenthesisBalanced(char,4
exp[]),4
'createStack',26
'createStack':,10
5-11,4
createStack(unsigned,9
Stack*),4
Stack));,4
(!stack),4
stack->top,8
(!stack->array),4
stack;,4
if(!stack),4
|cc1:,5
(14):,4
15-25,1
57,9
(exp[i]),4
58,10
(exp[i],8
'{',4
exp[i],16
'(',4
'['),4
"push(stack,",7
exp[i]);,4
60,4
'}',4
')',4
']'),4
(isEmpty(stack)),2
i++;,4
collected_code_3/problem-771-3.c:64:24:,1
15-27,1
else,5
"(!isMatchingPair(pop(stack),",2
exp[i])),2
'pop',3
'pop':,1
28-30,1
pop(struct,1
stack),1
(!isEmpty(stack)),1
stack->array[stack->top--];,1
31-32,1
collected_code_3/problem-771-3.c:71:16:,2
15-21,2
stack->capacity,4
capacity;,4
stack->array,4
malloc(stack->capacity,4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,3
collected_code_3/problem-367-3.c:,1
collected_code_3/problem-367-3.c:12:16:,1
*root,2
collected_code_3/problem-97-3.c:,2
'find_frequency':,3
collected_code_3/problem-97-3.c:10:22:,2
'*arr_12(D),2
_2',6
frequency[arr[i]]++;,4
1-11,2
"printf(""Enter",7
list,7
%d:,5
i+1);,5
"scanf(""%d"",",3
&m);,3
elements,6
m;,2
"find_frequency(arr[i],",2
sizeof(arr[i])/sizeof(arr[i][0]));,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'find_frequency',4
12-15,3
find_frequency(int,2
collected_code_3/problem-97-3.c:26:16:,1
collected_code_3/problem-750-3.c:,1
'addTupleToList':,2
collected_code_3/problem-750-3.c:16:19:,1
~~~~~~~~~~~~~~^~~~~~~,1
collected_code_3/problem-200-3.c:,1
'findMaxIndexes':,2
collected_code_3/problem-200-3.c:15:30:,1
'indexes',1
indexes[count++],2
~~~~~~~~~~~~~~~~~^~~,3
indexes,1
(int*)malloc(len,1
max),2
'indexes,1
collected_code_3/problem-493-3.c:,1
'calculate_hexagon_grid':,1
collected_code_3/problem-493-3.c:22:32:,2
'M_PI',1
double,1
angle_rad,1
M_PI,1
180,1
angle_deg;,1
collected_code_3/problem-493-3.c:23:66:,3
'cos',4
grid[i].points[j].x,2
col_width,2
hexagon_size,3
cos(angle_rad);,2
collected_code_3/problem-493-3.c:3:1:,1
'<math.h>',6
<math.h>,2
collected_code_3/problem-493-3.c:24:67:,4
'sin',4
grid[i].points[j].y,1
row_height,1
sin(angle_rad);,1
collected_code_3/problem-869-3.c:,1
collected_code_3/problem-869-3.c:11:16:,1
collected_code_3/problem-328-3.c:,1
collected_code_3/problem-328-3.c:39:20:,1
collected_code_3/problem-712-3.c:,1
collected_code_3/problem-712-3.c:11:16:,1
collected_code_3/problem-418-3.c:,2
collected_code_3/problem-418-3.c:11:20:,1
'maxSubList':,3
collected_code_3/problem-418-3.c:19:17:,1
check,1
after,4
already,2
dereferencing,1
[-Wanalyzer-deref-before-check],1
(head,4
prev_data,1
head->data;,1
pointer,2
dereferenced,2
checked,1
collected_code_3/problem-898-3.c:,1
'extractElements':,2
collected_code_3/problem-898-3.c:7:19:,1
array[start,2
i];,2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~,2
malloc(count,1
collected_code_3/problem-640-3.c:,3
'removeParenthesis':,3
collected_code_3/problem-640-3.c:7:20:,3
collected_code_3/problem-640-3.c:3:1:,1
collected_code_3/problem-640-3.c:30:5:,4
collected_code_3/problem-640-3.c:18:25:,1
while(str[i]),1
if(str[i],1
'('),3
collected_code_3/problem-277-3.c:,1
'filter_dict':,2
collected_code_3/problem-277-3.c:14:30:,1
'filtered_dict',1
filtered_dict[j],2
input_dict[i];,2
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,2
*filtered_dict,1
malloc(length,1
length;,1
length')...,1
(input_dict[i].value,1
filter_value),1
'filtered_dict,1
collected_code_3/problem-936-3.c:,1
'rearrangeTuples':,2
collected_code_3/problem-936-3.c:13:17:,1
temp[i],2
tuples[order[i]];,2
~~~~~~~~^~~~~~~~~~~~~~~~~~,1
(Tuple*)malloc(size,1
'temp,1
collected_code_3/problem-457-3.c:,1
collected_code_3/problem-457-3.c:11:19:,1
collected_code_3/problem-661-3.c:,1
'maxSumWithoutThreeConsec':,1
collected_code_3/problem-661-3.c:11:18:,1
sum[2],1
"max(sum[1],",1
max(arr[1],1
"arr[2],",1
arr[2]));,1
collected_code_3/problem-958-3.c:,1
'intToRoman':,4
collected_code_3/problem-958-3.c:13:13:,4
'strcat',5
"strcat(result,",4
symbols[i]);,4
collected_code_3/problem-958-3.c:3:1:,1
where,4
non-null,6
expected,6
[-Wanalyzer-possible-null-argument],2
16);,1
while(num,2
'num,1
(3):,1
values[i]),1
~~~~^~~~~~~~~~~~,1
num,7
-=,1
values[i];,1
argument,4
('result'),2
<built-in>:,2
must,2
collected_code_3/problem-325-3.c:,1
'minSquares':,1
collected_code_3/problem-325-3.c:16:19:,1
res,2
"min(res,",1
minSquares(n,1
temp));,1
"_min,",1
_minSquares,1
ccKnlKPv.o,1
collected_code_3/problem-263-3.c:,2
collected_code_3/problem-263-3.c:17:23:,1
'dictionary',3
dictionary->items,3
malloc(sizeof(Item),3
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~,1
Dictionary*,7
dict1,3
createDictionary();,3
'createDictionary',13
createDictionary(),2
dictionary,3
'add':,2
collected_code_3/problem-263-3.c:28:45:,1
'*dictionary.items,2
int)*dictionary.size,2
dictionary->items[dictionary->size].key,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~,1
5-6,5
"add(dict1,",1
"""key1"",",6
"""value1"");",1
'add',2
add(Dictionary*,1
"dictionary,",1
"key,",1
(dictionary->size,1
dictionary->capacity),1
collected_code_3/problem-538-3.c:,1
'convertToTuple':,3
collected_code_3/problem-538-3.c:12:17:,1
'tuple',2
tuple->data,3
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*tuple,1
(Tuple*)malloc(sizeof(Tuple));,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-538-3.c:15:24:,1
'*tuple.data,2
tuple->data[i],2
(strlen(list[i]),2
~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
tuple->size,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-965-3.c:,1
'camelToSnake':,4
collected_code_3/problem-965-3.c:11:23:,1
'output',4
output[j],6
'_';,2
output,3
100);,3
(input[i]),3
(isupper(input[i])),2
'output,4
collected_code_3/problem-965-3.c:15:23:,1
input[i];,2
~~~~~~~~~~^~~~~~~~~~,1
collected_code_3/problem-965-3.c:20:15:,1
collected_code_3/problem-154-3.c:,1
collected_code_3/problem-154-3.c:19:16:,1
*)malloc(cols,6
~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**)malloc(rows,3
collected_code_3/problem-154-3.c:21:23:,1
'*arr_34,2
_12,2
collected_code_3/problem-542-3.c:,1
'replace_with_colon':,1
collected_code_3/problem-542-3.c:13:9:,3
'exit',12
exit(1);,6
collected_code_3/problem-542-3.c:4:1:,1
collected_code_3/problem-542-3.c:31:9:,2
collected_code_3/problem-859-3.c:,1
'printSublists':,4
collected_code_3/problem-859-3.c:13:13:,1
'data',3
data[i],2
arr[idx];,2
~~~~~~~~^~~~~~~~~~,1
'generateSublists':,1
generateSublists(int,1
'generateSublists',2
*data,1
"printSublists(arr,",3
"data,",3
0);,1
'printSublists',7
printSublists(int,2
"idx,",2
"*data,",2
i),4
(idx,2
'idx,2
idx,2
i);,2
8-12,1
++j),1
data[j]);,1
13-14,2
'data,1
collected_code_3/problem-297-3.c:,1
collected_code_3/problem-297-3.c:11:18:,1
newNode->val,2
val;,2
head1,1
"appendNode(&head1,",1
'appendNode',3
'appendNode':,1
appendNode(Node**,1
"head,",2
val),2
createNode(val);,1
collected_code_3/problem-140-3.c:,1
collected_code_3/problem-140-3.c:11:20:,1
collected_code_3/problem-971-3.c:,1
'maxSegments':,1
collected_code_3/problem-971-3.c:8:15:,1
"max(maxSegments(n-a,",1
"a,",4
"b,",3
"c),",2
"maxSegments(n-b,",1
"maxSegments(n-c,",1
c));,1
collected_code_3/problem-788-3.c:,1
'createTuple':,2
collected_code_3/problem-788-3.c:13:19:,1
'newTuple',2
newTuple->str,2
(char*),5
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*newTuple,1
(Tuple*),1
collected_code_3/problem-161-3.c:,1
collected_code_3/problem-161-3.c:11:20:,1
collected_code_3/problem-482-3.c:,1
'find_sequence':,1
collected_code_3/problem-482-3.c:13:9:,3
collected_code_3/problem-482-3.c:4:1:,1
collected_code_3/problem-482-3.c:24:9:,2
collected_code_3/problem-802-3.c:,1
'countRotations':,3
collected_code_3/problem-802-3.c:11:12:,2
'min_index',4
min_index;,6
min,2
"arr[0],",2
"countRotations(arr,",1
'countRotations',2
countRotations(int,1
(min,1
arr[i]),1
collected_code_3/problem-496-3.c:,1
collected_code_3/problem-496-3.c:58:16:,1
*heap,7
(Heap,1
*)malloc(sizeof(Heap));,1
collected_code_3/problem-175-3.c:,3
collected_code_3/problem-175-3.c:13:21:,1
'isValid':,11
isValid(char*,5
'isValid',21
41,23
createStack(n);,9
(Stack*),2
malloc(sizeof(Stack));,2
collected_code_3/problem-175-3.c:24:23:,3
~~~~~~~~~~~^~~~~,4
56,8
"""((()))"";",4
(isValid(str)),4
'isEmpty':,3
str[i]);,3
push(Stack*,2
"stack,",2
stack->array[++stack->top],3
'*stack.array,3
(sizetype)*stack.top',3
collected_code_3/problem-175-3.c:30:32:,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~,1
13-16,2
(isFull(stack)),1
return;,2
collected_code_3/problem-473-3.c:,1
'tuple_intersection':,2
collected_code_3/problem-473-3.c:17:29:,1
result[k++],2
list1[i];,2
~~~~~~~~~~~~^~~~~~~~~~,1
(Tuple*)malloc(sizeof(Tuple),7
((size1,1
size1,1
size2));,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
if((list1[i].a,1
list2[j].a,1
list1[i].b,2
list2[j].b),1
(list1[i].a,1
list2[j].b,1
list2[j].a)),1
collected_code_3/problem-703-3.c:,1
collected_code_3/problem-703-3.c:28:23:,1
'dict.pairs',2
dict.pairs[0].key,2
"""key1"";",2
~~~~~~~~~~~~~~~~~~^~~~~~~~,1
dict.pairs,1
malloc(sizeof(KeyValuePair),1
dict.size);,1
collected_code_3/problem-779-3.c:,1
collected_code_3/problem-779-3.c:11:16:,1
collected_code_3/problem-301-3.c:,1
collected_code_3/problem-301-3.c:12:18:,1
root,1
createNode('a');,1
createNode(char,1
key),3
collected_code_3/problem-889-3.c:,1
collected_code_3/problem-889-3.c:43:16:,1
head->next,12
createNode(2);,9
~~~~~~~~~~~^~~~~~~~~~~~~~~,1
createNode(1);,8
9-11,1
~~~~~~~~~~~~~^~~~~~~~~~~~~,1
head->next->next,9
createNode(3);,8
collected_code_3/problem-889-3.c:44:22:,1
12-14,1
15-17,2
19-21,2
~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
'*head.next',3
collected_code_3/problem-889-3.c:45:28:,1
head->next->next->next,5
createNode(4);,5
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
13-15,2
17-19,1
20-22,2
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
'*head_13->next.next',1
collected_code_3/problem-889-3.c:46:34:,1
head->next->next->next->next,3
createNode(5);,3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~,1
16-17,3
22-24,3
25-27,1
29-31,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~,1
'*_7->next.next',1
collected_code_3/problem-927-3.c:,1
collected_code_3/problem-927-3.c:12:16:,1
collected_code_3/problem-500-3.c:,1
collected_code_3/problem-500-3.c:11:15:,1
result[0],4
malloc(totalLength,1
collected_code_3/problem-393-3.c:,1
collected_code_3/problem-393-3.c:19:42:,3
collected_code_3/problem-393-3.c:2:1:,1
collected_code_3/problem-393-3.c:20:19:,1
collected_code_3/problem-387-3.c:,1
'checkEvenOddHex':,1
collected_code_3/problem-387-3.c:5:15:,3
strlen(hex);,2
collected_code_3/problem-387-3.c:3:1:,1
collected_code_3/problem-875-3.c:,1
'minDiff':,1
collected_code_3/problem-875-3.c:5:16:,2
'INT_MAX',4
diff,3
INT_MAX;,4
collected_code_3/problem-875-3.c:3:1:,1
collected_code_3/problem-272-3.c:,2
'create_tuple':,2
collected_code_3/problem-272-3.c:11:18:,1
'new_tuple',2
new_tuple->a,2
a;,2
new_tuple,1
collected_code_3/problem-272-3.c:24:19:,1
"create_tuple(i,",2
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~,1
Tuple**,1
(Tuple**)malloc(size,1
sizeof(Tuple*));,1
collected_code_3/problem-758-3.c:,1
collected_code_3/problem-758-3.c:11:19:,1
newNode(10);,1
collected_code_3/problem-484-3.c:,1
'removeMatchingTuples':,2
collected_code_3/problem-484-3.c:22:29:,1
result[index++],2
tuple1[i];,2
~~~~~~~~~~~~~~~~^~~~~~~~~~~,1
size1);,1
found,1
if(!found),1
'found,1
collected_code_3/problem-938-3.c:,1
'findClosest':,1
collected_code_3/problem-938-3.c:9:23:,1
minimum,1
"min(A[i],",1
"min(B[j],",1
C[k]));,2
collected_code_3/problem-938-3.c:10:23:,1
maximum,1
"max(A[i],",1
"max(B[j],",1
collected_code_3/problem-423-3.c:,1
'goldMine':,1
collected_code_3/problem-423-3.c:8:5:,3
"memset(goldTable,",2
sizeof(goldTable));,2
collected_code_3/problem-423-3.c:3:1:,1
collected_code_3/problem-345-3.c:,1
'find_difference':,2
collected_code_3/problem-345-3.c:7:17:,1
'diff',1
diff[i],2
arr[i+1],2
~~~~~~~~^~~~~~~~~~~~~~~~~~~,1
(int*)malloc((size,1
'diff,1
collected_code_3/problem-729-3.c:,1
collected_code_3/problem-729-3.c:11:16:,1
first,2
newNode(2);,1
collected_code_3/problem-544-3.c:,2
'flattenTupleList':,2
collected_code_3/problem-544-3.c:19:15:,1
(totalLength,1
collected_code_3/problem-544-3.c:32:30:,1
'tupleList[0].elements',2
tupleList[0].elements[0],2
"""Hello"";",4
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~,1
tupleList[0].elements,1
collected_code_3/problem-544-3.c:36:30:,1
'tupleList[1].elements',2
tupleList[1].elements[0],2
"""I"";",2
~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~,1
tupleList[1].elements,1
collected_code_3/problem-772-3.c:,1
collected_code_3/problem-772-3.c:22:5:,1
"printf(""%s\n"",",4
result);,2
"removeWords(str,",2
'removeWords',3
'removeWords':,1
removeWords(char*,1
"str,",1
(char*)malloc(strlen(str),1
possible,5
'__builtin_puts',1
collected_code_3/problem-128-3.c:,1
'getLongWords':,2
collected_code_3/problem-128-3.c:11:30:,1
'longWords',1
longWords[count],2
words[i];,2
~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
**longWords,1
wordCount);,1
wordCount;,1
wordCount')...,1
if(strlen(words[i]),1
'longWords,1
collected_code_3/problem-708-3.c:,1
collected_code_3/problem-708-3.c:16:23:,1
*str;,2
collected_code_3/problem-620-3.c:,1
'largestDivisibleSubset':,1
collected_code_3/problem-620-3.c:9:40:,2
'cmpfunc',1
"qsort(nums,",1
"sizeof(int),",1
cmpfunc);,1
collected_code_3/problem-65-3.c:,1
collected_code_3/problem-65-3.c:16:44:,3
collected_code_3/problem-65-3.c:2:1:,1
collected_code_3/problem-65-3.c:17:20:,1
collected_code_3/problem-440-3.c:1:2:,2
constant,3
too,2
long,25
its,2
I'm,3
"sorry,",3
it's,6
not,3
C,6
find,3
all,3
adverbs,3
and,6
their,3
positions,3
given,3
sentence.,3
low-level,3
language,6
that,13
doesn't,6
support,3
natural,3
processing,3
text,3
analysis.,3
"'=',",2
"',',",2
"';',",2
'asm',2
'__attribute__',2
before,2
'\x74206974',1
collected_code_3/problem-440-3.c:1:153:,2
missing,4
terminating,4
',4
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-730-3.c:,1
collected_code_3/problem-730-3.c:30:21:,1
collected_code_3/problem-783-3.c:,1
'rgb2hsv':,1
collected_code_3/problem-783-3.c:38:17:,2
'NAN',1
out.h,1
NAN;,1
collected_code_3/problem-260-3.c:,1
'newmanShanksWilliams':,3
collected_code_3/problem-260-3.c:15:12:,2
'current',4
current;,6
1-7,1
prevPrev,2
Newman-Shanks-Williams,1
prime,1
number,4
"%lld\n"",",1
newmanShanksWilliams(n));,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'newmanShanksWilliams',2
newmanShanksWilliams(int,1
collected_code_3/problem-326-3.c:,1
'getMostFrequentWord':,1
collected_code_3/problem-326-3.c:44:12:,1
returns,2
address,2
local,2
variable,2
[-Wreturn-local-addr],2
wordCounts[maxCountIndex].word;,1
collected_code_3/problem-921-3.c:,2
'chunkTuples':,3
collected_code_3/problem-921-3.c:17:24:,1
output[i].size,3
*output,1
(*outputSize));,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
*outputSize;,2
collected_code_3/problem-921-3.c:20:31:,1
'*output_46,2
_24.data,2
output[i].data[j],2
input[i,2
j].data[0];,2
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~,1
~~^~~~~~~~~~~~~,1
output[i].data,1
collected_code_3/problem-921-3.c:32:23:,1
'input',1
input[i].size,3
~~~~~~~~~~~~~~^~~,1
*input,1
'input,1
collected_code_3/problem-921-3.c:34:26:,1
'*input_51,2
_11.data',2
input[i].data[0],2
input[i].data,1
(int*)malloc(sizeof(int));,4
collected_code_3/problem-568-3.c:,2
'create_list':,3
collected_code_3/problem-568-3.c:18:20:,1
'new_list',2
new_list->head,2
*new_list,1
(list*)malloc(sizeof(list));,1
collected_code_3/problem-568-3.c:27:20:,1
'new_dict',2
new_dict->next,2
*new_dict,1
(dict*)malloc(sizeof(dict));,1
collected_code_3/problem-512-3.c:,1
collected_code_3/problem-512-3.c:11:21:,1
node*,1
node*),1
node));,1
collected_code_3/problem-348-3.c:,1
'countSeqUtil':,1
collected_code_3/problem-348-3.c:19:5:,3
"-1,",2
sizeof,2
dp);,2
collected_code_3/problem-348-3.c:2:1:,1
#define,1
MAX,1
100,1
collected_code_3/problem-852-3.c:,1
collected_code_3/problem-852-3.c:33:16:,1
collected_code_3/problem-533-3.c:,1
collected_code_3/problem-533-3.c:38:16:,1
head->type,2
*head,1
collected_code_3/problem-533-3.c:41:22:,1
head->next->type,2
collected_code_3/problem-533-3.c:44:28:,1
'*head_27->next.next',2
head->next->next->type,2
~~~~~~~~~~~~~~~~~~~~~~~^~~,1
collected_code_3/problem-196-3.c:,2
'removeTuples':,2
collected_code_3/problem-196-3.c:21:28:,1
'newTuples',1
newTuples[j++],2
tuples[i];,4
~~~~~~~~~~~~~~~^~~~~~~~~~~,1
newTuples,1
count);,1
if(tuples[i].length,1
'newTuples,1
collected_code_3/problem-196-3.c:34:26:,1
tuples[i].length,5
tupleCount);,2
collected_code_3/problem-196-3.c:37:31:,1
'*tuples_65,2
_18.data,2
tuples[i].length);,1
tuples[i].length;,1
collected_code_3/problem-282-3.c:,1
collected_code_3/problem-282-3.c:11:16:,1
collected_code_3/problem-885-3.c:,1
'areIsomorphic':,1
collected_code_3/problem-885-3.c:17:5:,1
unknown,2
name,2
'bool',2
bool,2
marked[MAX_CHARS],2
{false};,2
collected_code_3/problem-885-3.c:3:1:,1
'<stdbool.h>';,3
<stdbool.h>'?,3
<stdbool.h>,1
collected_code_3/problem-885-3.c:17:31:,3
collected_code_3/problem-885-3.c:23:36:,2
(marked[str2[i]],1
true),1
collected_code_3/problem-231-3.c:,1
'maxSum':,3
collected_code_3/problem-231-3.c:7:25:,4
stack-based,1
over-read,1
[CWE-126],1
(tri[i+1][j],4
tri[i+1][j+1]),4
tri[N][N],2
"{1,",3
"0},",2
maxSum(tri));,2
'maxSum',4
4-9,2
maxSum(int,2
tri[N][N]),2
i=N-1;,2
i>=0;,2
~~~~,9
j=0;,3
j<=i;,2
read,2
'tri',3
valid,1
subscripts,1
are,3
'[0]',1
'[2]',1
'*tri_46(D),2
_3[j]',2
collected_code_3/problem-694-3.c:,1
collected_code_3/problem-694-3.c:11:21:,1
collected_code_3/problem-539-3.c:,1
collected_code_3/problem-539-3.c:29:24:,1
temp->next,4
"createNode(pow(base,",5
i));,5
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~,1
"createList(base,",1
'createList',6
3-14,1
createList(int,1
"base,",1
19-25,1
temp->next;,2
26-28,1
30-33,1
~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-822-3.c:,1
collected_code_3/problem-822-3.c:26:5:,3
'printf',4
your,2
password:,2
""");",2
collected_code_3/problem-822-3.c:3:1:,1
'<stdio.h>',4
collected_code_3/problem-822-3.c:27:5:,4
'scanf',4
"scanf(""%s"",",1
password);,1
collected_code_3/problem-20-3.c:1:1:,1
'The',1
The,3
term,6
"""woodball""",8
standard,3
meaning,3
computer,3
science,3
mathematics.,3
It,3
might,3
specific,8
certain,3
"application,",3
"project,",3
company.,3
Without,3
knowing,3
rules,5
define,5
what,3
makes,3
"number,",5
impossible,3
checks,5
it.,5
collected_code_3/problem-20-3.c:1:10:,1
collected_code_3/problem-20-3.c:1:26:,1
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-20-3.c:3:85:,2
Please,2
criteria,2
I'd,2
happy,2
help,2
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-858-3.c:,1
collected_code_3/problem-858-3.c:27:26:,3
List*)malloc(sizeof(struct,5
List));,5
collected_code_3/problem-858-3.c:2:1:,1
collected_code_3/problem-858-3.c:37:5:,4
collected_code_3/problem-858-3.c:31:16:,1
second;,2
~~~~~~~~~~~^~~~~~~~,1
collected_code_3/problem-858-3.c:32:18:,1
second->next,2
third;,2
~~~~~~~~~~~~~^~~~~~~,1
collected_code_3/problem-858-3.c:33:17:,1
third->next,2
collected_code_3/problem-174-3.c:,3
collected_code_3/problem-174-3.c:18:21:,1
dict[i].key,8
createDictionary(size);,5
*createDictionary(int,3
(Dictionary,3
*)malloc(sizeof(Dictionary),3
'dict,1
collected_code_3/problem-174-3.c:26:20:,1
dict;,2
"addValue(dict,",6
"""value1"",",3
'addValue',13
'addValue':,7
18-23,1
addValue(Dictionary,4
"*dict,",4
"*key,",4
"*value,",4
(dict[i].key,4
dict[i].values,3
createNode(value);,5
*createNode(char,2
*value),2
*newNode,3
(Node,8
*)malloc(sizeof(Node));,2
collected_code_3/problem-174-3.c:35:17:,1
18-22,1
23-24,1
"""value2"",",2
25-31,1
"(strcmp(dict[i].key,",2
strings,2
equal)...,1
*current,1
dict[i].values;,1
32-34,1
(current->next,1
35-37,1
(38),4
39-40,1
(39),4
"""value3"",",1
(40),4
41-50,1
(41),4
(47),4
(42),4
(48),5
(43),4
(49),2
(44),4
(50),2
(45),4
(46),4
non-equal)...,1
collected_code_3/problem-945-3.c:,1
'convertToSet':,2
collected_code_3/problem-945-3.c:21:36:,1
'set.elements',1
set.elements[set.size],2
tuple[i];,4
~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
set.elements,1
*)malloc(size,1
j),1
j')...,1
'set.elements,1
int)set.size,1
collected_code_3/problem-754-3.c:,1
collected_code_3/problem-754-3.c:25:41:,2
excess,4
array,4
initializer,4
arr1[SIZE],1
"5,",2
"10,",1
"20,",4
"40,",1
80};,1
^~,4
(near,4
initialization,4
'arr1'),1
collected_code_3/problem-754-3.c:27:41:,2
arr3[SIZE],3
"{3,",3
"4,",3
"15,",3
"30,",3
"70,",3
"80,",3
120};,3
'arr3'),3
collected_code_3/problem-754-3.c:27:45:,2
collected_code_3/problem-754-3.c:27:49:,2
collected_code_3/problem-562-3.c:,1
collected_code_3/problem-562-3.c:24:39:,3
collected_code_3/problem-562-3.c:2:1:,1
collected_code_3/problem-562-3.c:25:16:,1
collected_code_3/problem-740-3.c:,1
'tuple_to_dict':,2
collected_code_3/problem-740-3.c:13:31:,1
dictionary[i,2
2].key,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~,1
malloc(sizeof(dict),1
2));,1
'dictionary,1
collected_code_3/problem-15-3.c:,2
'splitString':,12
collected_code_3/problem-15-3.c:10:21:,1
'splitArr',4
splitArr[i],6
strlen(str));,13
~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
splitArr,21
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'splitArr,4
collected_code_3/problem-15-3.c:14:21:,2
'*splitArr_50,8
_19',2
splitArr[j][k],6
"""HelloWorld"";",10
splitString(str);,14
'splitString',24
splitString(char*,10
"i,",20
k,6
if(islower(str[i]),6
'\0'),14
collected_code_3/problem-15-3.c:14:28:,1
_19,2
(sizetype)k',4
~~~~~~~~~~~~~~~^~~~~~,1
collected_code_3/problem-15-3.c:18:21:,2
_27',2
splitArr[j][k++],6
collected_code_3/problem-15-3.c:18:30:,1
_27,2
~~~~~~~~~~~~~~~~~^~~~~~~~,1
collected_code_3/problem-15-3.c:29:20:,2
'*splitArr_21,4
if(splitArr[i][0],8
splitArr;,4
collected_code_3/problem-15-3.c:29:23:,2
'**_3',2
collected_code_3/problem-969-3.c:,1
'joinTuples':,2
collected_code_3/problem-969-3.c:18:27:,1
result[count],2
~~~~~~~~~~~~~~^~~~~~~~~~~,1
if(i,1
"strcmp(tuples[i].initial,",1
tuples[i-1].initial),1
collected_code_3/problem-665-3.c:,1
collected_code_3/problem-665-3.c:26:20:,1
collected_code_3/problem-932-3.c:,2
collected_code_3/problem-932-3.c:23:35:,1
'newWords',4
newWords[newNumWords],5
MAX_WORD_SIZE);,10
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
removeDuplicates(char**,4
"words,",11
numWords),11
newWords,2
MAX_WORDS);,2
*numWords;,13
"if(!isDuplicate(words[i],",12
"newWords,",12
newNumWords)),12
'isDuplicate',21
'isDuplicate':,7
isDuplicate(char*,7
"word,",7
numWords;,12
numWords')...,7
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'newWords,1
int)newNumWords,1
collected_code_3/problem-932-3.c:36:1:,2
1-12,2
words[i],5
"strcpy(words[0],",3
"""Hello"");",3
"removeDuplicates(words,",4
&numWords);,4
15-19,1
23-29,1
30-32,3
"if(strcmp(word,",3
words[i]),3
33-48,3
free(words[i]);,3
free(words);,3
22-25,2
"strcpy(newWords[newNumWords],",1
words[i]);,3
collected_code_3/problem-932-3.c:43:18:,1
'words',3
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
words,2
numWords);,2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,2
'words,2
collected_code_3/problem-932-3.c:55:9:,1
[CWE-416],1
[-Wanalyzer-use-after-free],1
1-14,1
numWords,1
17-20,3
24-29,1
freed,2
49-52,1
(51),1
(52),1
8';,1
collected_code_3/problem-117-3.c:,1
collected_code_3/problem-117-3.c:11:19:,1
collected_code_3/problem-392-3.c:,2
'max_sum':,1
collected_code_3/problem-392-3.c:13:16:,2
"max(n,",2
max_sum(n/2),2
max_sum(n/3),2
max_sum(n/4),2
max_sum(n/5));,2
collected_code_3/problem-392-3.c:17:15:,1
'max';,1
'long,1
int(long,1
max(long,1
b),1
'int()',1
collected_code_3/problem-108-3.c:,3
'heapify':,8
collected_code_3/problem-108-3.c:21:38:,1
'*heap_33(D),10
_4.val',2
(left,9
heapSize,22
heap[left].val,9
heap[smallest].val),17
~~~~~~~~~~^~~~,1
'merge':,7
merge(int,5
"**arr,",5
"*size,",5
"arrCount,",6
*mergedArr),5
'merge',11
arrCount;,5
*)malloc(sizeof(Node),6
heapSize);,18
heapSize;,6
heapSize')...,18
"buildHeap(heap,",5
'buildHeap',19
'buildHeap':,7
6-9,4
buildHeap(Node,5
"*heap,",12
heapSize),12
(heapSize,7
--i),7
"heapify(heap,",7
'heapify',16
heapify(Node,7
'left,6
collected_code_3/problem-108-3.c:21:59:,1
_8.val',2
~~~~~~~~~~~~~~^~~~,2
10-16,2
(right,8
heap[right].val,8
'right,4
(smallest,2
'smallest,2
21-22,1
collected_code_3/problem-108-3.c:24:40:,2
_12.val',4
~~~~~~~~~~~^~~~,2
10-15,1
86,1
"merge(arr,",1
"size,",1
mergedArr);,1
heap[i].val,3
arr[i][0];,3
16-21,1
collected_code_3/problem-108-3.c:24:61:,1
_16.val',2
21-24,1
collected_code_3/problem-108-3.c:45:21:,1
~~~~~~~~~~~~^~~~~~~~~~~,1
12',1
collected_code_3/problem-108-3.c:74:12:,1
size[0]);,3
~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**)malloc(sizeof(int,1
arrCount);,1
collected_code_3/problem-108-3.c:75:15:,1
'*arr',2
arr[0][0],2
arr[0][1],2
4;,2
arr[0][2],2
7;,2
~~~~~~~~~~^~~,3
collected_code_3/problem-108-3.c:78:15:,1
'*arr_62,4
arr[1][0],2
arr[1][1],2
arr[1][2],2
8;,2
arr[1],1
size[1]);,1
collected_code_3/problem-108-3.c:81:15:,1
81,2
arr[2][0],2
arr[2][1],2
6;,2
arr[2][2],2
9;,2
arr[2],1
size[2]);,1
collected_code_3/problem-805-3.c:,1
collected_code_3/problem-805-3.c:38:41:,1
invalid,1
operands,1
binary,1
(have,1
'int,2
*',1
(*)[10]'),1
listSize[maxList,1
lists];,1
(*)[10],1
collected_code_3/problem-943-3.c:,1
collected_code_3/problem-943-3.c:30:20:,1
collected_code_3/problem-957-3.c:,1
'getRightmostSetBit':,1
collected_code_3/problem-957-3.c:4:12:,3
'log2',4
log2(n,2
&,2
-n),2
collected_code_3/problem-957-3.c:2:1:,1
collected_code_3/problem-350-3.c:,1
'getMinLengthChar':,4
collected_code_3/problem-350-3.c:28:12:,3
'res',6
res;,9
'minimizeLength':,2
minimizeLength(char*,2
'minimizeLength',5
minChar,2
getMinLengthChar(str);,2
'getMinLengthChar',4
getMinLengthChar(char*,2
minimizeLength(str);,1
collected_code_3/problem-551-3.c:,2
'extractColumn':,3
collected_code_3/problem-551-3.c:8:19:,1
'column',1
column[i],3
~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~,1
column,1
(int**)malloc(rows,2
'column,1
collected_code_3/problem-551-3.c:9:20:,1
'*column_26,2
_15',2
*column[i],2
nestedList[i][colToExtract];,2
~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
collected_code_3/problem-551-3.c:18:23:,1
'nestedList',1
nestedList[i],3
(int*)malloc(cols,3
~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
nestedList,1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
'nestedList,1
collected_code_3/problem-551-3.c:20:30:,1
'*nestedList_44,2
nestedList[i][j],2
~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~,1
collected_code_3/problem-26-3.c:,1
collected_code_3/problem-26-3.c:25:31:,1
'tupleList',1
tupleList[i].elements,2
~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~,1
*tupleList,1
'tupleList,1
collected_code_3/problem-129-3.c:,1
'generateSquare':,4
collected_code_3/problem-129-3.c:19:32:,2
'*magicSquare[i][j]',6
(magicSquare[(int)i][(int)j]),4
~~~~~~~~~~~~~~~~~~~^~~~~~~~,2
magicSquare[n][n];,3
n;),3
-1,2
generateSquare(n);,1
'generateSquare',2
generateSquare(int,1
collected_code_3/problem-129-3.c:31:13:,1
"printf(""%3d",2
magicSquare[i][j]);,2
collected_code_3/problem-635-3.c:,1
'extractMin':,1
collected_code_3/problem-635-3.c:44:16:,2
collected_code_3/problem-635-3.c:3:1:,1
collected_code_3/problem-290-3.c:,2
collected_code_3/problem-290-3.c:16:19:,1
newList->data,2
*newList,1
'createListOfLists':,2
collected_code_3/problem-290-3.c:23:26:,1
'newListOfLists',2
newListOfLists->list,2
list;,2
~~~~~~~~~~~~~~~~~~~~~^~~~~~,1
ListOfLists,1
*newListOfLists,1
(ListOfLists*)malloc(sizeof(ListOfLists));,1
collected_code_3/problem-824-3.c:,1
collected_code_3/problem-824-3.c:33:20:,1
collected_code_3/problem-380-3.c:,1
'generate2DArray':,3
collected_code_3/problem-380-3.c:7:18:,1
'array',1
array[i],3
~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~,1
**array,3
i=0;,3
i<rows;,3
'array,1
collected_code_3/problem-380-3.c:11:25:,1
'*array_26,2
array[i][j],2
~~~~~~~~~~~~^~~~~~~,1
rows,1
"generate2DArray(rows,",1
cols);,1
'generate2DArray',2
3-21,1
generate2DArray(int,1
"rows,",1
cols),1
j<cols;,1
collected_code_3/problem-513-3.c:,2
'tupleToList':,3
collected_code_3/problem-513-3.c:17:16:,1
~~~~~~~~~~~^~~~~~~~~~~~~~~~~,1
collected_code_3/problem-513-3.c:21:25:,1
'*list.data,2
list->data[j++],2
tuple->data[i];,2
list->data,1
malloc(list->size,1
sizeof(char*));,2
tuple->size;,1
collected_code_3/problem-513-3.c:32:19:,1
tuple.data[0],2
~~~~~~~~~~~~~~^~~~~~~~~,1
malloc(tuple.size,1
collected_code_3/problem-70-3.c:,1
collected_code_3/problem-70-3.c:23:26:,1
malloc(n,1
sizeof(struct,1
Tuple));,1
collected_code_3/problem-920-3.c:,2
'removeNoneTuples':,10
collected_code_3/problem-920-3.c:38:33:,1
'newList.tuples',2
newList.tuples[j++],2
list.tuples[i];,2
~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~,1
removeNoneTuples(list);,5
'removeNoneTuples',20
removeNoneTuples(TupleList,3
list),3
noneTuplesCount,3
list.size;,8
(isNoneTuple(list.tuples[i])),6
'isNoneTuple',18
'isNoneTuple':,6
7-11,3
isNoneTuple(Tuple,6
tuple),6
(tuple.values[i],6
newList.tuples,3
*)malloc(newList.size,3
(!isNoneTuple(list.tuples[i])),6
17-21,3
'newList.tuples,2
collected_code_3/problem-920-3.c:56:46:,2
'*_10,2
_12.size',2
newList.tuples[i].size;,4
~~~~~~~~~~~~~~~~~^~~~~,2
25-28,2
newList.size;,2
collected_code_3/problem-460-3.c:,1
collected_code_3/problem-460-3.c:9:39:,3
collected_code_3/problem-460-3.c:2:1:,1
collected_code_3/problem-460-3.c:10:16:,1
collected_code_3/problem-130-3.c:,2
collected_code_3/problem-130-3.c:12:19:,1
'addNode':,1
addNode(struct,1
'addNode',2
createNode(data);,1
'findMaxFreq':,2
collected_code_3/problem-130-3.c:42:12:,1
collected_code_3/problem-240-3.c:,1
collected_code_3/problem-240-3.c:11:19:,1
collected_code_3/problem-548-3.c:,1
'longestIncreasingSubsequence':,2
collected_code_3/problem-548-3.c:9:16:,1
lis,1
(sizeof(int),1
i++,1
),1
collected_code_3/problem-829-3.c:,1
'secondMostFrequent':,1
collected_code_3/problem-829-3.c:47:12:,1
sf[second].str;,1
