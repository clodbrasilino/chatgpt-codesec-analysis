collected_code_3/problem-391-2.c: In function 'create_node':
collected_code_3/problem-391-2.c:13:19: warning: dereference of possibly-NULL 'new_node' [CWE-690] [-Wanalyzer-possible-null-dereference]
   13 |     new_node->key = strdup(key);
      |     ~~~~~~~~~~~~~~^~~~~~~~~~~~~
  'main': events 1-2
    |
    |   39 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   40 |     node *root = create_node("root");
    |      |                  ~~~~~~~~~~~~~~~~~~~
    |      |                  |
    |      |                  (2) calling 'create_node' from 'main'
    |
    +--> 'create_node': events 3-5
           |
           |   11 | node* create_node(char *key) {
           |      |       ^~~~~~~~~~~
           |      |       |
           |      |       (3) entry to 'create_node'
           |   12 |     node *new_node = (node*)malloc(sizeof(node));
           |      |                             ~~~~~~~~~~~~~~~~~~~~
           |      |                             |
           |      |                             (4) this call could return NULL
           |   13 |     new_node->key = strdup(key);
           |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                   |
           |      |                   (5) 'new_node' could be NULL: unchecked value from (4)
           |
collected_code_3/problem-391-2.c: In function 'print_dict':
collected_code_3/problem-391-2.c:34:5: warning: use of possibly-NULL '*root.key' where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
   34 |     printf("%s\n", root->key);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
  'main': events 1-2
    |
    |   39 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   40 |     node *root = create_node("root");
    |      |                  ~~~~~~~~~~~~~~~~~~~
    |      |                  |
    |      |                  (2) calling 'create_node' from 'main'
    |
    +--> 'create_node': events 3-4
           |
           |   11 | node* create_node(char *key) {
           |      |       ^~~~~~~~~~~
           |      |       |
           |      |       (3) entry to 'create_node'
           |   12 |     node *new_node = (node*)malloc(sizeof(node));
           |   13 |     new_node->key = strdup(key);
           |      |                     ~~~~~~~~~~~
           |      |                     |
           |      |                     (4) this call could return NULL
           |
    <------+
    |
  'main': events 5-6
    |
    |   40 |     node *root = create_node("root");
    |      |                  ^~~~~~~~~~~~~~~~~~~
    |      |                  |
    |      |                  (5) returning to 'main' from 'create_node'
    |......
    |   47 |     add_child(root, child1);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (6) calling 'add_child' from 'main'
    |
    +--> 'add_child': events 7-9
           |
           |   19 | void add_child(node *parent, node *child) {
           |      |      ^~~~~~~~~
           |      |      |
           |      |      (7) entry to 'add_child'
           |   20 |     if(parent->child == NULL) {
           |      |       ~
           |      |       |
           |      |       (8) following 'true' branch...
           |   21 |         parent->child = child;
           |      |         ~~~~~~~~~~~~~~~~~~~~~
           |      |                       |
           |      |                       (9) ...to here
           |
    <------+
    |
  'main': events 10-11
    |
    |   47 |     add_child(root, child1);
    |      |     ^~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (10) possible return of NULL to 'main' from 'add_child'
    |   48 |     add_child(root, child2);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (11) calling 'add_child' from 'main'
    |
    +--> 'add_child': events 12-14
           |
           |   19 | void add_child(node *parent, node *child) {
           |      |      ^~~~~~~~~
           |      |      |
           |      |      (12) entry to 'add_child'
           |   20 |     if(parent->child == NULL) {
           |      |       ~
           |      |       |
           |      |       (13) following 'false' branch...
           |......
           |   23 |         node *temp = parent->child;
           |      |               ~~~~
           |      |               |
           |      |               (14) ...to here
           |
         'add_child': events 15-16
           |
           |   24 |         while(temp->next != NULL) {
           |      |                          ^
           |      |                          |
           |      |                          (15) following 'false' branch...
           |......
           |   27 |         temp->next = child;
           |      |         ~~~~~~~~~~~~~~~~~~
           |      |                    |
           |      |                    (16) ...to here
           |
    <------+
    |
  'main': events 17-18
    |
    |   48 |     add_child(root, child2);
    |      |     ^~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (17) possible return of NULL to 'main' from 'add_child'
    |   49 |     add_child(child1, child3);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (18) calling 'add_child' from 'main'
    |
    +--> 'add_child': events 19-21
           |
           |   19 | void add_child(node *parent, node *child) {
           |      |      ^~~~~~~~~
           |      |      |
           |      |      (19) entry to 'add_child'
           |   20 |     if(parent->child == NULL) {
           |      |       ~
           |      |       |
           |      |       (20) following 'true' branch...
           |   21 |         parent->child = child;
           |      |         ~~~~~~~~~~~~~~~~~~~~~
           |      |                       |
           |      |                       (21) ...to here
           |
    <------+
    |
  'main': events 22-23
    |
    |   49 |     add_child(child1, child3);
    |      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (22) possible return of NULL to 'main' from 'add_child'
    |   50 |     add_child(child1, child4);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (23) calling 'add_child' from 'main'
    |
    +--> 'add_child': events 24-26
           |
           |   19 | void add_child(node *parent, node *child) {
           |      |      ^~~~~~~~~
           |      |      |
           |      |      (24) entry to 'add_child'
           |   20 |     if(parent->child == NULL) {
           |      |       ~
           |      |       |
           |      |       (25) following 'false' branch...
           |......
           |   23 |         node *temp = parent->child;
           |      |               ~~~~
           |      |               |
           |      |               (26) ...to here
           |
         'add_child': events 27-28
           |
           |   24 |         while(temp->next != NULL) {
           |      |                          ^
           |      |                          |
           |      |                          (27) following 'false' branch...
           |......
           |   27 |         temp->next = child;
           |      |         ~~~~~~~~~~~~~~~~~~
           |      |                    |
           |      |                    (28) ...to here
           |
    <------+
    |
  'main': events 29-30
    |
    |   50 |     add_child(child1, child4);
    |      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (29) possible return of NULL to 'main' from 'add_child'
    |   51 |     add_child(child2, child5);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (30) calling 'add_child' from 'main'
    |
    +--> 'add_child': events 31-33
           |
           |   19 | void add_child(node *parent, node *child) {
           |      |      ^~~~~~~~~
           |      |      |
           |      |      (31) entry to 'add_child'
           |   20 |     if(parent->child == NULL) {
           |      |       ~
           |      |       |
           |      |       (32) following 'true' branch...
           |   21 |         parent->child = child;
           |      |         ~~~~~~~~~~~~~~~~~~~~~
           |      |                       |
           |      |                       (33) ...to here
           |
    <------+
    |
  'main': events 34-35
    |
    |   51 |     add_child(child2, child5);
    |      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (34) possible return of NULL to 'main' from 'add_child'
    |   52 | 
    |   53 |     print_dict(root, 0);
    |      |     ~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (35) calling 'print_dict' from 'main'
    |
    +--> 'print_dict': events 36-41
           |
           |   31 | void print_dict(node *root, int level) {
           |      |      ^~~~~~~~~~
           |      |      |
           |      |      (36) entry to 'print_dict'
           |   32 |     if(root == NULL) return;
           |      |       ~
           |      |       |
           |      |       (37) following 'false' branch (when 'root' is non-NULL)...
           |   33 |     for(int i = 0; i < level; i++) printf("\t");
           |      |             ~      ~~~~~~~~~
           |      |             |        |
           |      |             |        (39) following 'false' branch (when 'i >= level')...
           |      |             (38) ...to here
           |   34 |     printf("%s\n", root->key);
           |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (40) ...to here
           |      |     (41) argument 1 ('*root.key') from (4) could be NULL where non-null expected
           |
<built-in>: note: argument 1 of '__builtin_puts' must be non-null
