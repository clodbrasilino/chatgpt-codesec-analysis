```C
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void appendNode(Node** head, int data) {
    if (*head == NULL) {
        *head = createNode(data);
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = createNode(data);
}

void printList(Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

Node* packDuplicates(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    Node* current = head;
    while (current->next != NULL) {
        if (current->data == current->next->data) {
            Node* temp = current->next;
            current->next = current->next->next;
            free(temp);
        } else {
            current = current->next;
        }
    }
    return head;
}

int main() {
    Node* head = NULL;
    appendNode(&head, 1);
    appendNode(&head, 2);
    appendNode(&head, 2);
    appendNode(&head, 3);
    appendNode(&head, 3);
    appendNode(&head, 3);
    appendNode(&head, 4);
    appendNode(&head, 4);
    appendNode(&head, 4);
    appendNode(&head, 4);
    printf("Original List: ");
    printList(head);
    head = packDuplicates(head);
    printf("Packed List: ");
    printList(head);
    return 0;
}
```