./collected_code_3/round1/heal_4/healed/problem-108.c: In function 'minHeapify':
./collected_code_3/round1/heal_4/healed/problem-108.c:25:32: warning: use of uninitialized value '*arr_45(D) + _18' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
   25 |     if (right < heapSize && arr[right] != NULL && arr[right]->val < arr[smallest]->val)
      |                             ~~~^~~~~~~
  'main': events 1-2
    |
    |   83 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |......
    |   94 |     mergeSortedArrays(arr, size, n);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (2) calling 'mergeSortedArrays' from 'main'
    |
    +--> 'mergeSortedArrays': events 3-19
           |
           |   40 | void mergeSortedArrays(int **arr, int *size, int n) {
           |      |      ^~~~~~~~~~~~~~~~~
           |      |      |
           |      |      (3) entry to 'mergeSortedArrays'
           |   41 |     Node **heapArr = (Node **)malloc(sizeof(Node *) * n);
           |      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                               |
           |      |                               (4) region created on heap here
           |   42 |     if (!heapArr) exit(1);
           |      |        ~
           |      |        |
           |      |        (5) following 'false' branch (when 'heapArr' is non-NULL)...
           |......
           |   45 |     for (i = 0; i < n; ++i) {
           |      |          ~~~~~  ~~~~~
           |      |            |      |
           |      |            |      (7) following 'true' branch (when 'i < n')...
           |      |            |      (13) following 'true' branch (when 'i < n')...
           |      |            (6) ...to here
           |   46 |         Node *node = (Node *)malloc(sizeof(Node));
           |      |                              ~~~~~~~~~~~~~~~~~~~~
           |      |                              |
           |      |                              (8) ...to here
           |      |                              (14) ...to here
           |   47 |         if (!node) exit(1);
           |      |            ~
           |      |            |
           |      |            (9) following 'false' branch (when 'node' is non-NULL)...
           |      |            (15) following 'false' branch (when 'node' is non-NULL)...
           |   48 | 
           |   49 |         if (arr[i] != NULL && size[i] > 0) {
           |      |            ~   ~
           |      |            |   |
           |      |            |   (10) ...to here
           |      |            |   (16) ...to here
           |      |            (11) following 'true' branch...
           |      |            (17) following 'true' branch...
           |   50 |             node->val = arr[i][0];
           |      |                            ~
           |      |                            |
           |      |                            (12) ...to here
           |      |                            (18) ...to here
           |......
           |   60 |     buildMinHeap(heapArr, n);
           |      |     ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |     |
           |      |     (19) calling 'buildMinHeap' from 'mergeSortedArrays'
           |
           +--> 'buildMinHeap': events 20-23
                  |
                  |   34 | void buildMinHeap(Node **arr, int n) {
                  |      |      ^~~~~~~~~~~~
                  |      |      |
                  |      |      (20) entry to 'buildMinHeap'
                  |   35 |     int i;
                  |   36 |     for (i = (n - 2) / 2; i >= 0; --i)
                  |      |                           ~~~~~~
                  |      |                             |
                  |      |                             (21) following 'true' branch (when 'i >= 0')...
                  |   37 |         minHeapify(arr, i, n);
                  |      |         ~~~~~~~~~~~~~~~~~~~~~
                  |      |         |
                  |      |         (22) ...to here
                  |      |         (23) calling 'minHeapify' from 'buildMinHeap'
                  |
                  +--> 'minHeapify': events 24-29
                         |
                         |   17 | void minHeapify(Node **arr, int i, int heapSize) {
                         |      |      ^~~~~~~~~~
                         |      |      |
                         |      |      (24) entry to 'minHeapify'
                         |......
                         |   22 |     if (left < heapSize && arr[left] != NULL && arr[left]->val < arr[smallest]->val)
                         |      |        ~                      ~
                         |      |        |                      |
                         |      |        |                      (26) ...to here
                         |      |        (25) following 'true' branch (when 'left < heapSize')...
                         |......
                         |   25 |     if (right < heapSize && arr[right] != NULL && arr[right]->val < arr[smallest]->val)
                         |      |        ~                    ~~~~~~~~~~
                         |      |        |                       |
                         |      |        |                       (28) ...to here
                         |      |        |                       (29) use of uninitialized value '*arr_45(D) + _18' here
                         |      |        (27) following 'true' branch (when 'right < heapSize')...
                         |
