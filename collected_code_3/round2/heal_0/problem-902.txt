```C
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define HASH_SIZE 100

typedef struct HashNode {
    char* key;
    int value;
    struct HashNode* next;
} HashNode;

typedef struct HashTable {
    HashNode* buckets[HASH_SIZE];
} HashTable;

unsigned int hash(char* key) {
    unsigned int hash = 0;
    while (*key) {
        hash = (hash << 5) + *key++;
    }
    return hash % HASH_SIZE;
}

HashTable* createHashTable() {
    HashTable* hashTable = malloc(sizeof(HashTable));
    memset(hashTable, 0, sizeof(HashTable));
    return hashTable;
}

void insert(HashTable* hashTable, char* key, int value) {
    unsigned int index = hash(key);
    HashNode* node = hashTable->buckets[index];
    while (node) {
        if (strcmp(node->key, key) == 0) {
            node->value += value;
            return;
        }
        node = node->next;
    }
    node = malloc(sizeof(HashNode));
    node->key = strdup(key);
    node->value = value;
    node->next = hashTable->buckets[index];
    hashTable->buckets[index] = node;
}

void printHashTable(HashTable* hashTable) {
    for (int i = 0; i < HASH_SIZE; i++) {
        HashNode* node = hashTable->buckets[i];
        while (node) {
            printf("%s: %d\n", node->key, node->value);
            node = node->next;
        }
    }
}

void combine(HashTable* dest, HashTable* src) {
    for (int i = 0; i < HASH_SIZE; i++) {
        HashNode* node = src->buckets[i];
        while (node) {
            insert(dest, node->key, node->value);
            node = node->next;
        }
    }
}

int main() {
    HashTable* hashTable1 = createHashTable();
    HashTable* hashTable2 = createHashTable();

    insert(hashTable1, "apple", 1);
    insert(hashTable1, "banana", 2);
    insert(hashTable2, "apple", 3);
    insert(hashTable2, "cherry", 4);

    combine(hashTable1, hashTable2);

    printHashTable(hashTable1);

    return 0;
}
```