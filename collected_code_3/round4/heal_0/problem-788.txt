In C, there are no built-in data types for strings and lists as in Python or other high-level languages. Also, the concept of a tuple does not exist in C. However, we can mimic these data types using arrays, structures, and pointers. Here is a simple example of how you might create a "tuple" from a string and an array of integers:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char* str;
    int* list;
    int list_size;
} Tuple;

Tuple* create_tuple(char* str, int* list, int list_size) {
    Tuple* tuple = (Tuple*) malloc(sizeof(Tuple));
    tuple->str = (char*) malloc(strlen(str) + 1);
    strcpy(tuple->str, str);
    tuple->list = (int*) malloc(list_size * sizeof(int));
    memcpy(tuple->list, list, list_size * sizeof(int));
    tuple->list_size = list_size;
    return tuple;
}

void print_tuple(Tuple* tuple) {
    printf("String: %s\n", tuple->str);
    printf("List: ");
    for(int i = 0; i < tuple->list_size; i++) {
        printf("%d ", tuple->list[i]);
    }
    printf("\n");
}

void free_tuple(Tuple* tuple) {
    free(tuple->str);
    free(tuple->list);
    free(tuple);
}

int main() {
    int list[] = {1, 2, 3, 4, 5};
    Tuple* tuple = create_tuple("Hello", list, 5);
    print_tuple(tuple);
    free_tuple(tuple);
    return 0;
}
```

This code defines a `Tuple` structure that contains a string and an array of integers. The `create_tuple` function allocates memory for a new `Tuple`, copies the input string and array into it, and returns a pointer to the new `Tuple`. The `print_tuple` function prints the contents of a `Tuple`, and the `free_tuple` function frees the memory allocated for a `Tuple`. The `main` function demonstrates how to use these functions.