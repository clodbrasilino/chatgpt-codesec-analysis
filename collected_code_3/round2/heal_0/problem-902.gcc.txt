collected_code_3/problem-902-2.c: In function 'insert':
collected_code_3/problem-902-2.c:35:13: warning: use of possibly-NULL '*node.key' where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
   35 |         if (strcmp(node->key, key) == 0) {
      |             ^~~~~~~~~~~~~~~~~~~~~~
  'main': events 1-2
    |
    |   68 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |......
    |   72 |     insert(hashTable1, "apple", 1);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (2) calling 'insert' from 'main'
    |
    +--> 'insert': events 3-4
           |
           |   31 | void insert(HashTable* hashTable, char* key, int value) {
           |      |      ^~~~~~
           |      |      |
           |      |      (3) entry to 'insert'
           |   32 |     unsigned int index = hash(key);
           |      |                          ~~~~~~~~~
           |      |                          |
           |      |                          (4) calling 'hash' from 'insert'
           |
           +--> 'hash': events 5-7
                  |
                  |   17 | unsigned int hash(char* key) {
                  |      |              ^~~~
                  |      |              |
                  |      |              (5) entry to 'hash'
                  |   18 |     unsigned int hash = 0;
                  |   19 |     while (*key) {
                  |      |            ~  
                  |      |            |
                  |      |            (6) following 'true' branch...
                  |   20 |         hash = (hash << 5) + *key++;
                  |      |                ~~~~~~~~~~~
                  |      |                      |
                  |      |                      (7) ...to here
                  |
           <------+
           |
         'insert': events 8-11
           |
           |   32 |     unsigned int index = hash(key);
           |      |                          ^~~~~~~~~
           |      |                          |
           |      |                          (8) returning to 'insert' from 'hash'
           |   33 |     HashNode* node = hashTable->buckets[index];
           |   34 |     while (node) {
           |      |            ~~~~           
           |      |            |
           |      |            (9) following 'false' branch (when 'node' is NULL)...
           |......
           |   41 |     node = malloc(sizeof(HashNode));
           |      |            ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |            |
           |      |            (10) ...to here
           |   42 |     node->key = strdup(key);
           |      |                 ~~~~~~~~~~~
           |      |                 |
           |      |                 (11) this call could return NULL
           |
    <------+
    |
  'main': events 12-13
    |
    |   72 |     insert(hashTable1, "apple", 1);
    |      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (12) possible return of NULL to 'main' from 'insert'
    |   73 |     insert(hashTable1, "banana", 2);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (13) calling 'insert' from 'main'
    |
    +--> 'insert': events 14-15
           |
           |   31 | void insert(HashTable* hashTable, char* key, int value) {
           |      |      ^~~~~~
           |      |      |
           |      |      (14) entry to 'insert'
           |   32 |     unsigned int index = hash(key);
           |      |                          ~~~~~~~~~
           |      |                          |
           |      |                          (15) calling 'hash' from 'insert'
           |
           +--> 'hash': events 16-18
                  |
                  |   17 | unsigned int hash(char* key) {
                  |      |              ^~~~
                  |      |              |
                  |      |              (16) entry to 'hash'
                  |   18 |     unsigned int hash = 0;
                  |   19 |     while (*key) {
                  |      |            ~  
                  |      |            |
                  |      |            (17) following 'true' branch...
                  |   20 |         hash = (hash << 5) + *key++;
                  |      |                ~~~~~~~~~~~
                  |      |                      |
                  |      |                      (18) ...to here
                  |
           <------+
           |
         'insert': events 19-22
           |
           |   32 |     unsigned int index = hash(key);
           |      |                          ^~~~~~~~~
           |      |                          |
           |      |                          (19) returning to 'insert' from 'hash'
           |   33 |     HashNode* node = hashTable->buckets[index];
           |   34 |     while (node) {
           |      |            ~~~~           
           |      |            |
           |      |            (20) following 'true' branch (when 'node' is non-NULL)...
           |   35 |         if (strcmp(node->key, key) == 0) {
           |      |             ~~~~~~~~~~~~~~~~~~~~~~
           |      |             |          |
           |      |             |          (21) ...to here
           |      |             (22) argument 1 ('*node.key') from (11) could be NULL where non-null expected
           |
In file included from collected_code_3/problem-902-2.c:3:
/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/usr/include/string.h:77:10: note: argument 1 of 'strcmp' must be non-null
   77 | int      strcmp(const char *__s1, const char *__s2);
      |          ^~~~~~
collected_code_3/problem-902-2.c:42:15: warning: dereference of possibly-NULL 'node' [CWE-690] [-Wanalyzer-possible-null-dereference]
   42 |     node->key = strdup(key);
      |     ~~~~~~~~~~^~~~~~~~~~~~~
  'main': events 1-2
    |
    |   68 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |......
    |   72 |     insert(hashTable1, "apple", 1);
    |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |     |
    |      |     (2) calling 'insert' from 'main'
    |
    +--> 'insert': events 3-4
           |
           |   31 | void insert(HashTable* hashTable, char* key, int value) {
           |      |      ^~~~~~
           |      |      |
           |      |      (3) entry to 'insert'
           |   32 |     unsigned int index = hash(key);
           |      |                          ~~~~~~~~~
           |      |                          |
           |      |                          (4) calling 'hash' from 'insert'
           |
           +--> 'hash': events 5-7
                  |
                  |   17 | unsigned int hash(char* key) {
                  |      |              ^~~~
                  |      |              |
                  |      |              (5) entry to 'hash'
                  |   18 |     unsigned int hash = 0;
                  |   19 |     while (*key) {
                  |      |            ~  
                  |      |            |
                  |      |            (6) following 'true' branch...
                  |   20 |         hash = (hash << 5) + *key++;
                  |      |                ~~~~~~~~~~~
                  |      |                      |
                  |      |                      (7) ...to here
                  |
           <------+
           |
         'insert': events 8-12
           |
           |   32 |     unsigned int index = hash(key);
           |      |                          ^~~~~~~~~
           |      |                          |
           |      |                          (8) returning to 'insert' from 'hash'
           |   33 |     HashNode* node = hashTable->buckets[index];
           |   34 |     while (node) {
           |      |            ~~~~           
           |      |            |
           |      |            (9) following 'false' branch (when 'node' is NULL)...
           |......
           |   41 |     node = malloc(sizeof(HashNode));
           |      |            ~~~~~~~~~~~~~~~~~~~~~~~~
           |      |            |
           |      |            (10) ...to here
           |      |            (11) this call could return NULL
           |   42 |     node->key = strdup(key);
           |      |     ~~~~~~~~~~~~~~~~~~~~~~~
           |      |               |
           |      |               (12) 'node' could be NULL: unchecked value from (11)
           |
