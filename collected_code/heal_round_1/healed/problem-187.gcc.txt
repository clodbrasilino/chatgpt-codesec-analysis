collected_code/healed/problem-187.c: In function 'lcs':
collected_code/healed/problem-187.c:11:14: warning: dereference of possibly-NULL 'L' [CWE-690] [-Wanalyzer-possible-null-dereference]
   11 |         L[i] = calloc(n + 1, sizeof(int));
      |         ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
  'lcs': events 1-4
    |
    |    9 |     int **L = malloc((m + 1) * sizeof(int *));
    |      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |               |
    |      |               (1) this call could return NULL
    |   10 |     for (size_t i = 0; i <= m; i++){
    |      |                        ~~~~~~
    |      |                          |
    |      |                          (2) following 'true' branch (when 'i <= m')...
    |   11 |         L[i] = calloc(n + 1, sizeof(int));
    |      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |              | |
    |      |              | (3) ...to here
    |      |              (4) 'L + i * 8' could be NULL: unchecked value from (1)
    |
collected_code/healed/problem-187.c:18:25: warning: dereference of possibly-NULL '*L_103 + _7 + j * 4' [CWE-690] [-Wanalyzer-possible-null-dereference]
   18 |                 L[i][j] = 0;
      |                 ~~~~~~~~^~~
  'lcs': events 1-12
    |
    |   10 |     for (size_t i = 0; i <= m; i++){
    |      |                        ~~^~~~
    |      |                          |
    |      |                          (1) following 'true' branch (when 'i <= m')...
    |      |                          (4) following 'false' branch (when 'i > m')...
    |   11 |         L[i] = calloc(n + 1, sizeof(int));
    |      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                |
    |      |                (2) ...to here
    |      |                (3) this call could return NULL
    |......
    |   15 |     for (i = 0; i <= m; i++) {
    |      |          ~~~~~  ~~~~~~    
    |      |            |      |
    |      |            |      (6) following 'true' branch (when 'i <= m')...
    |      |            (5) ...to here
    |   16 |         for (j = 0; j <= n; j++) {
    |      |              ~~~~~  ~~~~~~
    |      |                |      |
    |      |                |      (8) following 'true' branch (when 'j <= n')...
    |      |                (7) ...to here
    |   17 |             if (i == 0 || j == 0)
    |      |                ~          
    |      |                |
    |      |                (9) ...to here
    |      |                (10) following 'true' branch (when 'i == 0')...
    |   18 |                 L[i][j] = 0;
    |      |                 ~~~~~~~~~~~
    |      |                  |      |
    |      |                  |      (12) '*L_103 + _7 + j * 4' could be NULL: unchecked value from (3)
    |      |                  (11) ...to here
    |
collected_code/healed/problem-187.c:26:21: warning: use of uninitialized value '*L_103 + _52' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
   26 |     size_t index = L[m][n];
      |                    ~^~~
  'lcs': events 1-6
    |
    |    9 |     int **L = malloc((m + 1) * sizeof(int *));
    |      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |               |
    |      |               (1) region created on heap here
    |   10 |     for (size_t i = 0; i <= m; i++){
    |      |                        ~~~~~~
    |      |                          |
    |      |                          (2) following 'false' branch (when 'i > m')...
    |......
    |   15 |     for (i = 0; i <= m; i++) {
    |      |          ~~~~~  ~~~~~~
    |      |            |      |
    |      |            |      (4) following 'false' branch (when 'i > m')...
    |      |            (3) ...to here
    |......
    |   26 |     size_t index = L[m][n];
    |      |                    ~~~~
    |      |                     |
    |      |                     (5) ...to here
    |      |                     (6) use of uninitialized value '*L_103 + _52' here
    |
-macosx_version_min has been renamed to -macos_version_min
