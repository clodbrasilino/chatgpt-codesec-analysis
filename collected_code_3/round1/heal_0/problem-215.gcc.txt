collected_code_3/problem-215-1.c: In function 'decode':
collected_code_3/problem-215-1.c:13:29: warning: dereference of possibly-NULL 'result' [CWE-690] [-Wanalyzer-possible-null-dereference]
   13 |                 result[j++] = str[i + 1];
      |                 ~~~~~~~~~~~~^~~~~~~~~~~~
  'decode': events 1-8
    |
    |    7 |     char* result = (char*)malloc(sizeof(char) * len * 10);
    |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                           |
    |      |                           (1) this call could return NULL
    |    8 |     int j = 0;
    |    9 |     for (int i = 0; i < len; i++) {
    |      |                     ~~~~~~~
    |      |                       |
    |      |                       (2) following 'true' branch (when 'i < len')...
    |   10 |         if (str[i] >= '0' && str[i] <= '9') {
    |      |            ~   ~           
    |      |            |   |
    |      |            |   (3) ...to here
    |      |            (4) following 'true' branch...
    |   11 |             int count = str[i] - '0';
    |      |                            ~
    |      |                            |
    |      |                            (5) ...to here
    |   12 |             while (count--) {
    |      |                    ~~~~~   
    |      |                    |
    |      |                    (6) following 'true' branch...
    |   13 |                 result[j++] = str[i + 1];
    |      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                             |    |
    |      |                             |    (7) ...to here
    |      |                             (8) 'result + (sizetype)j' could be NULL: unchecked value from (1)
    |
collected_code_3/problem-215-1.c:17:25: warning: dereference of possibly-NULL 'result' [CWE-690] [-Wanalyzer-possible-null-dereference]
   17 |             result[j++] = str[i];
      |             ~~~~~~~~~~~~^~~~~~~~
  'decode': events 1-4
    |
    |    7 |     char* result = (char*)malloc(sizeof(char) * len * 10);
    |      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |      |                           |
    |      |                           (1) this call could return NULL
    |    8 |     int j = 0;
    |    9 |     for (int i = 0; i < len; i++) {
    |      |                     ~~~~~~~
    |      |                       |
    |      |                       (2) following 'true' branch (when 'i < len')...
    |   10 |         if (str[i] >= '0' && str[i] <= '9') {
    |      |                ~           
    |      |                |
    |      |                (3) ...to here
    |......
    |   17 |             result[j++] = str[i];
    |      |             ~~~~~~~~~~~~~~~~~~~~
    |      |                         |
    |      |                         (4) 'result + (sizetype)j' could be NULL: unchecked value from (1)
    |
collected_code_3/problem-215-1.c:20:15: warning: dereference of possibly-NULL 'result' [CWE-690] [-Wanalyzer-possible-null-dereference]
   20 |     result[j] = '\0';
      |     ~~~~~~~~~~^~~~~~
  'main': events 1-2
    |
    |   24 | int main() {
    |      |     ^~~~
    |      |     |
    |      |     (1) entry to 'main'
    |   25 |     char str[] = "2a3b4c";
    |   26 |     char* decoded_str = decode(str);
    |      |                         ~~~~~~~~~~~
    |      |                         |
    |      |                         (2) calling 'decode' from 'main'
    |
    +--> 'decode': events 3-7
           |
           |    5 | char* decode(char* str) {
           |      |       ^~~~~~
           |      |       |
           |      |       (3) entry to 'decode'
           |    6 |     int len = strlen(str);
           |    7 |     char* result = (char*)malloc(sizeof(char) * len * 10);
           |      |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           |      |                           |
           |      |                           (4) this call could return NULL
           |    8 |     int j = 0;
           |    9 |     for (int i = 0; i < len; i++) {
           |      |                     ~~~~~~~
           |      |                       |
           |      |                       (5) following 'false' branch (when 'i >= len')...
           |......
           |   20 |     result[j] = '\0';
           |      |     ~~~~~~~~~~~~~~~~
           |      |           |   |
           |      |           |   (7) 'result + (sizetype)j' could be NULL: unchecked value from (4)
           |      |           (6) ...to here
           |
